//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try font.validate()
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 23 colors.
  struct color {
    /// Color `BackgroundColor`.
    static let backgroundColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "BackgroundColor")
    /// Color `BorderColor`.
    static let borderColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "BorderColor")
    /// Color `CardBGColor`.
    static let cardBGColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "CardBGColor")
    /// Color `CardColor`.
    static let cardColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "CardColor")
    /// Color `DarkBlueColor`.
    static let darkBlueColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "DarkBlueColor")
    /// Color `DarkFontColor`.
    static let darkFontColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "DarkFontColor")
    /// Color `DarkGrayColor`.
    static let darkGrayColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "DarkGrayColor")
    /// Color `GreenBGColor`.
    static let greenBGColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "GreenBGColor")
    /// Color `GreenColor`.
    static let greenColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "GreenColor")
    /// Color `LightBlueColor`.
    static let lightBlueColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "LightBlueColor")
    /// Color `LightGreenColor`.
    static let lightGreenColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "LightGreenColor")
    /// Color `NewBgColor`.
    static let newBgColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "NewBgColor")
    /// Color `OrangeColor`.
    static let orangeColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "OrangeColor")
    /// Color `RedBGColor`.
    static let redBGColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "RedBGColor")
    /// Color `SelectionColor`.
    static let selectionColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "SelectionColor")
    /// Color `TabbarBgColor`.
    static let tabbarBgColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "TabbarBgColor")
    /// Color `TextBlackColor`.
    static let textBlackColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "TextBlackColor")
    /// Color `TextBlueColor`.
    static let textBlueColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "TextBlueColor")
    /// Color `TextGrayColor`.
    static let textGrayColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "TextGrayColor")
    /// Color `TextLightBlackColor`.
    static let textLightBlackColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "TextLightBlackColor")
    /// Color `TextLightGrayColor`.
    static let textLightGrayColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "TextLightGrayColor")
    /// Color `TextRedColor`.
    static let textRedColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "TextRedColor")
    /// Color `TextWhiteColor`.
    static let textWhiteColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "TextWhiteColor")
    
    /// `UIColor(named: "BackgroundColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func backgroundColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.backgroundColor, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "BorderColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func borderColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.borderColor, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "CardBGColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func cardBGColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.cardBGColor, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "CardColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func cardColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.cardColor, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "DarkBlueColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func darkBlueColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.darkBlueColor, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "DarkFontColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func darkFontColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.darkFontColor, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "DarkGrayColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func darkGrayColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.darkGrayColor, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "GreenBGColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func greenBGColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.greenBGColor, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "GreenColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func greenColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.greenColor, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "LightBlueColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func lightBlueColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.lightBlueColor, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "LightGreenColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func lightGreenColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.lightGreenColor, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "NewBgColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func newBgColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.newBgColor, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "OrangeColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func orangeColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.orangeColor, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "RedBGColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func redBGColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.redBGColor, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "SelectionColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func selectionColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.selectionColor, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "TabbarBgColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func tabbarBgColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.tabbarBgColor, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "TextBlackColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func textBlackColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.textBlackColor, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "TextBlueColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func textBlueColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.textBlueColor, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "TextGrayColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func textGrayColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.textGrayColor, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "TextLightBlackColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func textLightBlackColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.textLightBlackColor, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "TextLightGrayColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func textLightGrayColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.textLightGrayColor, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "TextRedColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func textRedColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.textRedColor, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "TextWhiteColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func textWhiteColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.textWhiteColor, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 2 files.
  struct file {
    /// Resource file `Configuration.plist`.
    static let configurationPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "Configuration", pathExtension: "plist")
    /// Resource file `GoogleService-Info.plist`.
    static let googleServiceInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")
    
    /// `bundle.url(forResource: "Configuration", withExtension: "plist")`
    static func configurationPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.configurationPlist
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "GoogleService-Info", withExtension: "plist")`
    static func googleServiceInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 5 fonts.
  struct font: Rswift.Validatable {
    /// Font `SFProDisplay-RegularItalic`.
    static let sfProDisplayRegularItalic = Rswift.FontResource(fontName: "SFProDisplay-RegularItalic")
    /// Font `SFProText-Bold`.
    static let sfProTextBold = Rswift.FontResource(fontName: "SFProText-Bold")
    /// Font `SFProText-Medium`.
    static let sfProTextMedium = Rswift.FontResource(fontName: "SFProText-Medium")
    /// Font `SFProText-Regular`.
    static let sfProTextRegular = Rswift.FontResource(fontName: "SFProText-Regular")
    /// Font `SFProText-Semibold`.
    static let sfProTextSemibold = Rswift.FontResource(fontName: "SFProText-Semibold")
    
    /// `UIFont(name: "SFProDisplay-RegularItalic", size: ...)`
    static func sfProDisplayRegularItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProDisplayRegularItalic, size: size)
    }
    
    /// `UIFont(name: "SFProText-Bold", size: ...)`
    static func sfProTextBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProTextBold, size: size)
    }
    
    /// `UIFont(name: "SFProText-Medium", size: ...)`
    static func sfProTextMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProTextMedium, size: size)
    }
    
    /// `UIFont(name: "SFProText-Regular", size: ...)`
    static func sfProTextRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProTextRegular, size: size)
    }
    
    /// `UIFont(name: "SFProText-Semibold", size: ...)`
    static func sfProTextSemibold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProTextSemibold, size: size)
    }
    
    static func validate() throws {
      if R.font.sfProDisplayRegularItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProDisplay-RegularItalic' could not be loaded, is 'FontsFree-Net-SFProDisplay-RegularItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProTextBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProText-Bold' could not be loaded, is 'FontsFree-Net-SFProText-Bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProTextMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProText-Medium' could not be loaded, is 'FontsFree-Net-SFProText-Medium.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProTextRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProText-Regular' could not be loaded, is 'FontsFree-Net-SFProText-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProTextSemibold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProText-Semibold' could not be loaded, is 'FontsFree-Net-SFProText-Semibold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }
    
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 214 images.
  struct image {
    /// Image `Flag_of_Denmark`.
    static let flag_of_Denmark = Rswift.ImageResource(bundle: R.hostingBundle, name: "Flag_of_Denmark")
    /// Image `Flag_of_Greenland`.
    static let flag_of_Greenland = Rswift.ImageResource(bundle: R.hostingBundle, name: "Flag_of_Greenland")
    /// Image `Flag_of_the_United_States`.
    static let flag_of_the_United_States = Rswift.ImageResource(bundle: R.hostingBundle, name: "Flag_of_the_United_States")
    /// Image `Pisiffik_app_logo`.
    static let pisiffik_app_logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "Pisiffik_app_logo")
    /// Image `app_logo_blue`.
    static let app_logo_blue = Rswift.ImageResource(bundle: R.hostingBundle, name: "app_logo_blue")
    /// Image `app_logo`.
    static let app_logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "app_logo")
    /// Image `background`.
    static let background = Rswift.ImageResource(bundle: R.hostingBundle, name: "background")
    /// Image `bi_check`.
    static let bi_check = Rswift.ImageResource(bundle: R.hostingBundle, name: "bi_check")
    /// Image `bi_uncheck`.
    static let bi_uncheck = Rswift.ImageResource(bundle: R.hostingBundle, name: "bi_uncheck")
    /// Image `bottom_tabbar_ipad`.
    static let bottom_tabbar_ipad = Rswift.ImageResource(bundle: R.hostingBundle, name: "bottom_tabbar_ipad")
    /// Image `bottom_tabbar_ipone`.
    static let bottom_tabbar_ipone = Rswift.ImageResource(bundle: R.hostingBundle, name: "bottom_tabbar_ipone")
    /// Image `campaing_1`.
    static let campaing_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "campaing_1")
    /// Image `campaing_2`.
    static let campaing_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "campaing_2")
    /// Image `campaing_3`.
    static let campaing_3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "campaing_3")
    /// Image `campaing_4`.
    static let campaing_4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "campaing_4")
    /// Image `campaing_5`.
    static let campaing_5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "campaing_5")
    /// Image `file_icon`.
    static let file_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "file_icon")
    /// Image `green_circle`.
    static let green_circle = Rswift.ImageResource(bundle: R.hostingBundle, name: "green_circle")
    /// Image `head_phone_product`.
    static let head_phone_product = Rswift.ImageResource(bundle: R.hostingBundle, name: "head_phone_product")
    /// Image `ic_add_event`.
    static let ic_add_event = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_add_event")
    /// Image `ic_add_ticket_icon_`.
    static let ic_add_ticket_icon_ = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_add_ticket_icon_")
    /// Image `ic_add_ticket_icon`.
    static let ic_add_ticket_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_add_ticket_icon")
    /// Image `ic_address_home_icon`.
    static let ic_address_home_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_address_home_icon")
    /// Image `ic_address_icon`.
    static let ic_address_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_address_icon")
    /// Image `ic_address_office_icon`.
    static let ic_address_office_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_address_office_icon")
    /// Image `ic_address_other_icon`.
    static let ic_address_other_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_address_other_icon")
    /// Image `ic_attach_file_icon`.
    static let ic_attach_file_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_attach_file_icon")
    /// Image `ic_back`.
    static let ic_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_back")
    /// Image `ic_bananas`.
    static let ic_bananas = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_bananas")
    /// Image `ic_banner`.
    static let ic_banner = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_banner")
    /// Image `ic_black_cancel_icon`.
    static let ic_black_cancel_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_black_cancel_icon")
    /// Image `ic_blue_circle`.
    static let ic_blue_circle = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_blue_circle")
    /// Image `ic_blue_clock_icon`.
    static let ic_blue_clock_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_blue_clock_icon")
    /// Image `ic_blue_down_chevron`.
    static let ic_blue_down_chevron = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_blue_down_chevron")
    /// Image `ic_blue_filled_circle`.
    static let ic_blue_filled_circle = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_blue_filled_circle")
    /// Image `ic_blue_list_icon`.
    static let ic_blue_list_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_blue_list_icon")
    /// Image `ic_blue_location_icon`.
    static let ic_blue_location_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_blue_location_icon")
    /// Image `ic_blue_user_icon`.
    static let ic_blue_user_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_blue_user_icon")
    /// Image `ic_calendar_icon`.
    static let ic_calendar_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_calendar_icon")
    /// Image `ic_campaign_image`.
    static let ic_campaign_image = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_campaign_image")
    /// Image `ic_cancel_icon`.
    static let ic_cancel_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_cancel_icon")
    /// Image `ic_cart_icon`.
    static let ic_cart_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_cart_icon")
    /// Image `ic_cash_icon`.
    static let ic_cash_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_cash_icon")
    /// Image `ic_click_collect_icon`.
    static let ic_click_collect_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_click_collect_icon")
    /// Image `ic_click_collect`.
    static let ic_click_collect = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_click_collect")
    /// Image `ic_clicked`.
    static let ic_clicked = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_clicked")
    /// Image `ic_clock_icon`.
    static let ic_clock_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_clock_icon")
    /// Image `ic_cloth`.
    static let ic_cloth = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_cloth")
    /// Image `ic_credit_card_icon`.
    static let ic_credit_card_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_credit_card_icon")
    /// Image `ic_danger_image`.
    static let ic_danger_image = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_danger_image")
    /// Image `ic_dark_green_tick`.
    static let ic_dark_green_tick = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_dark_green_tick")
    /// Image `ic_date_of_birth`.
    static let ic_date_of_birth = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_date_of_birth")
    /// Image `ic_days_icon`.
    static let ic_days_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_days_icon")
    /// Image `ic_delete_icon`.
    static let ic_delete_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_delete_icon")
    /// Image `ic_delivered_icon`.
    static let ic_delivered_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_delivered_icon")
    /// Image `ic_delivery`.
    static let ic_delivery = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_delivery")
    /// Image `ic_disable_prefrences_icon`.
    static let ic_disable_prefrences_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_disable_prefrences_icon")
    /// Image `ic_dismiss_icon`.
    static let ic_dismiss_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_dismiss_icon")
    /// Image `ic_download_icon`.
    static let ic_download_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_download_icon")
    /// Image `ic_drop_down`.
    static let ic_drop_down = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_drop_down")
    /// Image `ic_edit_icon`.
    static let ic_edit_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_edit_icon")
    /// Image `ic_edit`.
    static let ic_edit = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_edit")
    /// Image `ic_electronic_banner`.
    static let ic_electronic_banner = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_electronic_banner")
    /// Image `ic_electronic`.
    static let ic_electronic = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_electronic")
    /// Image `ic_enable_prefrences_icon`.
    static let ic_enable_prefrences_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_enable_prefrences_icon")
    /// Image `ic_events_image`.
    static let ic_events_image = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_events_image")
    /// Image `ic_faq_downward_arrow`.
    static let ic_faq_downward_arrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_faq_downward_arrow")
    /// Image `ic_faq_upward_arrow`.
    static let ic_faq_upward_arrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_faq_upward_arrow")
    /// Image `ic_female`.
    static let ic_female = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_female")
    /// Image `ic_file_error_icon`.
    static let ic_file_error_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_file_error_icon")
    /// Image `ic_filter_icon`.
    static let ic_filter_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_filter_icon")
    /// Image `ic_first_index_icon`.
    static let ic_first_index_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_first_index_icon")
    /// Image `ic_forward_icon`.
    static let ic_forward_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_forward_icon")
    /// Image `ic_ginger`.
    static let ic_ginger = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_ginger")
    /// Image `ic_gray_downward_chevron`.
    static let ic_gray_downward_chevron = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_gray_downward_chevron")
    /// Image `ic_gray_list_icon`.
    static let ic_gray_list_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_gray_list_icon")
    /// Image `ic_gray_upward_chevron`.
    static let ic_gray_upward_chevron = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_gray_upward_chevron")
    /// Image `ic_green_tick`.
    static let ic_green_tick = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_green_tick")
    /// Image `ic_hardware`.
    static let ic_hardware = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_hardware")
    /// Image `ic_headphone_image`.
    static let ic_headphone_image = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_headphone_image")
    /// Image `ic_hide_password`.
    static let ic_hide_password = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_hide_password")
    /// Image `ic_home_notifications_icon`.
    static let ic_home_notifications_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_home_notifications_icon")
    /// Image `ic_home_white_icon`.
    static let ic_home_white_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_home_white_icon")
    /// Image `ic_home`.
    static let ic_home = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_home")
    /// Image `ic_image_compressing_icon`.
    static let ic_image_compressing_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_image_compressing_icon")
    /// Image `ic_info_icon`.
    static let ic_info_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_info_icon")
    /// Image `ic_instock_icon`.
    static let ic_instock_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_instock_icon")
    /// Image `ic_interior_design`.
    static let ic_interior_design = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_interior_design")
    /// Image `ic_last_index_icon`.
    static let ic_last_index_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_last_index_icon")
    /// Image `ic_led`.
    static let ic_led = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_led")
    /// Image `ic_left_chevron`.
    static let ic_left_chevron = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_left_chevron")
    /// Image `ic_left_gray_chevron`.
    static let ic_left_gray_chevron = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_left_gray_chevron")
    /// Image `ic_liked`.
    static let ic_liked = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_liked")
    /// Image `ic_location_icon`.
    static let ic_location_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_location_icon")
    /// Image `ic_male`.
    static let ic_male = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_male")
    /// Image `ic_master_card_icon`.
    static let ic_master_card_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_master_card_icon")
    /// Image `ic_membershipCard_image`.
    static let ic_membershipCard_image = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_membershipCard_image")
    /// Image `ic_membersip_star_image`.
    static let ic_membersip_star_image = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_membersip_star_image")
    /// Image `ic_my_favorites`.
    static let ic_my_favorites = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_my_favorites")
    /// Image `ic_my_inbox`.
    static let ic_my_inbox = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_my_inbox")
    /// Image `ic_my_membership`.
    static let ic_my_membership = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_my_membership")
    /// Image `ic_my_offer_benifits`.
    static let ic_my_offer_benifits = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_my_offer_benifits")
    /// Image `ic_my_payment_method_icon`.
    static let ic_my_payment_method_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_my_payment_method_icon")
    /// Image `ic_my_points`.
    static let ic_my_points = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_my_points")
    /// Image `ic_my_preferences`.
    static let ic_my_preferences = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_my_preferences")
    /// Image `ic_my_profile`.
    static let ic_my_profile = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_my_profile")
    /// Image `ic_my_purchase`.
    static let ic_my_purchase = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_my_purchase")
    /// Image `ic_my_store`.
    static let ic_my_store = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_my_store")
    /// Image `ic_new_year`.
    static let ic_new_year = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_new_year")
    /// Image `ic_news_icon`.
    static let ic_news_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_news_icon")
    /// Image `ic_newspaper`.
    static let ic_newspaper = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_newspaper")
    /// Image `ic_next_icon`.
    static let ic_next_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_next_icon")
    /// Image `ic_no_card_add_image`.
    static let ic_no_card_add_image = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_no_card_add_image")
    /// Image `ic_no_connection_image`.
    static let ic_no_connection_image = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_no_connection_image")
    /// Image `ic_no_item_found_image`.
    static let ic_no_item_found_image = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_no_item_found_image")
    /// Image `ic_notification_icon`.
    static let ic_notification_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_notification_icon")
    /// Image `ic_offer_image`.
    static let ic_offer_image = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_offer_image")
    /// Image `ic_offer`.
    static let ic_offer = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_offer")
    /// Image `ic_old_cart_icon`.
    static let ic_old_cart_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_old_cart_icon")
    /// Image `ic_order`.
    static let ic_order = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_order")
    /// Image `ic_other_queries`.
    static let ic_other_queries = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_other_queries")
    /// Image `ic_outdoor`.
    static let ic_outdoor = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_outdoor")
    /// Image `ic_payment_card_bg`.
    static let ic_payment_card_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_payment_card_bg")
    /// Image `ic_payment`.
    static let ic_payment = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_payment")
    /// Image `ic_phone_call_icon`.
    static let ic_phone_call_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_phone_call_icon")
    /// Image `ic_pickup_done_icon`.
    static let ic_pickup_done_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_pickup_done_icon")
    /// Image `ic_pisiffik_image`.
    static let ic_pisiffik_image = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_pisiffik_image")
    /// Image `ic_play_icon`.
    static let ic_play_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_play_icon")
    /// Image `ic_point_image`.
    static let ic_point_image = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_point_image")
    /// Image `ic_points_green_circle`.
    static let ic_points_green_circle = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_points_green_circle")
    /// Image `ic_points_line`.
    static let ic_points_line = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_points_line")
    /// Image `ic_preferences_check_`.
    static let ic_preferences_check_ = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_preferences_check_")
    /// Image `ic_preferences_check`.
    static let ic_preferences_check = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_preferences_check")
    /// Image `ic_preferences_down`.
    static let ic_preferences_down = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_preferences_down")
    /// Image `ic_preferences_uncheck_`.
    static let ic_preferences_uncheck_ = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_preferences_uncheck_")
    /// Image `ic_preferences_uncheck`.
    static let ic_preferences_uncheck = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_preferences_uncheck")
    /// Image `ic_preferences_up`.
    static let ic_preferences_up = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_preferences_up")
    /// Image `ic_prefrence_elgiganten`.
    static let ic_prefrence_elgiganten = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_prefrence_elgiganten")
    /// Image `ic_prefrence_ilva`.
    static let ic_prefrence_ilva = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_prefrence_ilva")
    /// Image `ic_prefrence_jysk`.
    static let ic_prefrence_jysk = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_prefrence_jysk")
    /// Image `ic_prefrence_pisiffik`.
    static let ic_prefrence_pisiffik = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_prefrence_pisiffik")
    /// Image `ic_prefrence_thansen`.
    static let ic_prefrence_thansen = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_prefrence_thansen")
    /// Image `ic_prefrence_tick_icon`.
    static let ic_prefrence_tick_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_prefrence_tick_icon")
    /// Image `ic_prefrence_torrak`.
    static let ic_prefrence_torrak = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_prefrence_torrak")
    /// Image `ic_previous_icon`.
    static let ic_previous_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_previous_icon")
    /// Image `ic_product`.
    static let ic_product = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_product")
    /// Image `ic_profile_icon`.
    static let ic_profile_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_profile_icon")
    /// Image `ic_recipe_detail_item_image`.
    static let ic_recipe_detail_item_image = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_recipe_detail_item_image")
    /// Image `ic_recipe_favorite_icon`.
    static let ic_recipe_favorite_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_recipe_favorite_icon")
    /// Image `ic_recipe_favorite_old_icon`.
    static let ic_recipe_favorite_old_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_recipe_favorite_old_icon")
    /// Image `ic_recipe_unfavorite_icon`.
    static let ic_recipe_unfavorite_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_recipe_unfavorite_icon")
    /// Image `ic_recipies_image`.
    static let ic_recipies_image = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_recipies_image")
    /// Image `ic_red_pepper`.
    static let ic_red_pepper = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_red_pepper")
    /// Image `ic_remove_event`.
    static let ic_remove_event = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_remove_event")
    /// Image `ic_remove_payment_card_icon`.
    static let ic_remove_payment_card_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_remove_payment_card_icon")
    /// Image `ic_right_arrow`.
    static let ic_right_arrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_right_arrow")
    /// Image `ic_search_icon`.
    static let ic_search_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_search_icon")
    /// Image `ic_select_cart_icon`.
    static let ic_select_cart_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_select_cart_icon")
    /// Image `ic_select_cart_list_icon`.
    static let ic_select_cart_list_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_select_cart_list_icon")
    /// Image `ic_select_favorite_icon`.
    static let ic_select_favorite_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_select_favorite_icon")
    /// Image `ic_select_grid_icon`.
    static let ic_select_grid_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_select_grid_icon")
    /// Image `ic_select_item_icon_`.
    static let ic_select_item_icon_ = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_select_item_icon_")
    /// Image `ic_select_item_icon`.
    static let ic_select_item_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_select_item_icon")
    /// Image `ic_select_list_icon`.
    static let ic_select_list_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_select_list_icon")
    /// Image `ic_selected`.
    static let ic_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_selected")
    /// Image `ic_send_icon`.
    static let ic_send_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_send_icon")
    /// Image `ic_sent_to_done_icon`.
    static let ic_sent_to_done_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_sent_to_done_icon")
    /// Image `ic_share_icon`.
    static let ic_share_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_share_icon")
    /// Image `ic_show_password`.
    static let ic_show_password = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_show_password")
    /// Image `ic_single_purchase_icon`.
    static let ic_single_purchase_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_single_purchase_icon")
    /// Image `ic_slider_image`.
    static let ic_slider_image = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_slider_image")
    /// Image `ic_sometong_went_wrong_image`.
    static let ic_sometong_went_wrong_image = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_sometong_went_wrong_image")
    /// Image `ic_tabbar_home`.
    static let ic_tabbar_home = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tabbar_home")
    /// Image `ic_tabbar_offer`.
    static let ic_tabbar_offer = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tabbar_offer")
    /// Image `ic_tabbar_online`.
    static let ic_tabbar_online = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tabbar_online")
    /// Image `ic_tabbar_profile`.
    static let ic_tabbar_profile = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tabbar_profile")
    /// Image `ic_tabbar_store`.
    static let ic_tabbar_store = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tabbar_store")
    /// Image `ic_ticket_icon`.
    static let ic_ticket_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_ticket_icon")
    /// Image `ic_time_icon`.
    static let ic_time_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_time_icon")
    /// Image `ic_toy`.
    static let ic_toy = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_toy")
    /// Image `ic_uncheck_circle`.
    static let ic_uncheck_circle = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_uncheck_circle")
    /// Image `ic_unclicked`.
    static let ic_unclicked = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_unclicked")
    /// Image `ic_unliked`.
    static let ic_unliked = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_unliked")
    /// Image `ic_unselect_cart_icon`.
    static let ic_unselect_cart_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_unselect_cart_icon")
    /// Image `ic_unselect_cart_list_icon`.
    static let ic_unselect_cart_list_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_unselect_cart_list_icon")
    /// Image `ic_unselect_check_box`.
    static let ic_unselect_check_box = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_unselect_check_box")
    /// Image `ic_unselect_favorite_icon`.
    static let ic_unselect_favorite_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_unselect_favorite_icon")
    /// Image `ic_unselect_grid_icon`.
    static let ic_unselect_grid_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_unselect_grid_icon")
    /// Image `ic_unselect_item_icon_`.
    static let ic_unselect_item_icon_ = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_unselect_item_icon_")
    /// Image `ic_unselect_item_icon`.
    static let ic_unselect_item_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_unselect_item_icon")
    /// Image `ic_unselect_list_icon`.
    static let ic_unselect_list_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_unselect_list_icon")
    /// Image `ic_unselected`.
    static let ic_unselected = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_unselected")
    /// Image `ic_valid_email_icon`.
    static let ic_valid_email_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_valid_email_icon")
    /// Image `ic_verifying`.
    static let ic_verifying = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_verifying")
    /// Image `ic_vinnit`.
    static let ic_vinnit = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_vinnit")
    /// Image `ic_visa_card_icon`.
    static let ic_visa_card_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_visa_card_icon")
    /// Image `ic_visa_image`.
    static let ic_visa_image = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_visa_image")
    /// Image `ic_white_cart_list_icon`.
    static let ic_white_cart_list_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_white_cart_list_icon")
    /// Image `ic_white_points_circle`.
    static let ic_white_points_circle = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_white_points_circle")
    /// Image `image_icon`.
    static let image_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "image_icon")
    /// Image `location_icon`.
    static let location_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "location_icon")
    /// Image `newspaper_1`.
    static let newspaper_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "newspaper_1")
    /// Image `newspaper_2`.
    static let newspaper_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "newspaper_2")
    /// Image `newspaper_3`.
    static let newspaper_3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "newspaper_3")
    /// Image `newspaper_4`.
    static let newspaper_4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "newspaper_4")
    /// Image `onboard_coin`.
    static let onboard_coin = Rswift.ImageResource(bundle: R.hostingBundle, name: "onboard_coin")
    /// Image `onboard_loyality`.
    static let onboard_loyality = Rswift.ImageResource(bundle: R.hostingBundle, name: "onboard_loyality")
    /// Image `onboard_one`.
    static let onboard_one = Rswift.ImageResource(bundle: R.hostingBundle, name: "onboard_one")
    /// Image `onboard_three`.
    static let onboard_three = Rswift.ImageResource(bundle: R.hostingBundle, name: "onboard_three")
    /// Image `onboard_two`.
    static let onboard_two = Rswift.ImageResource(bundle: R.hostingBundle, name: "onboard_two")
    /// Image `onboard_wallet`.
    static let onboard_wallet = Rswift.ImageResource(bundle: R.hostingBundle, name: "onboard_wallet")
    /// Image `verfication_progress`.
    static let verfication_progress = Rswift.ImageResource(bundle: R.hostingBundle, name: "verfication_progress")
    /// Image `verification_success`.
    static let verification_success = Rswift.ImageResource(bundle: R.hostingBundle, name: "verification_success")
    /// Image `watch_product`.
    static let watch_product = Rswift.ImageResource(bundle: R.hostingBundle, name: "watch_product")
    
    /// `UIImage(named: "Flag_of_Denmark", bundle: ..., traitCollection: ...)`
    static func flag_of_Denmark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.flag_of_Denmark, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Flag_of_Greenland", bundle: ..., traitCollection: ...)`
    static func flag_of_Greenland(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.flag_of_Greenland, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Flag_of_the_United_States", bundle: ..., traitCollection: ...)`
    static func flag_of_the_United_States(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.flag_of_the_United_States, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Pisiffik_app_logo", bundle: ..., traitCollection: ...)`
    static func pisiffik_app_logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pisiffik_app_logo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "app_logo", bundle: ..., traitCollection: ...)`
    static func app_logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.app_logo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "app_logo_blue", bundle: ..., traitCollection: ...)`
    static func app_logo_blue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.app_logo_blue, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "background", bundle: ..., traitCollection: ...)`
    static func background(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.background, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bi_check", bundle: ..., traitCollection: ...)`
    static func bi_check(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bi_check, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bi_uncheck", bundle: ..., traitCollection: ...)`
    static func bi_uncheck(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bi_uncheck, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bottom_tabbar_ipad", bundle: ..., traitCollection: ...)`
    static func bottom_tabbar_ipad(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bottom_tabbar_ipad, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bottom_tabbar_ipone", bundle: ..., traitCollection: ...)`
    static func bottom_tabbar_ipone(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bottom_tabbar_ipone, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "campaing_1", bundle: ..., traitCollection: ...)`
    static func campaing_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.campaing_1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "campaing_2", bundle: ..., traitCollection: ...)`
    static func campaing_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.campaing_2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "campaing_3", bundle: ..., traitCollection: ...)`
    static func campaing_3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.campaing_3, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "campaing_4", bundle: ..., traitCollection: ...)`
    static func campaing_4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.campaing_4, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "campaing_5", bundle: ..., traitCollection: ...)`
    static func campaing_5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.campaing_5, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "file_icon", bundle: ..., traitCollection: ...)`
    static func file_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.file_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "green_circle", bundle: ..., traitCollection: ...)`
    static func green_circle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.green_circle, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "head_phone_product", bundle: ..., traitCollection: ...)`
    static func head_phone_product(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.head_phone_product, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_add_event", bundle: ..., traitCollection: ...)`
    static func ic_add_event(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_add_event, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_add_ticket_icon", bundle: ..., traitCollection: ...)`
    static func ic_add_ticket_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_add_ticket_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_add_ticket_icon_", bundle: ..., traitCollection: ...)`
    static func ic_add_ticket_icon_(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_add_ticket_icon_, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_address_home_icon", bundle: ..., traitCollection: ...)`
    static func ic_address_home_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_address_home_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_address_icon", bundle: ..., traitCollection: ...)`
    static func ic_address_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_address_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_address_office_icon", bundle: ..., traitCollection: ...)`
    static func ic_address_office_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_address_office_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_address_other_icon", bundle: ..., traitCollection: ...)`
    static func ic_address_other_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_address_other_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_attach_file_icon", bundle: ..., traitCollection: ...)`
    static func ic_attach_file_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_attach_file_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_back", bundle: ..., traitCollection: ...)`
    static func ic_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_back, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_bananas", bundle: ..., traitCollection: ...)`
    static func ic_bananas(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_bananas, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_banner", bundle: ..., traitCollection: ...)`
    static func ic_banner(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_banner, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_black_cancel_icon", bundle: ..., traitCollection: ...)`
    static func ic_black_cancel_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_black_cancel_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_blue_circle", bundle: ..., traitCollection: ...)`
    static func ic_blue_circle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_blue_circle, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_blue_clock_icon", bundle: ..., traitCollection: ...)`
    static func ic_blue_clock_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_blue_clock_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_blue_down_chevron", bundle: ..., traitCollection: ...)`
    static func ic_blue_down_chevron(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_blue_down_chevron, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_blue_filled_circle", bundle: ..., traitCollection: ...)`
    static func ic_blue_filled_circle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_blue_filled_circle, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_blue_list_icon", bundle: ..., traitCollection: ...)`
    static func ic_blue_list_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_blue_list_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_blue_location_icon", bundle: ..., traitCollection: ...)`
    static func ic_blue_location_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_blue_location_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_blue_user_icon", bundle: ..., traitCollection: ...)`
    static func ic_blue_user_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_blue_user_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_calendar_icon", bundle: ..., traitCollection: ...)`
    static func ic_calendar_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_calendar_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_campaign_image", bundle: ..., traitCollection: ...)`
    static func ic_campaign_image(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_campaign_image, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_cancel_icon", bundle: ..., traitCollection: ...)`
    static func ic_cancel_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_cancel_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_cart_icon", bundle: ..., traitCollection: ...)`
    static func ic_cart_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_cart_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_cash_icon", bundle: ..., traitCollection: ...)`
    static func ic_cash_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_cash_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_click_collect", bundle: ..., traitCollection: ...)`
    static func ic_click_collect(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_click_collect, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_click_collect_icon", bundle: ..., traitCollection: ...)`
    static func ic_click_collect_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_click_collect_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_clicked", bundle: ..., traitCollection: ...)`
    static func ic_clicked(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_clicked, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_clock_icon", bundle: ..., traitCollection: ...)`
    static func ic_clock_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_clock_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_cloth", bundle: ..., traitCollection: ...)`
    static func ic_cloth(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_cloth, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_credit_card_icon", bundle: ..., traitCollection: ...)`
    static func ic_credit_card_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_credit_card_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_danger_image", bundle: ..., traitCollection: ...)`
    static func ic_danger_image(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_danger_image, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_dark_green_tick", bundle: ..., traitCollection: ...)`
    static func ic_dark_green_tick(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_dark_green_tick, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_date_of_birth", bundle: ..., traitCollection: ...)`
    static func ic_date_of_birth(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_date_of_birth, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_days_icon", bundle: ..., traitCollection: ...)`
    static func ic_days_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_days_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_delete_icon", bundle: ..., traitCollection: ...)`
    static func ic_delete_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_delete_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_delivered_icon", bundle: ..., traitCollection: ...)`
    static func ic_delivered_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_delivered_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_delivery", bundle: ..., traitCollection: ...)`
    static func ic_delivery(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_delivery, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_disable_prefrences_icon", bundle: ..., traitCollection: ...)`
    static func ic_disable_prefrences_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_disable_prefrences_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_dismiss_icon", bundle: ..., traitCollection: ...)`
    static func ic_dismiss_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_dismiss_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_download_icon", bundle: ..., traitCollection: ...)`
    static func ic_download_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_download_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_drop_down", bundle: ..., traitCollection: ...)`
    static func ic_drop_down(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_drop_down, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_edit", bundle: ..., traitCollection: ...)`
    static func ic_edit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_edit, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_edit_icon", bundle: ..., traitCollection: ...)`
    static func ic_edit_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_edit_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_electronic", bundle: ..., traitCollection: ...)`
    static func ic_electronic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_electronic, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_electronic_banner", bundle: ..., traitCollection: ...)`
    static func ic_electronic_banner(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_electronic_banner, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_enable_prefrences_icon", bundle: ..., traitCollection: ...)`
    static func ic_enable_prefrences_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_enable_prefrences_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_events_image", bundle: ..., traitCollection: ...)`
    static func ic_events_image(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_events_image, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_faq_downward_arrow", bundle: ..., traitCollection: ...)`
    static func ic_faq_downward_arrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_faq_downward_arrow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_faq_upward_arrow", bundle: ..., traitCollection: ...)`
    static func ic_faq_upward_arrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_faq_upward_arrow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_female", bundle: ..., traitCollection: ...)`
    static func ic_female(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_female, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_file_error_icon", bundle: ..., traitCollection: ...)`
    static func ic_file_error_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_file_error_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_filter_icon", bundle: ..., traitCollection: ...)`
    static func ic_filter_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_filter_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_first_index_icon", bundle: ..., traitCollection: ...)`
    static func ic_first_index_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_first_index_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_forward_icon", bundle: ..., traitCollection: ...)`
    static func ic_forward_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_forward_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_ginger", bundle: ..., traitCollection: ...)`
    static func ic_ginger(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_ginger, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_gray_downward_chevron", bundle: ..., traitCollection: ...)`
    static func ic_gray_downward_chevron(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_gray_downward_chevron, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_gray_list_icon", bundle: ..., traitCollection: ...)`
    static func ic_gray_list_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_gray_list_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_gray_upward_chevron", bundle: ..., traitCollection: ...)`
    static func ic_gray_upward_chevron(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_gray_upward_chevron, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_green_tick", bundle: ..., traitCollection: ...)`
    static func ic_green_tick(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_green_tick, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_hardware", bundle: ..., traitCollection: ...)`
    static func ic_hardware(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_hardware, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_headphone_image", bundle: ..., traitCollection: ...)`
    static func ic_headphone_image(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_headphone_image, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_hide_password", bundle: ..., traitCollection: ...)`
    static func ic_hide_password(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_hide_password, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_home", bundle: ..., traitCollection: ...)`
    static func ic_home(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_home, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_home_notifications_icon", bundle: ..., traitCollection: ...)`
    static func ic_home_notifications_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_home_notifications_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_home_white_icon", bundle: ..., traitCollection: ...)`
    static func ic_home_white_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_home_white_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_image_compressing_icon", bundle: ..., traitCollection: ...)`
    static func ic_image_compressing_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_image_compressing_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_info_icon", bundle: ..., traitCollection: ...)`
    static func ic_info_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_info_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_instock_icon", bundle: ..., traitCollection: ...)`
    static func ic_instock_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_instock_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_interior_design", bundle: ..., traitCollection: ...)`
    static func ic_interior_design(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_interior_design, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_last_index_icon", bundle: ..., traitCollection: ...)`
    static func ic_last_index_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_last_index_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_led", bundle: ..., traitCollection: ...)`
    static func ic_led(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_led, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_left_chevron", bundle: ..., traitCollection: ...)`
    static func ic_left_chevron(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_left_chevron, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_left_gray_chevron", bundle: ..., traitCollection: ...)`
    static func ic_left_gray_chevron(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_left_gray_chevron, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_liked", bundle: ..., traitCollection: ...)`
    static func ic_liked(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_liked, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_location_icon", bundle: ..., traitCollection: ...)`
    static func ic_location_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_location_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_male", bundle: ..., traitCollection: ...)`
    static func ic_male(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_male, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_master_card_icon", bundle: ..., traitCollection: ...)`
    static func ic_master_card_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_master_card_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_membershipCard_image", bundle: ..., traitCollection: ...)`
    static func ic_membershipCard_image(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_membershipCard_image, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_membersip_star_image", bundle: ..., traitCollection: ...)`
    static func ic_membersip_star_image(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_membersip_star_image, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_my_favorites", bundle: ..., traitCollection: ...)`
    static func ic_my_favorites(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_my_favorites, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_my_inbox", bundle: ..., traitCollection: ...)`
    static func ic_my_inbox(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_my_inbox, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_my_membership", bundle: ..., traitCollection: ...)`
    static func ic_my_membership(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_my_membership, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_my_offer_benifits", bundle: ..., traitCollection: ...)`
    static func ic_my_offer_benifits(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_my_offer_benifits, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_my_payment_method_icon", bundle: ..., traitCollection: ...)`
    static func ic_my_payment_method_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_my_payment_method_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_my_points", bundle: ..., traitCollection: ...)`
    static func ic_my_points(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_my_points, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_my_preferences", bundle: ..., traitCollection: ...)`
    static func ic_my_preferences(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_my_preferences, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_my_profile", bundle: ..., traitCollection: ...)`
    static func ic_my_profile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_my_profile, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_my_purchase", bundle: ..., traitCollection: ...)`
    static func ic_my_purchase(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_my_purchase, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_my_store", bundle: ..., traitCollection: ...)`
    static func ic_my_store(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_my_store, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_new_year", bundle: ..., traitCollection: ...)`
    static func ic_new_year(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_new_year, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_news_icon", bundle: ..., traitCollection: ...)`
    static func ic_news_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_news_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_newspaper", bundle: ..., traitCollection: ...)`
    static func ic_newspaper(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_newspaper, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_next_icon", bundle: ..., traitCollection: ...)`
    static func ic_next_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_next_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_no_card_add_image", bundle: ..., traitCollection: ...)`
    static func ic_no_card_add_image(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_no_card_add_image, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_no_connection_image", bundle: ..., traitCollection: ...)`
    static func ic_no_connection_image(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_no_connection_image, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_no_item_found_image", bundle: ..., traitCollection: ...)`
    static func ic_no_item_found_image(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_no_item_found_image, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_notification_icon", bundle: ..., traitCollection: ...)`
    static func ic_notification_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_notification_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_offer", bundle: ..., traitCollection: ...)`
    static func ic_offer(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_offer, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_offer_image", bundle: ..., traitCollection: ...)`
    static func ic_offer_image(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_offer_image, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_old_cart_icon", bundle: ..., traitCollection: ...)`
    static func ic_old_cart_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_old_cart_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_order", bundle: ..., traitCollection: ...)`
    static func ic_order(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_order, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_other_queries", bundle: ..., traitCollection: ...)`
    static func ic_other_queries(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_other_queries, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_outdoor", bundle: ..., traitCollection: ...)`
    static func ic_outdoor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_outdoor, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_payment", bundle: ..., traitCollection: ...)`
    static func ic_payment(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_payment, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_payment_card_bg", bundle: ..., traitCollection: ...)`
    static func ic_payment_card_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_payment_card_bg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_phone_call_icon", bundle: ..., traitCollection: ...)`
    static func ic_phone_call_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_phone_call_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_pickup_done_icon", bundle: ..., traitCollection: ...)`
    static func ic_pickup_done_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_pickup_done_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_pisiffik_image", bundle: ..., traitCollection: ...)`
    static func ic_pisiffik_image(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_pisiffik_image, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_play_icon", bundle: ..., traitCollection: ...)`
    static func ic_play_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_play_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_point_image", bundle: ..., traitCollection: ...)`
    static func ic_point_image(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_point_image, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_points_green_circle", bundle: ..., traitCollection: ...)`
    static func ic_points_green_circle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_points_green_circle, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_points_line", bundle: ..., traitCollection: ...)`
    static func ic_points_line(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_points_line, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_preferences_check", bundle: ..., traitCollection: ...)`
    static func ic_preferences_check(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_preferences_check, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_preferences_check_", bundle: ..., traitCollection: ...)`
    static func ic_preferences_check_(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_preferences_check_, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_preferences_down", bundle: ..., traitCollection: ...)`
    static func ic_preferences_down(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_preferences_down, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_preferences_uncheck", bundle: ..., traitCollection: ...)`
    static func ic_preferences_uncheck(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_preferences_uncheck, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_preferences_uncheck_", bundle: ..., traitCollection: ...)`
    static func ic_preferences_uncheck_(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_preferences_uncheck_, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_preferences_up", bundle: ..., traitCollection: ...)`
    static func ic_preferences_up(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_preferences_up, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_prefrence_elgiganten", bundle: ..., traitCollection: ...)`
    static func ic_prefrence_elgiganten(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_prefrence_elgiganten, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_prefrence_ilva", bundle: ..., traitCollection: ...)`
    static func ic_prefrence_ilva(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_prefrence_ilva, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_prefrence_jysk", bundle: ..., traitCollection: ...)`
    static func ic_prefrence_jysk(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_prefrence_jysk, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_prefrence_pisiffik", bundle: ..., traitCollection: ...)`
    static func ic_prefrence_pisiffik(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_prefrence_pisiffik, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_prefrence_thansen", bundle: ..., traitCollection: ...)`
    static func ic_prefrence_thansen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_prefrence_thansen, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_prefrence_tick_icon", bundle: ..., traitCollection: ...)`
    static func ic_prefrence_tick_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_prefrence_tick_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_prefrence_torrak", bundle: ..., traitCollection: ...)`
    static func ic_prefrence_torrak(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_prefrence_torrak, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_previous_icon", bundle: ..., traitCollection: ...)`
    static func ic_previous_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_previous_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_product", bundle: ..., traitCollection: ...)`
    static func ic_product(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_product, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_profile_icon", bundle: ..., traitCollection: ...)`
    static func ic_profile_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_profile_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_recipe_detail_item_image", bundle: ..., traitCollection: ...)`
    static func ic_recipe_detail_item_image(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_recipe_detail_item_image, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_recipe_favorite_icon", bundle: ..., traitCollection: ...)`
    static func ic_recipe_favorite_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_recipe_favorite_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_recipe_favorite_old_icon", bundle: ..., traitCollection: ...)`
    static func ic_recipe_favorite_old_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_recipe_favorite_old_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_recipe_unfavorite_icon", bundle: ..., traitCollection: ...)`
    static func ic_recipe_unfavorite_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_recipe_unfavorite_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_recipies_image", bundle: ..., traitCollection: ...)`
    static func ic_recipies_image(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_recipies_image, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_red_pepper", bundle: ..., traitCollection: ...)`
    static func ic_red_pepper(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_red_pepper, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_remove_event", bundle: ..., traitCollection: ...)`
    static func ic_remove_event(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_remove_event, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_remove_payment_card_icon", bundle: ..., traitCollection: ...)`
    static func ic_remove_payment_card_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_remove_payment_card_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_right_arrow", bundle: ..., traitCollection: ...)`
    static func ic_right_arrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_right_arrow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_search_icon", bundle: ..., traitCollection: ...)`
    static func ic_search_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_search_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_select_cart_icon", bundle: ..., traitCollection: ...)`
    static func ic_select_cart_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_select_cart_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_select_cart_list_icon", bundle: ..., traitCollection: ...)`
    static func ic_select_cart_list_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_select_cart_list_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_select_favorite_icon", bundle: ..., traitCollection: ...)`
    static func ic_select_favorite_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_select_favorite_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_select_grid_icon", bundle: ..., traitCollection: ...)`
    static func ic_select_grid_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_select_grid_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_select_item_icon", bundle: ..., traitCollection: ...)`
    static func ic_select_item_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_select_item_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_select_item_icon_", bundle: ..., traitCollection: ...)`
    static func ic_select_item_icon_(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_select_item_icon_, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_select_list_icon", bundle: ..., traitCollection: ...)`
    static func ic_select_list_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_select_list_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_selected", bundle: ..., traitCollection: ...)`
    static func ic_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_selected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_send_icon", bundle: ..., traitCollection: ...)`
    static func ic_send_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_send_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_sent_to_done_icon", bundle: ..., traitCollection: ...)`
    static func ic_sent_to_done_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_sent_to_done_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_share_icon", bundle: ..., traitCollection: ...)`
    static func ic_share_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_share_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_show_password", bundle: ..., traitCollection: ...)`
    static func ic_show_password(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_show_password, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_single_purchase_icon", bundle: ..., traitCollection: ...)`
    static func ic_single_purchase_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_single_purchase_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_slider_image", bundle: ..., traitCollection: ...)`
    static func ic_slider_image(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_slider_image, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_sometong_went_wrong_image", bundle: ..., traitCollection: ...)`
    static func ic_sometong_went_wrong_image(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_sometong_went_wrong_image, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_tabbar_home", bundle: ..., traitCollection: ...)`
    static func ic_tabbar_home(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tabbar_home, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_tabbar_offer", bundle: ..., traitCollection: ...)`
    static func ic_tabbar_offer(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tabbar_offer, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_tabbar_online", bundle: ..., traitCollection: ...)`
    static func ic_tabbar_online(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tabbar_online, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_tabbar_profile", bundle: ..., traitCollection: ...)`
    static func ic_tabbar_profile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tabbar_profile, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_tabbar_store", bundle: ..., traitCollection: ...)`
    static func ic_tabbar_store(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tabbar_store, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_ticket_icon", bundle: ..., traitCollection: ...)`
    static func ic_ticket_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_ticket_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_time_icon", bundle: ..., traitCollection: ...)`
    static func ic_time_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_time_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_toy", bundle: ..., traitCollection: ...)`
    static func ic_toy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_toy, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_uncheck_circle", bundle: ..., traitCollection: ...)`
    static func ic_uncheck_circle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_uncheck_circle, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_unclicked", bundle: ..., traitCollection: ...)`
    static func ic_unclicked(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_unclicked, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_unliked", bundle: ..., traitCollection: ...)`
    static func ic_unliked(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_unliked, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_unselect_cart_icon", bundle: ..., traitCollection: ...)`
    static func ic_unselect_cart_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_unselect_cart_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_unselect_cart_list_icon", bundle: ..., traitCollection: ...)`
    static func ic_unselect_cart_list_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_unselect_cart_list_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_unselect_check_box", bundle: ..., traitCollection: ...)`
    static func ic_unselect_check_box(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_unselect_check_box, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_unselect_favorite_icon", bundle: ..., traitCollection: ...)`
    static func ic_unselect_favorite_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_unselect_favorite_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_unselect_grid_icon", bundle: ..., traitCollection: ...)`
    static func ic_unselect_grid_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_unselect_grid_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_unselect_item_icon", bundle: ..., traitCollection: ...)`
    static func ic_unselect_item_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_unselect_item_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_unselect_item_icon_", bundle: ..., traitCollection: ...)`
    static func ic_unselect_item_icon_(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_unselect_item_icon_, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_unselect_list_icon", bundle: ..., traitCollection: ...)`
    static func ic_unselect_list_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_unselect_list_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_unselected", bundle: ..., traitCollection: ...)`
    static func ic_unselected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_unselected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_valid_email_icon", bundle: ..., traitCollection: ...)`
    static func ic_valid_email_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_valid_email_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_verifying", bundle: ..., traitCollection: ...)`
    static func ic_verifying(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_verifying, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_vinnit", bundle: ..., traitCollection: ...)`
    static func ic_vinnit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_vinnit, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_visa_card_icon", bundle: ..., traitCollection: ...)`
    static func ic_visa_card_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_visa_card_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_visa_image", bundle: ..., traitCollection: ...)`
    static func ic_visa_image(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_visa_image, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_white_cart_list_icon", bundle: ..., traitCollection: ...)`
    static func ic_white_cart_list_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_white_cart_list_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_white_points_circle", bundle: ..., traitCollection: ...)`
    static func ic_white_points_circle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_white_points_circle, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "image_icon", bundle: ..., traitCollection: ...)`
    static func image_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.image_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "location_icon", bundle: ..., traitCollection: ...)`
    static func location_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.location_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "newspaper_1", bundle: ..., traitCollection: ...)`
    static func newspaper_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.newspaper_1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "newspaper_2", bundle: ..., traitCollection: ...)`
    static func newspaper_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.newspaper_2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "newspaper_3", bundle: ..., traitCollection: ...)`
    static func newspaper_3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.newspaper_3, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "newspaper_4", bundle: ..., traitCollection: ...)`
    static func newspaper_4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.newspaper_4, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "onboard_coin", bundle: ..., traitCollection: ...)`
    static func onboard_coin(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onboard_coin, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "onboard_loyality", bundle: ..., traitCollection: ...)`
    static func onboard_loyality(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onboard_loyality, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "onboard_one", bundle: ..., traitCollection: ...)`
    static func onboard_one(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onboard_one, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "onboard_three", bundle: ..., traitCollection: ...)`
    static func onboard_three(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onboard_three, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "onboard_two", bundle: ..., traitCollection: ...)`
    static func onboard_two(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onboard_two, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "onboard_wallet", bundle: ..., traitCollection: ...)`
    static func onboard_wallet(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onboard_wallet, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "verfication_progress", bundle: ..., traitCollection: ...)`
    static func verfication_progress(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.verfication_progress, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "verification_success", bundle: ..., traitCollection: ...)`
    static func verification_success(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.verification_success, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "watch_product", bundle: ..., traitCollection: ...)`
    static func watch_product(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.watch_product, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 68 nibs.
  struct nib {
    /// Nib `AddressCell`.
    static let addressCell = _R.nib._AddressCell()
    /// Nib `AttacmentCell`.
    static let attacmentCell = _R.nib._AttacmentCell()
    /// Nib `BreakfastCell`.
    static let breakfastCell = _R.nib._BreakfastCell()
    /// Nib `BuyOnlineHeaderView`.
    static let buyOnlineHeaderView = _R.nib._BuyOnlineHeaderView()
    /// Nib `CampaignSubCell`.
    static let campaignSubCell = _R.nib._CampaignSubCell()
    /// Nib `CampaignsCell`.
    static let campaignsCell = _R.nib._CampaignsCell()
    /// Nib `CampaignsHeaderView`.
    static let campaignsHeaderView = _R.nib._CampaignsHeaderView()
    /// Nib `CategoriesCell`.
    static let categoriesCell = _R.nib._CategoriesCell()
    /// Nib `CategoryCell`.
    static let categoryCell = _R.nib._CategoryCell()
    /// Nib `CheckoutAddressCell`.
    static let checkoutAddressCell = _R.nib._CheckoutAddressCell()
    /// Nib `CheckoutAmountCell`.
    static let checkoutAmountCell = _R.nib._CheckoutAmountCell()
    /// Nib `CheckoutPointsCell`.
    static let checkoutPointsCell = _R.nib._CheckoutPointsCell()
    /// Nib `ConceptsCell`.
    static let conceptsCell = _R.nib._ConceptsCell()
    /// Nib `CountryCell`.
    static let countryCell = _R.nib._CountryCell()
    /// Nib `CurrentCampaignsCell`.
    static let currentCampaignsCell = _R.nib._CurrentCampaignsCell()
    /// Nib `CurrentOfferCell`.
    static let currentOfferCell = _R.nib._CurrentOfferCell()
    /// Nib `EventDetailCell`.
    static let eventDetailCell = _R.nib._EventDetailCell()
    /// Nib `EventDetailHeaderCell`.
    static let eventDetailHeaderCell = _R.nib._EventDetailHeaderCell()
    /// Nib `EventDetailSubCell`.
    static let eventDetailSubCell = _R.nib._EventDetailSubCell()
    /// Nib `EventDetailTimeCell`.
    static let eventDetailTimeCell = _R.nib._EventDetailTimeCell()
    /// Nib `EventsCell`.
    static let eventsCell = _R.nib._EventsCell()
    /// Nib `FaqCell`.
    static let faqCell = _R.nib._FaqCell()
    /// Nib `FaqDetailCell`.
    static let faqDetailCell = _R.nib._FaqDetailCell()
    /// Nib `FavoritesGridCell`.
    static let favoritesGridCell = _R.nib._FavoritesGridCell()
    /// Nib `FavoritesHeaderView`.
    static let favoritesHeaderView = _R.nib._FavoritesHeaderView()
    /// Nib `FavoritesListCell`.
    static let favoritesListCell = _R.nib._FavoritesListCell()
    /// Nib `FindStoreCell`.
    static let findStoreCell = _R.nib._FindStoreCell()
    /// Nib `GenderCell`.
    static let genderCell = _R.nib._GenderCell()
    /// Nib `HomeOfferCollectionCell`.
    static let homeOfferCollectionCell = _R.nib._HomeOfferCollectionCell()
    /// Nib `InboxReplyCell`.
    static let inboxReplyCell = _R.nib._InboxReplyCell()
    /// Nib `LocalOfferCell`.
    static let localOfferCell = _R.nib._LocalOfferCell()
    /// Nib `MembershipHeaderView`.
    static let membershipHeaderView = _R.nib._MembershipHeaderView()
    /// Nib `MembershipOfferCell`.
    static let membershipOfferCell = _R.nib._MembershipOfferCell()
    /// Nib `MyCartCell`.
    static let myCartCell = _R.nib._MyCartCell()
    /// Nib `MyPointsCell`.
    static let myPointsCell = _R.nib._MyPointsCell()
    /// Nib `MyPointsHeaderView`.
    static let myPointsHeaderView = _R.nib._MyPointsHeaderView()
    /// Nib `MyPurchaseCell`.
    static let myPurchaseCell = _R.nib._MyPurchaseCell()
    /// Nib `MyShoppingCell`.
    static let myShoppingCell = _R.nib._MyShoppingCell()
    /// Nib `NewsCell`.
    static let newsCell = _R.nib._NewsCell()
    /// Nib `NewsPaperDetailTopCell`.
    static let newsPaperDetailTopCell = _R.nib._NewsPaperDetailTopCell()
    /// Nib `OfferActivitiesCell`.
    static let offerActivitiesCell = _R.nib._OfferActivitiesCell()
    /// Nib `OfferActivitiesSubCell`.
    static let offerActivitiesSubCell = _R.nib._OfferActivitiesSubCell()
    /// Nib `OfferBannerCell`.
    static let offerBannerCell = _R.nib._OfferBannerCell()
    /// Nib `OfferConceptCell`.
    static let offerConceptCell = _R.nib._OfferConceptCell()
    /// Nib `OfferItemsPagerCell`.
    static let offerItemsPagerCell = _R.nib._OfferItemsPagerCell()
    /// Nib `OfferNewspaperCell`.
    static let offerNewspaperCell = _R.nib._OfferNewspaperCell()
    /// Nib `OfferNewspaperSubCell`.
    static let offerNewspaperSubCell = _R.nib._OfferNewspaperSubCell()
    /// Nib `OfferSinglePurchaseCell`.
    static let offerSinglePurchaseCell = _R.nib._OfferSinglePurchaseCell()
    /// Nib `OfferTabsTopCell`.
    static let offerTabsTopCell = _R.nib._OfferTabsTopCell()
    /// Nib `OffersAvailableStoreCell`.
    static let offersAvailableStoreCell = _R.nib._OffersAvailableStoreCell()
    /// Nib `OffersEarnPointsCell`.
    static let offersEarnPointsCell = _R.nib._OffersEarnPointsCell()
    /// Nib `OffersInfoCell`.
    static let offersInfoCell = _R.nib._OffersInfoCell()
    /// Nib `OnlineItemPurchaseCell`.
    static let onlineItemPurchaseCell = _R.nib._OnlineItemPurchaseCell()
    /// Nib `PaymentCardCell`.
    static let paymentCardCell = _R.nib._PaymentCardCell()
    /// Nib `PaymentMethodCell`.
    static let paymentMethodCell = _R.nib._PaymentMethodCell()
    /// Nib `PersonalOfferCell`.
    static let personalOfferCell = _R.nib._PersonalOfferCell()
    /// Nib `PersonalOfferListCell`.
    static let personalOfferListCell = _R.nib._PersonalOfferListCell()
    /// Nib `PointsCell`.
    static let pointsCell = _R.nib._PointsCell()
    /// Nib `PreferencesDataCell`.
    static let preferencesDataCell = _R.nib._PreferencesDataCell()
    /// Nib `ProductStoreTimingCell`.
    static let productStoreTimingCell = _R.nib._ProductStoreTimingCell()
    /// Nib `ProfileCell`.
    static let profileCell = _R.nib._ProfileCell()
    /// Nib `PurchaseSubCell`.
    static let purchaseSubCell = _R.nib._PurchaseSubCell()
    /// Nib `RecipeItemCell`.
    static let recipeItemCell = _R.nib._RecipeItemCell()
    /// Nib `RecipesCell`.
    static let recipesCell = _R.nib._RecipesCell()
    /// Nib `RecipesSubCell`.
    static let recipesSubCell = _R.nib._RecipesSubCell()
    /// Nib `TicketDetailHeaderCell`.
    static let ticketDetailHeaderCell = _R.nib._TicketDetailHeaderCell()
    /// Nib `TicketReasonCell`.
    static let ticketReasonCell = _R.nib._TicketReasonCell()
    /// Nib `TicketsCell`.
    static let ticketsCell = _R.nib._TicketsCell()
    
    /// `UINib(name: "AddressCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.addressCell) instead")
    static func addressCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.addressCell)
    }
    
    /// `UINib(name: "AttacmentCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.attacmentCell) instead")
    static func attacmentCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.attacmentCell)
    }
    
    /// `UINib(name: "BreakfastCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.breakfastCell) instead")
    static func breakfastCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.breakfastCell)
    }
    
    /// `UINib(name: "BuyOnlineHeaderView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.buyOnlineHeaderView) instead")
    static func buyOnlineHeaderView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.buyOnlineHeaderView)
    }
    
    /// `UINib(name: "CampaignSubCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.campaignSubCell) instead")
    static func campaignSubCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.campaignSubCell)
    }
    
    /// `UINib(name: "CampaignsCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.campaignsCell) instead")
    static func campaignsCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.campaignsCell)
    }
    
    /// `UINib(name: "CampaignsHeaderView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.campaignsHeaderView) instead")
    static func campaignsHeaderView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.campaignsHeaderView)
    }
    
    /// `UINib(name: "CategoriesCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.categoriesCell) instead")
    static func categoriesCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.categoriesCell)
    }
    
    /// `UINib(name: "CategoryCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.categoryCell) instead")
    static func categoryCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.categoryCell)
    }
    
    /// `UINib(name: "CheckoutAddressCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.checkoutAddressCell) instead")
    static func checkoutAddressCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.checkoutAddressCell)
    }
    
    /// `UINib(name: "CheckoutAmountCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.checkoutAmountCell) instead")
    static func checkoutAmountCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.checkoutAmountCell)
    }
    
    /// `UINib(name: "CheckoutPointsCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.checkoutPointsCell) instead")
    static func checkoutPointsCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.checkoutPointsCell)
    }
    
    /// `UINib(name: "ConceptsCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.conceptsCell) instead")
    static func conceptsCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.conceptsCell)
    }
    
    /// `UINib(name: "CountryCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.countryCell) instead")
    static func countryCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.countryCell)
    }
    
    /// `UINib(name: "CurrentCampaignsCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.currentCampaignsCell) instead")
    static func currentCampaignsCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.currentCampaignsCell)
    }
    
    /// `UINib(name: "CurrentOfferCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.currentOfferCell) instead")
    static func currentOfferCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.currentOfferCell)
    }
    
    /// `UINib(name: "EventDetailCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.eventDetailCell) instead")
    static func eventDetailCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.eventDetailCell)
    }
    
    /// `UINib(name: "EventDetailHeaderCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.eventDetailHeaderCell) instead")
    static func eventDetailHeaderCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.eventDetailHeaderCell)
    }
    
    /// `UINib(name: "EventDetailSubCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.eventDetailSubCell) instead")
    static func eventDetailSubCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.eventDetailSubCell)
    }
    
    /// `UINib(name: "EventDetailTimeCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.eventDetailTimeCell) instead")
    static func eventDetailTimeCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.eventDetailTimeCell)
    }
    
    /// `UINib(name: "EventsCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.eventsCell) instead")
    static func eventsCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.eventsCell)
    }
    
    /// `UINib(name: "FaqCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.faqCell) instead")
    static func faqCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.faqCell)
    }
    
    /// `UINib(name: "FaqDetailCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.faqDetailCell) instead")
    static func faqDetailCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.faqDetailCell)
    }
    
    /// `UINib(name: "FavoritesGridCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.favoritesGridCell) instead")
    static func favoritesGridCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.favoritesGridCell)
    }
    
    /// `UINib(name: "FavoritesHeaderView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.favoritesHeaderView) instead")
    static func favoritesHeaderView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.favoritesHeaderView)
    }
    
    /// `UINib(name: "FavoritesListCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.favoritesListCell) instead")
    static func favoritesListCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.favoritesListCell)
    }
    
    /// `UINib(name: "FindStoreCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.findStoreCell) instead")
    static func findStoreCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.findStoreCell)
    }
    
    /// `UINib(name: "GenderCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.genderCell) instead")
    static func genderCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.genderCell)
    }
    
    /// `UINib(name: "HomeOfferCollectionCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.homeOfferCollectionCell) instead")
    static func homeOfferCollectionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homeOfferCollectionCell)
    }
    
    /// `UINib(name: "InboxReplyCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.inboxReplyCell) instead")
    static func inboxReplyCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.inboxReplyCell)
    }
    
    /// `UINib(name: "LocalOfferCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.localOfferCell) instead")
    static func localOfferCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.localOfferCell)
    }
    
    /// `UINib(name: "MembershipHeaderView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.membershipHeaderView) instead")
    static func membershipHeaderView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.membershipHeaderView)
    }
    
    /// `UINib(name: "MembershipOfferCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.membershipOfferCell) instead")
    static func membershipOfferCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.membershipOfferCell)
    }
    
    /// `UINib(name: "MyCartCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.myCartCell) instead")
    static func myCartCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.myCartCell)
    }
    
    /// `UINib(name: "MyPointsCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.myPointsCell) instead")
    static func myPointsCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.myPointsCell)
    }
    
    /// `UINib(name: "MyPointsHeaderView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.myPointsHeaderView) instead")
    static func myPointsHeaderView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.myPointsHeaderView)
    }
    
    /// `UINib(name: "MyPurchaseCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.myPurchaseCell) instead")
    static func myPurchaseCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.myPurchaseCell)
    }
    
    /// `UINib(name: "MyShoppingCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.myShoppingCell) instead")
    static func myShoppingCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.myShoppingCell)
    }
    
    /// `UINib(name: "NewsCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.newsCell) instead")
    static func newsCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.newsCell)
    }
    
    /// `UINib(name: "NewsPaperDetailTopCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.newsPaperDetailTopCell) instead")
    static func newsPaperDetailTopCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.newsPaperDetailTopCell)
    }
    
    /// `UINib(name: "OfferActivitiesCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.offerActivitiesCell) instead")
    static func offerActivitiesCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.offerActivitiesCell)
    }
    
    /// `UINib(name: "OfferActivitiesSubCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.offerActivitiesSubCell) instead")
    static func offerActivitiesSubCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.offerActivitiesSubCell)
    }
    
    /// `UINib(name: "OfferBannerCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.offerBannerCell) instead")
    static func offerBannerCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.offerBannerCell)
    }
    
    /// `UINib(name: "OfferConceptCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.offerConceptCell) instead")
    static func offerConceptCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.offerConceptCell)
    }
    
    /// `UINib(name: "OfferItemsPagerCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.offerItemsPagerCell) instead")
    static func offerItemsPagerCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.offerItemsPagerCell)
    }
    
    /// `UINib(name: "OfferNewspaperCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.offerNewspaperCell) instead")
    static func offerNewspaperCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.offerNewspaperCell)
    }
    
    /// `UINib(name: "OfferNewspaperSubCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.offerNewspaperSubCell) instead")
    static func offerNewspaperSubCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.offerNewspaperSubCell)
    }
    
    /// `UINib(name: "OfferSinglePurchaseCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.offerSinglePurchaseCell) instead")
    static func offerSinglePurchaseCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.offerSinglePurchaseCell)
    }
    
    /// `UINib(name: "OfferTabsTopCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.offerTabsTopCell) instead")
    static func offerTabsTopCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.offerTabsTopCell)
    }
    
    /// `UINib(name: "OffersAvailableStoreCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.offersAvailableStoreCell) instead")
    static func offersAvailableStoreCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.offersAvailableStoreCell)
    }
    
    /// `UINib(name: "OffersEarnPointsCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.offersEarnPointsCell) instead")
    static func offersEarnPointsCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.offersEarnPointsCell)
    }
    
    /// `UINib(name: "OffersInfoCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.offersInfoCell) instead")
    static func offersInfoCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.offersInfoCell)
    }
    
    /// `UINib(name: "OnlineItemPurchaseCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.onlineItemPurchaseCell) instead")
    static func onlineItemPurchaseCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.onlineItemPurchaseCell)
    }
    
    /// `UINib(name: "PaymentCardCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.paymentCardCell) instead")
    static func paymentCardCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.paymentCardCell)
    }
    
    /// `UINib(name: "PaymentMethodCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.paymentMethodCell) instead")
    static func paymentMethodCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.paymentMethodCell)
    }
    
    /// `UINib(name: "PersonalOfferCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.personalOfferCell) instead")
    static func personalOfferCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.personalOfferCell)
    }
    
    /// `UINib(name: "PersonalOfferListCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.personalOfferListCell) instead")
    static func personalOfferListCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.personalOfferListCell)
    }
    
    /// `UINib(name: "PointsCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.pointsCell) instead")
    static func pointsCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.pointsCell)
    }
    
    /// `UINib(name: "PreferencesDataCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.preferencesDataCell) instead")
    static func preferencesDataCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.preferencesDataCell)
    }
    
    /// `UINib(name: "ProductStoreTimingCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.productStoreTimingCell) instead")
    static func productStoreTimingCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.productStoreTimingCell)
    }
    
    /// `UINib(name: "ProfileCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.profileCell) instead")
    static func profileCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.profileCell)
    }
    
    /// `UINib(name: "PurchaseSubCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.purchaseSubCell) instead")
    static func purchaseSubCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.purchaseSubCell)
    }
    
    /// `UINib(name: "RecipeItemCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.recipeItemCell) instead")
    static func recipeItemCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.recipeItemCell)
    }
    
    /// `UINib(name: "RecipesCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.recipesCell) instead")
    static func recipesCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.recipesCell)
    }
    
    /// `UINib(name: "RecipesSubCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.recipesSubCell) instead")
    static func recipesSubCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.recipesSubCell)
    }
    
    /// `UINib(name: "TicketDetailHeaderCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ticketDetailHeaderCell) instead")
    static func ticketDetailHeaderCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ticketDetailHeaderCell)
    }
    
    /// `UINib(name: "TicketReasonCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ticketReasonCell) instead")
    static func ticketReasonCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ticketReasonCell)
    }
    
    /// `UINib(name: "TicketsCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ticketsCell) instead")
    static func ticketsCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ticketsCell)
    }
    
    static func addressCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AddressCell? {
      return R.nib.addressCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AddressCell
    }
    
    static func attacmentCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AttacmentCell? {
      return R.nib.attacmentCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AttacmentCell
    }
    
    static func breakfastCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BreakfastCell? {
      return R.nib.breakfastCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BreakfastCell
    }
    
    static func buyOnlineHeaderView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BuyOnlineHeaderView? {
      return R.nib.buyOnlineHeaderView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BuyOnlineHeaderView
    }
    
    static func campaignSubCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CampaignSubCell? {
      return R.nib.campaignSubCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CampaignSubCell
    }
    
    static func campaignsCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CampaignsCell? {
      return R.nib.campaignsCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CampaignsCell
    }
    
    static func campaignsHeaderView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CampaignsHeaderView? {
      return R.nib.campaignsHeaderView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CampaignsHeaderView
    }
    
    static func categoriesCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CategoriesCell? {
      return R.nib.categoriesCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CategoriesCell
    }
    
    static func categoryCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CategoryCell? {
      return R.nib.categoryCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CategoryCell
    }
    
    static func checkoutAddressCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CheckoutAddressCell? {
      return R.nib.checkoutAddressCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CheckoutAddressCell
    }
    
    static func checkoutAmountCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CheckoutAmountCell? {
      return R.nib.checkoutAmountCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CheckoutAmountCell
    }
    
    static func checkoutPointsCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CheckoutPointsCell? {
      return R.nib.checkoutPointsCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CheckoutPointsCell
    }
    
    static func conceptsCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ConceptsCell? {
      return R.nib.conceptsCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ConceptsCell
    }
    
    static func countryCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CountryCell? {
      return R.nib.countryCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CountryCell
    }
    
    static func currentCampaignsCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CurrentCampaignsCell? {
      return R.nib.currentCampaignsCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CurrentCampaignsCell
    }
    
    static func currentOfferCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CurrentOfferCell? {
      return R.nib.currentOfferCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CurrentOfferCell
    }
    
    static func eventDetailCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EventDetailCell? {
      return R.nib.eventDetailCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EventDetailCell
    }
    
    static func eventDetailHeaderCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EventDetailHeaderCell? {
      return R.nib.eventDetailHeaderCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EventDetailHeaderCell
    }
    
    static func eventDetailSubCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EventDetailSubCell? {
      return R.nib.eventDetailSubCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EventDetailSubCell
    }
    
    static func eventDetailTimeCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EventDetailTimeCell? {
      return R.nib.eventDetailTimeCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EventDetailTimeCell
    }
    
    static func eventsCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EventsCell? {
      return R.nib.eventsCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EventsCell
    }
    
    static func faqCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FaqCell? {
      return R.nib.faqCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FaqCell
    }
    
    static func faqDetailCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FaqDetailCell? {
      return R.nib.faqDetailCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FaqDetailCell
    }
    
    static func favoritesGridCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FavoritesGridCell? {
      return R.nib.favoritesGridCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FavoritesGridCell
    }
    
    static func favoritesHeaderView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FavoritesHeaderView? {
      return R.nib.favoritesHeaderView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FavoritesHeaderView
    }
    
    static func favoritesListCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FavoritesListCell? {
      return R.nib.favoritesListCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FavoritesListCell
    }
    
    static func findStoreCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FindStoreCell? {
      return R.nib.findStoreCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FindStoreCell
    }
    
    static func genderCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> GenderCell? {
      return R.nib.genderCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GenderCell
    }
    
    static func homeOfferCollectionCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeOfferCollectionCell? {
      return R.nib.homeOfferCollectionCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeOfferCollectionCell
    }
    
    static func inboxReplyCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> InboxReplyCell? {
      return R.nib.inboxReplyCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? InboxReplyCell
    }
    
    static func localOfferCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> LocalOfferCell? {
      return R.nib.localOfferCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LocalOfferCell
    }
    
    static func membershipHeaderView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MembershipHeaderView? {
      return R.nib.membershipHeaderView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MembershipHeaderView
    }
    
    static func membershipOfferCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MembershipOfferCell? {
      return R.nib.membershipOfferCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MembershipOfferCell
    }
    
    static func myCartCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MyCartCell? {
      return R.nib.myCartCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MyCartCell
    }
    
    static func myPointsCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MyPointsCell? {
      return R.nib.myPointsCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MyPointsCell
    }
    
    static func myPointsHeaderView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MyPointsHeaderView? {
      return R.nib.myPointsHeaderView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MyPointsHeaderView
    }
    
    static func myPurchaseCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MyPurchaseCell? {
      return R.nib.myPurchaseCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MyPurchaseCell
    }
    
    static func myShoppingCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MyShoppingCell? {
      return R.nib.myShoppingCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MyShoppingCell
    }
    
    static func newsCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NewsCell? {
      return R.nib.newsCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NewsCell
    }
    
    static func newsPaperDetailTopCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NewsPaperDetailTopCell? {
      return R.nib.newsPaperDetailTopCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NewsPaperDetailTopCell
    }
    
    static func offerActivitiesCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> OfferActivitiesCell? {
      return R.nib.offerActivitiesCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OfferActivitiesCell
    }
    
    static func offerActivitiesSubCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> OfferActivitiesSubCell? {
      return R.nib.offerActivitiesSubCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OfferActivitiesSubCell
    }
    
    static func offerBannerCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> OfferBannerCell? {
      return R.nib.offerBannerCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OfferBannerCell
    }
    
    static func offerConceptCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> OfferConceptCell? {
      return R.nib.offerConceptCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OfferConceptCell
    }
    
    static func offerItemsPagerCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> OfferItemsPagerCell? {
      return R.nib.offerItemsPagerCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OfferItemsPagerCell
    }
    
    static func offerNewspaperCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> OfferNewspaperCell? {
      return R.nib.offerNewspaperCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OfferNewspaperCell
    }
    
    static func offerNewspaperSubCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> OfferNewspaperSubCell? {
      return R.nib.offerNewspaperSubCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OfferNewspaperSubCell
    }
    
    static func offerSinglePurchaseCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> OfferSinglePurchaseCell? {
      return R.nib.offerSinglePurchaseCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OfferSinglePurchaseCell
    }
    
    static func offerTabsTopCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> OfferTabsTopCell? {
      return R.nib.offerTabsTopCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OfferTabsTopCell
    }
    
    static func offersAvailableStoreCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> OffersAvailableStoreCell? {
      return R.nib.offersAvailableStoreCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OffersAvailableStoreCell
    }
    
    static func offersEarnPointsCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> OffersEarnPointsCell? {
      return R.nib.offersEarnPointsCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OffersEarnPointsCell
    }
    
    static func offersInfoCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> OffersInfoCell? {
      return R.nib.offersInfoCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OffersInfoCell
    }
    
    static func onlineItemPurchaseCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> OnlineItemPurchaseCell? {
      return R.nib.onlineItemPurchaseCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OnlineItemPurchaseCell
    }
    
    static func paymentCardCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PaymentCardCell? {
      return R.nib.paymentCardCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PaymentCardCell
    }
    
    static func paymentMethodCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PaymentMethodCell? {
      return R.nib.paymentMethodCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PaymentMethodCell
    }
    
    static func personalOfferCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PersonalOfferCell? {
      return R.nib.personalOfferCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PersonalOfferCell
    }
    
    static func personalOfferListCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PersonalOfferListCell? {
      return R.nib.personalOfferListCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PersonalOfferListCell
    }
    
    static func pointsCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PointsCell? {
      return R.nib.pointsCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PointsCell
    }
    
    static func preferencesDataCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PreferencesDataCell? {
      return R.nib.preferencesDataCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PreferencesDataCell
    }
    
    static func productStoreTimingCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProductStoreTimingCell? {
      return R.nib.productStoreTimingCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProductStoreTimingCell
    }
    
    static func profileCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProfileCell? {
      return R.nib.profileCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProfileCell
    }
    
    static func purchaseSubCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PurchaseSubCell? {
      return R.nib.purchaseSubCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PurchaseSubCell
    }
    
    static func recipeItemCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> RecipeItemCell? {
      return R.nib.recipeItemCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RecipeItemCell
    }
    
    static func recipesCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> RecipesCell? {
      return R.nib.recipesCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RecipesCell
    }
    
    static func recipesSubCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> RecipesSubCell? {
      return R.nib.recipesSubCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RecipesSubCell
    }
    
    static func ticketDetailHeaderCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TicketDetailHeaderCell? {
      return R.nib.ticketDetailHeaderCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TicketDetailHeaderCell
    }
    
    static func ticketReasonCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TicketReasonCell? {
      return R.nib.ticketReasonCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TicketReasonCell
    }
    
    static func ticketsCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TicketsCell? {
      return R.nib.ticketsCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TicketsCell
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 67 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `AddressCell`.
    static let addressCell: Rswift.ReuseIdentifier<AddressCell> = Rswift.ReuseIdentifier(identifier: "AddressCell")
    /// Reuse identifier `AttacmentCell`.
    static let attacmentCell: Rswift.ReuseIdentifier<AttacmentCell> = Rswift.ReuseIdentifier(identifier: "AttacmentCell")
    /// Reuse identifier `BreakfastCell`.
    static let breakfastCell: Rswift.ReuseIdentifier<BreakfastCell> = Rswift.ReuseIdentifier(identifier: "BreakfastCell")
    /// Reuse identifier `BuyOnlineHeaderView`.
    static let buyOnlineHeaderView: Rswift.ReuseIdentifier<BuyOnlineHeaderView> = Rswift.ReuseIdentifier(identifier: "BuyOnlineHeaderView")
    /// Reuse identifier `CampaignSubCell`.
    static let campaignSubCell: Rswift.ReuseIdentifier<CampaignSubCell> = Rswift.ReuseIdentifier(identifier: "CampaignSubCell")
    /// Reuse identifier `CampaignsCell`.
    static let campaignsCell: Rswift.ReuseIdentifier<CampaignsCell> = Rswift.ReuseIdentifier(identifier: "CampaignsCell")
    /// Reuse identifier `CampaignsHeaderView`.
    static let campaignsHeaderView: Rswift.ReuseIdentifier<CampaignsHeaderView> = Rswift.ReuseIdentifier(identifier: "CampaignsHeaderView")
    /// Reuse identifier `CategoriesCell`.
    static let categoriesCell: Rswift.ReuseIdentifier<CategoriesCell> = Rswift.ReuseIdentifier(identifier: "CategoriesCell")
    /// Reuse identifier `CategoryCell`.
    static let categoryCell: Rswift.ReuseIdentifier<CategoryCell> = Rswift.ReuseIdentifier(identifier: "CategoryCell")
    /// Reuse identifier `CheckoutAddressCell`.
    static let checkoutAddressCell: Rswift.ReuseIdentifier<CheckoutAddressCell> = Rswift.ReuseIdentifier(identifier: "CheckoutAddressCell")
    /// Reuse identifier `CheckoutAmountCell`.
    static let checkoutAmountCell: Rswift.ReuseIdentifier<CheckoutAmountCell> = Rswift.ReuseIdentifier(identifier: "CheckoutAmountCell")
    /// Reuse identifier `CheckoutPointsCell`.
    static let checkoutPointsCell: Rswift.ReuseIdentifier<CheckoutPointsCell> = Rswift.ReuseIdentifier(identifier: "CheckoutPointsCell")
    /// Reuse identifier `ConceptsCell`.
    static let conceptsCell: Rswift.ReuseIdentifier<ConceptsCell> = Rswift.ReuseIdentifier(identifier: "ConceptsCell")
    /// Reuse identifier `CountryCell`.
    static let countryCell: Rswift.ReuseIdentifier<CountryCell> = Rswift.ReuseIdentifier(identifier: "CountryCell")
    /// Reuse identifier `CurrentCampaignsCell`.
    static let currentCampaignsCell: Rswift.ReuseIdentifier<CurrentCampaignsCell> = Rswift.ReuseIdentifier(identifier: "CurrentCampaignsCell")
    /// Reuse identifier `CurrentOfferCell`.
    static let currentOfferCell: Rswift.ReuseIdentifier<CurrentOfferCell> = Rswift.ReuseIdentifier(identifier: "CurrentOfferCell")
    /// Reuse identifier `EventDetailCell`.
    static let eventDetailCell: Rswift.ReuseIdentifier<EventDetailCell> = Rswift.ReuseIdentifier(identifier: "EventDetailCell")
    /// Reuse identifier `EventDetailHeaderCell`.
    static let eventDetailHeaderCell: Rswift.ReuseIdentifier<EventDetailHeaderCell> = Rswift.ReuseIdentifier(identifier: "EventDetailHeaderCell")
    /// Reuse identifier `EventDetailSubCell`.
    static let eventDetailSubCell: Rswift.ReuseIdentifier<EventDetailSubCell> = Rswift.ReuseIdentifier(identifier: "EventDetailSubCell")
    /// Reuse identifier `EventDetailTimeCell`.
    static let eventDetailTimeCell: Rswift.ReuseIdentifier<EventDetailTimeCell> = Rswift.ReuseIdentifier(identifier: "EventDetailTimeCell")
    /// Reuse identifier `EventsCell`.
    static let eventsCell: Rswift.ReuseIdentifier<EventsCell> = Rswift.ReuseIdentifier(identifier: "EventsCell")
    /// Reuse identifier `FaqCell`.
    static let faqCell: Rswift.ReuseIdentifier<FaqCell> = Rswift.ReuseIdentifier(identifier: "FaqCell")
    /// Reuse identifier `FaqDetailCell`.
    static let faqDetailCell: Rswift.ReuseIdentifier<FaqDetailCell> = Rswift.ReuseIdentifier(identifier: "FaqDetailCell")
    /// Reuse identifier `FavoritesGridCell`.
    static let favoritesGridCell: Rswift.ReuseIdentifier<FavoritesGridCell> = Rswift.ReuseIdentifier(identifier: "FavoritesGridCell")
    /// Reuse identifier `FavoritesHeaderView`.
    static let favoritesHeaderView: Rswift.ReuseIdentifier<FavoritesHeaderView> = Rswift.ReuseIdentifier(identifier: "FavoritesHeaderView")
    /// Reuse identifier `FavoritesListCell`.
    static let favoritesListCell: Rswift.ReuseIdentifier<FavoritesListCell> = Rswift.ReuseIdentifier(identifier: "FavoritesListCell")
    /// Reuse identifier `FindStoreCell`.
    static let findStoreCell: Rswift.ReuseIdentifier<FindStoreCell> = Rswift.ReuseIdentifier(identifier: "FindStoreCell")
    /// Reuse identifier `GenderCell`.
    static let genderCell: Rswift.ReuseIdentifier<GenderCell> = Rswift.ReuseIdentifier(identifier: "GenderCell")
    /// Reuse identifier `HomeOfferCollectionCell`.
    static let homeOfferCollectionCell: Rswift.ReuseIdentifier<HomeOfferCollectionCell> = Rswift.ReuseIdentifier(identifier: "HomeOfferCollectionCell")
    /// Reuse identifier `InboxReplyCell`.
    static let inboxReplyCell: Rswift.ReuseIdentifier<InboxReplyCell> = Rswift.ReuseIdentifier(identifier: "InboxReplyCell")
    /// Reuse identifier `LocalOfferCell`.
    static let localOfferCell: Rswift.ReuseIdentifier<LocalOfferCell> = Rswift.ReuseIdentifier(identifier: "LocalOfferCell")
    /// Reuse identifier `MembershipHeaderView`.
    static let membershipHeaderView: Rswift.ReuseIdentifier<MembershipHeaderView> = Rswift.ReuseIdentifier(identifier: "MembershipHeaderView")
    /// Reuse identifier `MembershipOfferCell`.
    static let membershipOfferCell: Rswift.ReuseIdentifier<MembershipOfferCell> = Rswift.ReuseIdentifier(identifier: "MembershipOfferCell")
    /// Reuse identifier `MyCartCell`.
    static let myCartCell: Rswift.ReuseIdentifier<MyCartCell> = Rswift.ReuseIdentifier(identifier: "MyCartCell")
    /// Reuse identifier `MyPointsCell`.
    static let myPointsCell: Rswift.ReuseIdentifier<MyPointsCell> = Rswift.ReuseIdentifier(identifier: "MyPointsCell")
    /// Reuse identifier `MyPurchaseCell`.
    static let myPurchaseCell: Rswift.ReuseIdentifier<MyPurchaseCell> = Rswift.ReuseIdentifier(identifier: "MyPurchaseCell")
    /// Reuse identifier `MyShoppingCell`.
    static let myShoppingCell: Rswift.ReuseIdentifier<MyShoppingCell> = Rswift.ReuseIdentifier(identifier: "MyShoppingCell")
    /// Reuse identifier `NewsCell`.
    static let newsCell: Rswift.ReuseIdentifier<NewsCell> = Rswift.ReuseIdentifier(identifier: "NewsCell")
    /// Reuse identifier `NewsPaperDetailTopCell`.
    static let newsPaperDetailTopCell: Rswift.ReuseIdentifier<NewsPaperDetailTopCell> = Rswift.ReuseIdentifier(identifier: "NewsPaperDetailTopCell")
    /// Reuse identifier `OfferActivitiesCell`.
    static let offerActivitiesCell: Rswift.ReuseIdentifier<OfferActivitiesCell> = Rswift.ReuseIdentifier(identifier: "OfferActivitiesCell")
    /// Reuse identifier `OfferActivitiesSubCell`.
    static let offerActivitiesSubCell: Rswift.ReuseIdentifier<OfferActivitiesSubCell> = Rswift.ReuseIdentifier(identifier: "OfferActivitiesSubCell")
    /// Reuse identifier `OfferBannerCell`.
    static let offerBannerCell: Rswift.ReuseIdentifier<OfferBannerCell> = Rswift.ReuseIdentifier(identifier: "OfferBannerCell")
    /// Reuse identifier `OfferConceptCell`.
    static let offerConceptCell: Rswift.ReuseIdentifier<OfferConceptCell> = Rswift.ReuseIdentifier(identifier: "OfferConceptCell")
    /// Reuse identifier `OfferEarnPointsCell`.
    static let offerEarnPointsCell: Rswift.ReuseIdentifier<OffersEarnPointsCell> = Rswift.ReuseIdentifier(identifier: "OfferEarnPointsCell")
    /// Reuse identifier `OfferItemsPagerCell`.
    static let offerItemsPagerCell: Rswift.ReuseIdentifier<OfferItemsPagerCell> = Rswift.ReuseIdentifier(identifier: "OfferItemsPagerCell")
    /// Reuse identifier `OfferNewspaperCell`.
    static let offerNewspaperCell: Rswift.ReuseIdentifier<OfferNewspaperCell> = Rswift.ReuseIdentifier(identifier: "OfferNewspaperCell")
    /// Reuse identifier `OfferNewspaperSubCell`.
    static let offerNewspaperSubCell: Rswift.ReuseIdentifier<OfferNewspaperSubCell> = Rswift.ReuseIdentifier(identifier: "OfferNewspaperSubCell")
    /// Reuse identifier `OfferSinglePurchaseCell`.
    static let offerSinglePurchaseCell: Rswift.ReuseIdentifier<OfferSinglePurchaseCell> = Rswift.ReuseIdentifier(identifier: "OfferSinglePurchaseCell")
    /// Reuse identifier `OfferTabsTopCell`.
    static let offerTabsTopCell: Rswift.ReuseIdentifier<OfferTabsTopCell> = Rswift.ReuseIdentifier(identifier: "OfferTabsTopCell")
    /// Reuse identifier `OffersAvailableStoreCell`.
    static let offersAvailableStoreCell: Rswift.ReuseIdentifier<OffersAvailableStoreCell> = Rswift.ReuseIdentifier(identifier: "OffersAvailableStoreCell")
    /// Reuse identifier `OffersInfoCell`.
    static let offersInfoCell: Rswift.ReuseIdentifier<OffersInfoCell> = Rswift.ReuseIdentifier(identifier: "OffersInfoCell")
    /// Reuse identifier `OnlineItemPurchaseCell`.
    static let onlineItemPurchaseCell: Rswift.ReuseIdentifier<OnlineItemPurchaseCell> = Rswift.ReuseIdentifier(identifier: "OnlineItemPurchaseCell")
    /// Reuse identifier `PaymentCardCell`.
    static let paymentCardCell: Rswift.ReuseIdentifier<PaymentCardCell> = Rswift.ReuseIdentifier(identifier: "PaymentCardCell")
    /// Reuse identifier `PaymentMethodCell`.
    static let paymentMethodCell: Rswift.ReuseIdentifier<PaymentMethodCell> = Rswift.ReuseIdentifier(identifier: "PaymentMethodCell")
    /// Reuse identifier `PersonalOfferCell`.
    static let personalOfferCell: Rswift.ReuseIdentifier<PersonalOfferCell> = Rswift.ReuseIdentifier(identifier: "PersonalOfferCell")
    /// Reuse identifier `PersonalOfferListCell`.
    static let personalOfferListCell: Rswift.ReuseIdentifier<PersonalOfferListCell> = Rswift.ReuseIdentifier(identifier: "PersonalOfferListCell")
    /// Reuse identifier `PointsCell`.
    static let pointsCell: Rswift.ReuseIdentifier<PointsCell> = Rswift.ReuseIdentifier(identifier: "PointsCell")
    /// Reuse identifier `PreferencesDataCell`.
    static let preferencesDataCell: Rswift.ReuseIdentifier<PreferencesDataCell> = Rswift.ReuseIdentifier(identifier: "PreferencesDataCell")
    /// Reuse identifier `ProductStoreTimingCell`.
    static let productStoreTimingCell: Rswift.ReuseIdentifier<ProductStoreTimingCell> = Rswift.ReuseIdentifier(identifier: "ProductStoreTimingCell")
    /// Reuse identifier `ProfileCell`.
    static let profileCell: Rswift.ReuseIdentifier<ProfileCell> = Rswift.ReuseIdentifier(identifier: "ProfileCell")
    /// Reuse identifier `PurchaseSubCell`.
    static let purchaseSubCell: Rswift.ReuseIdentifier<PurchaseSubCell> = Rswift.ReuseIdentifier(identifier: "PurchaseSubCell")
    /// Reuse identifier `RecipeItemCell`.
    static let recipeItemCell: Rswift.ReuseIdentifier<RecipeItemCell> = Rswift.ReuseIdentifier(identifier: "RecipeItemCell")
    /// Reuse identifier `RecipesCell`.
    static let recipesCell: Rswift.ReuseIdentifier<RecipesCell> = Rswift.ReuseIdentifier(identifier: "RecipesCell")
    /// Reuse identifier `RecipesSubCell`.
    static let recipesSubCell: Rswift.ReuseIdentifier<RecipesSubCell> = Rswift.ReuseIdentifier(identifier: "RecipesSubCell")
    /// Reuse identifier `TicketDetailHeaderCell`.
    static let ticketDetailHeaderCell: Rswift.ReuseIdentifier<TicketDetailHeaderCell> = Rswift.ReuseIdentifier(identifier: "TicketDetailHeaderCell")
    /// Reuse identifier `TicketReasonCell`.
    static let ticketReasonCell: Rswift.ReuseIdentifier<TicketReasonCell> = Rswift.ReuseIdentifier(identifier: "TicketReasonCell")
    /// Reuse identifier `TicketsCell`.
    static let ticketsCell: Rswift.ReuseIdentifier<TicketsCell> = Rswift.ReuseIdentifier(identifier: "TicketsCell")
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 18 storyboards.
  struct storyboard {
    /// Storyboard `AddressSB`.
    static let addressSB = _R.storyboard.addressSB()
    /// Storyboard `AlertSB`.
    static let alertSB = _R.storyboard.alertSB()
    /// Storyboard `AuthSB`.
    static let authSB = _R.storyboard.authSB()
    /// Storyboard `BuyOnlineSB`.
    static let buyOnlineSB = _R.storyboard.buyOnlineSB()
    /// Storyboard `ContactServiceSB`.
    static let contactServiceSB = _R.storyboard.contactServiceSB()
    /// Storyboard `HomeOffersSB`.
    static let homeOffersSB = _R.storyboard.homeOffersSB()
    /// Storyboard `HomeSB`.
    static let homeSB = _R.storyboard.homeSB()
    /// Storyboard `IntroSB`.
    static let introSB = _R.storyboard.introSB()
    /// Storyboard `LanguageBoard`.
    static let languageBoard = _R.storyboard.languageBoard()
    /// Storyboard `MainTabbarSB`.
    static let mainTabbarSB = _R.storyboard.mainTabbarSB()
    /// Storyboard `MembershipSB`.
    static let membershipSB = _R.storyboard.membershipSB()
    /// Storyboard `OfferSB`.
    static let offerSB = _R.storyboard.offerSB()
    /// Storyboard `PreferencesSB`.
    static let preferencesSB = _R.storyboard.preferencesSB()
    /// Storyboard `PrivacySB`.
    static let privacySB = _R.storyboard.privacySB()
    /// Storyboard `ProfileSB`.
    static let profileSB = _R.storyboard.profileSB()
    /// Storyboard `PurchaseSB`.
    static let purchaseSB = _R.storyboard.purchaseSB()
    /// Storyboard `SplashScreen`.
    static let splashScreen = _R.storyboard.splashScreen()
    /// Storyboard `StoreSB`.
    static let storeSB = _R.storyboard.storeSB()
    
    /// `UIStoryboard(name: "AddressSB", bundle: ...)`
    static func addressSB(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.addressSB)
    }
    
    /// `UIStoryboard(name: "AlertSB", bundle: ...)`
    static func alertSB(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.alertSB)
    }
    
    /// `UIStoryboard(name: "AuthSB", bundle: ...)`
    static func authSB(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.authSB)
    }
    
    /// `UIStoryboard(name: "BuyOnlineSB", bundle: ...)`
    static func buyOnlineSB(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.buyOnlineSB)
    }
    
    /// `UIStoryboard(name: "ContactServiceSB", bundle: ...)`
    static func contactServiceSB(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.contactServiceSB)
    }
    
    /// `UIStoryboard(name: "HomeOffersSB", bundle: ...)`
    static func homeOffersSB(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.homeOffersSB)
    }
    
    /// `UIStoryboard(name: "HomeSB", bundle: ...)`
    static func homeSB(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.homeSB)
    }
    
    /// `UIStoryboard(name: "IntroSB", bundle: ...)`
    static func introSB(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.introSB)
    }
    
    /// `UIStoryboard(name: "LanguageBoard", bundle: ...)`
    static func languageBoard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.languageBoard)
    }
    
    /// `UIStoryboard(name: "MainTabbarSB", bundle: ...)`
    static func mainTabbarSB(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.mainTabbarSB)
    }
    
    /// `UIStoryboard(name: "MembershipSB", bundle: ...)`
    static func membershipSB(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.membershipSB)
    }
    
    /// `UIStoryboard(name: "OfferSB", bundle: ...)`
    static func offerSB(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.offerSB)
    }
    
    /// `UIStoryboard(name: "PreferencesSB", bundle: ...)`
    static func preferencesSB(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.preferencesSB)
    }
    
    /// `UIStoryboard(name: "PrivacySB", bundle: ...)`
    static func privacySB(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.privacySB)
    }
    
    /// `UIStoryboard(name: "ProfileSB", bundle: ...)`
    static func profileSB(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.profileSB)
    }
    
    /// `UIStoryboard(name: "PurchaseSB", bundle: ...)`
    static func purchaseSB(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.purchaseSB)
    }
    
    /// `UIStoryboard(name: "SplashScreen", bundle: ...)`
    static func splashScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.splashScreen)
    }
    
    /// `UIStoryboard(name: "StoreSB", bundle: ...)`
    static func storeSB(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.storeSB)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 327 localization keys.
    struct localizable {
      /// en translation: &
      /// 
      /// Locales: en, da, da-GL
      static let _and = Rswift.StringResource(key: "_and", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: (Optional)
      /// 
      /// Locales: en, da, da-GL
      static let optional = Rswift.StringResource(key: "optional", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: About Pisiffik
      /// 
      /// Locales: en, da, da-GL
      static let aboutPisiffik = Rswift.StringResource(key: "aboutPisiffik", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Add New Address
      /// 
      /// Locales: en, da, da-GL
      static let addNewAddress = Rswift.StringResource(key: "addNewAddress", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Add New Card
      /// 
      /// Locales: en, da, da-GL
      static let addNewCard = Rswift.StringResource(key: "addNewCard", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Add To Cart
      /// 
      /// Locales: en, da, da-GL
      static let addToCart = Rswift.StringResource(key: "addToCart", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Add To Shopping List
      /// 
      /// Locales: en, da, da-GL
      static let addToShoppingList = Rswift.StringResource(key: "addToShoppingList", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Add a card to enjoy a seamless payments experience
      /// 
      /// Locales: en, da, da-GL
      static let addACardToEnjoyASeamlessPaymentsExperience = Rswift.StringResource(key: "addACardToEnjoyASeamlessPaymentsExperience", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Additional Addresses
      /// 
      /// Locales: en, da, da-GL
      static let additionalAddresses = Rswift.StringResource(key: "additionalAddresses", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Address
      /// 
      /// Locales: en, da, da-GL
      static let address = Rswift.StringResource(key: "address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Alert
      /// 
      /// Locales: en, da, da-GL
      static let alert = Rswift.StringResource(key: "alert", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: All
      /// 
      /// Locales: en, da, da-GL
      static let all = Rswift.StringResource(key: "all", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: All Offers
      /// 
      /// Locales: en, da, da-GL
      static let allOffers = Rswift.StringResource(key: "allOffers", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: All Purchases
      /// 
      /// Locales: en, da, da-GL
      static let allPurchases = Rswift.StringResource(key: "allPurchases", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Already a member? Login
      /// 
      /// Locales: en, da, da-GL
      static let alreadyAMemberLogin = Rswift.StringResource(key: "alreadyAMemberLogin", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Amount
      /// 
      /// Locales: en, da, da-GL
      static let amount = Rswift.StringResource(key: "amount", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Apply
      /// 
      /// Locales: en, da, da-GL
      static let apply = Rswift.StringResource(key: "apply", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Are you sure you want to cancel this order?
      /// 
      /// Locales: en, da, da-GL
      static let areYouSureYouWantToCancelThisOrder = Rswift.StringResource(key: "areYouSureYouWantToCancelThisOrder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Are you sure you want to delete this Address?
      /// 
      /// Locales: en, da, da-GL
      static let areYouSureYouWantToDeleteThisAddress = Rswift.StringResource(key: "areYouSureYouWantToDeleteThisAddress", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Attach files
      /// 
      /// Locales: en, da, da-GL
      static let attachFile = Rswift.StringResource(key: "attachFile", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Attachments
      /// 
      /// Locales: en, da, da-GL
      static let attacments = Rswift.StringResource(key: "attacments", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Available Points
      /// 
      /// Locales: en, da, da-GL
      static let availablePoints = Rswift.StringResource(key: "availablePoints", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Available at Stores
      /// 
      /// Locales: en, da, da-GL
      static let availableAtStores = Rswift.StringResource(key: "availableAtStores", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Bought in Pisiffik Store
      /// 
      /// Locales: en, da, da-GL
      static let boughtInPisiffikStore = Rswift.StringResource(key: "boughtInPisiffikStore", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Bought in Pisiffik Webshop
      /// 
      /// Locales: en, da, da-GL
      static let boughtInPisiffikWebshop = Rswift.StringResource(key: "boughtInPisiffikWebshop", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Breakfast
      /// 
      /// Locales: en, da, da-GL
      static let breakfast = Rswift.StringResource(key: "breakfast", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: By
      /// 
      /// Locales: en, da, da-GL
      static let by = Rswift.StringResource(key: "by", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: By sign in you agree to Pisiffik:
      /// 
      /// Locales: en, da, da-GL
      static let bySignInYouAgreeToPisiffik = Rswift.StringResource(key: "bySignInYouAgreeToPisiffik", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: By sign up you agree to Pisiffik:
      /// 
      /// Locales: en, da, da-GL
      static let bySignUpYouAgreeToPisiffik = Rswift.StringResource(key: "bySignUpYouAgreeToPisiffik", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: CVV
      /// 
      /// Locales: en, da, da-GL
      static let cvv = Rswift.StringResource(key: "cvv", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Camera permission is needed
      /// 
      /// Locales: en, da, da-GL
      static let cameraPermissionNeeded = Rswift.StringResource(key: "cameraPermissionNeeded", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Campaign Products
      /// 
      /// Locales: en, da, da-GL
      static let campaignProducts = Rswift.StringResource(key: "campaignProducts", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Cancel
      /// 
      /// Locales: en, da, da-GL
      static let cancel = Rswift.StringResource(key: "cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Cancel
      /// 
      /// Locales: en, da, da-GL
      static let commonCancel = Rswift.StringResource(key: "commonCancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Cancel Order
      /// 
      /// Locales: en, da, da-GL
      static let cancelOrder = Rswift.StringResource(key: "cancelOrder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Cancellation Request
      /// 
      /// Locales: en, da, da-GL
      static let cancellationRequest = Rswift.StringResource(key: "cancellationRequest", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Card Number
      /// 
      /// Locales: en, da, da-GL
      static let cardNumber = Rswift.StringResource(key: "cardNumber", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Card no
      /// 
      /// Locales: en, da, da-GL
      static let cardNo = Rswift.StringResource(key: "cardNo", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Cash On Delivery
      /// 
      /// Locales: en, da, da-GL
      static let cashOnDelivery = Rswift.StringResource(key: "cashOnDelivery", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Categories
      /// 
      /// Locales: en, da, da-GL
      static let categories = Rswift.StringResource(key: "categories", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Checkout
      /// 
      /// Locales: en, da, da-GL
      static let checkout = Rswift.StringResource(key: "checkout", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Checkout to earn
      /// 
      /// Locales: en, da, da-GL
      static let checkoutToEarn = Rswift.StringResource(key: "checkoutToEarn", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: City
      /// 
      /// Locales: en, da, da-GL
      static let city = Rswift.StringResource(key: "city", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Click here
      /// 
      /// Locales: en, da, da-GL
      static let clickHere = Rswift.StringResource(key: "clickHere", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Closed
      /// 
      /// Locales: en, da, da-GL
      static let closed = Rswift.StringResource(key: "closed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Concepts
      /// 
      /// Locales: en, da, da-GL
      static let concept = Rswift.StringResource(key: "concept", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Confirm Cancellation Request
      /// 
      /// Locales: en, da, da-GL
      static let confirmCancellationRequest = Rswift.StringResource(key: "confirmCancellationRequest", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Confirm Password
      /// 
      /// Locales: en, da, da-GL
      static let confirmPassword = Rswift.StringResource(key: "confirmPassword", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Confirm password must required
      /// 
      /// Locales: en, da, da-GL
      static let confirmPasswordMustRequired = Rswift.StringResource(key: "confirmPasswordMustRequired", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Confirm password should be minimum of 6 characters
      /// 
      /// Locales: en, da, da-GL
      static let confirmPasswordShouldBe6Characters = Rswift.StringResource(key: "confirmPasswordShouldBe6Characters", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Contact Us
      /// 
      /// Locales: en, da, da-GL
      static let contactUs = Rswift.StringResource(key: "contactUs", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Contact to customer service center?
      /// 
      /// Locales: en, da, da-GL
      static let contactToCustomerServiceCenter = Rswift.StringResource(key: "contactToCustomerServiceCenter", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Continue
      /// 
      /// Locales: en, da, da-GL
      static let `continue` = Rswift.StringResource(key: "continue", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Country
      /// 
      /// Locales: en, da, da-GL
      static let country = Rswift.StringResource(key: "country", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Course of action
      /// 
      /// Locales: en, da, da-GL
      static let courseOfAction = Rswift.StringResource(key: "courseOfAction", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Credit/Dabit Card
      /// 
      /// Locales: en, da, da-GL
      static let creditOrDabitCard = Rswift.StringResource(key: "creditOrDabitCard", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Current campaigns
      /// 
      /// Locales: en, da, da-GL
      static let currentCampaigns = Rswift.StringResource(key: "currentCampaigns", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Current offers
      /// 
      /// Locales: en, da, da-GL
      static let currentOffers = Rswift.StringResource(key: "currentOffers", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Customer Service
      /// 
      /// Locales: en, da, da-GL
      static let customerService = Rswift.StringResource(key: "customerService", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Danish
      /// 
      /// Locales: en, da, da-GL
      static let danish = Rswift.StringResource(key: "danish", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Date
      /// 
      /// Locales: en, da, da-GL
      static let date = Rswift.StringResource(key: "date", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Date Of Birth
      /// 
      /// Locales: en, da, da-GL
      static let dateOfBirth = Rswift.StringResource(key: "dateOfBirth", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Days
      /// 
      /// Locales: en, da, da-GL
      static let days = Rswift.StringResource(key: "days", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Default Address
      /// 
      /// Locales: en, da, da-GL
      static let defaultAddress = Rswift.StringResource(key: "defaultAddress", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Delete Address
      /// 
      /// Locales: en, da, da-GL
      static let deleteAddress = Rswift.StringResource(key: "deleteAddress", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Delivered
      /// 
      /// Locales: en, da, da-GL
      static let delivered = Rswift.StringResource(key: "delivered", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Delivery
      /// 
      /// Locales: en, da, da-GL
      static let delivery = Rswift.StringResource(key: "delivery", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Delivery Address
      /// 
      /// Locales: en, da, da-GL
      static let deliveryAddress = Rswift.StringResource(key: "deliveryAddress", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Delivery Fee
      /// 
      /// Locales: en, da, da-GL
      static let deliveryFee = Rswift.StringResource(key: "deliveryFee", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Delivery to
      /// 
      /// Locales: en, da, da-GL
      static let deliveryTo = Rswift.StringResource(key: "deliveryTo", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Description
      /// 
      /// Locales: en, da, da-GL
      static let description = Rswift.StringResource(key: "description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Details
      /// 
      /// Locales: en, da, da-GL
      static let details = Rswift.StringResource(key: "details", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Device type is required
      /// 
      /// Locales: en, da, da-GL
      static let deviceTypeRequired = Rswift.StringResource(key: "deviceTypeRequired", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Didn’t get a code?
      /// 
      /// Locales: en, da, da-GL
      static let didNotGetACode = Rswift.StringResource(key: "didNotGetACode", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Dinner
      /// 
      /// Locales: en, da, da-GL
      static let dinner = Rswift.StringResource(key: "dinner", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Direction
      /// 
      /// Locales: en, da, da-GL
      static let direction = Rswift.StringResource(key: "direction", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Document
      /// 
      /// Locales: en, da, da-GL
      static let document = Rswift.StringResource(key: "document", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Done
      /// 
      /// Locales: en, da, da-GL
      static let done = Rswift.StringResource(key: "done", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: During Treatment
      /// 
      /// Locales: en, da, da-GL
      static let duringTreatment = Rswift.StringResource(key: "duringTreatment", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: E-mail
      /// 
      /// Locales: en, da, da-GL
      static let email = Rswift.StringResource(key: "email", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Earned
      /// 
      /// Locales: en, da, da-GL
      static let earned = Rswift.StringResource(key: "earned", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Earned Points
      /// 
      /// Locales: en, da, da-GL
      static let earnedPoints = Rswift.StringResource(key: "earnedPoints", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Edit Address
      /// 
      /// Locales: en, da, da-GL
      static let editAddress = Rswift.StringResource(key: "editAddress", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Electronics
      /// 
      /// Locales: en, da, da-GL
      static let electronics = Rswift.StringResource(key: "electronics", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Email required
      /// 
      /// Locales: en, da, da-GL
      static let emailRequired = Rswift.StringResource(key: "emailRequired", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: English
      /// 
      /// Locales: en, da, da-GL
      static let english = Rswift.StringResource(key: "english", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Enter Verification Code
      /// 
      /// Locales: en, da, da-GL
      static let enterVerificationCode = Rswift.StringResource(key: "enterVerificationCode", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Enter valid e-mail
      /// 
      /// Locales: en, da, da-GL
      static let enterValidEmail = Rswift.StringResource(key: "enterValidEmail", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Enter valid full name
      /// 
      /// Locales: en, da, da-GL
      static let enterValidFullName = Rswift.StringResource(key: "enterValidFullName", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Enter valid full name without numbers.
      /// 
      /// Locales: en, da, da-GL
      static let enterValidFullNameWithoutNumber = Rswift.StringResource(key: "enterValidFullNameWithoutNumber", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Enter valid number
      /// 
      /// Locales: en, da, da-GL
      static let enterValidNumber = Rswift.StringResource(key: "enterValidNumber", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Enter your mobile number to reset password
      /// 
      /// Locales: en, da, da-GL
      static let enterYourMobileNumberToResetPassword = Rswift.StringResource(key: "enterYourMobileNumberToResetPassword", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Error
      /// 
      /// Locales: en, da, da-GL
      static let commonError = Rswift.StringResource(key: "commonError", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Error
      /// 
      /// Locales: en, da, da-GL
      static let error = Rswift.StringResource(key: "error", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Event Details
      /// 
      /// Locales: en, da, da-GL
      static let eventDetails = Rswift.StringResource(key: "eventDetails", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Events
      /// 
      /// Locales: en, da, da-GL
      static let events = Rswift.StringResource(key: "events", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Events / Activities
      /// 
      /// Locales: en, da, da-GL
      static let eventActivities = Rswift.StringResource(key: "eventActivities", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Expire
      /// 
      /// Locales: en, da, da-GL
      static let expire = Rswift.StringResource(key: "expire", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Expire In
      /// 
      /// Locales: en, da, da-GL
      static let expireIn = Rswift.StringResource(key: "expireIn", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Expired
      /// 
      /// Locales: en, da, da-GL
      static let expired = Rswift.StringResource(key: "expired", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Expires on
      /// 
      /// Locales: en, da, da-GL
      static let expiresOn = Rswift.StringResource(key: "expiresOn", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Expiry Month
      /// 
      /// Locales: en, da, da-GL
      static let expiryMonth = Rswift.StringResource(key: "expiryMonth", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Expiry Year
      /// 
      /// Locales: en, da, da-GL
      static let expiryYear = Rswift.StringResource(key: "expiryYear", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: FAQ
      /// 
      /// Locales: en, da, da-GL
      static let faq = Rswift.StringResource(key: "faq", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Favorites
      /// 
      /// Locales: en, da, da-GL
      static let favorites = Rswift.StringResource(key: "favorites", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Fcm token is required
      /// 
      /// Locales: en, da, da-GL
      static let fcmTokenRequired = Rswift.StringResource(key: "fcmTokenRequired", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Female
      /// 
      /// Locales: en, da, da-GL
      static let female = Rswift.StringResource(key: "female", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Find Store
      /// 
      /// Locales: en, da, da-GL
      static let findStore = Rswift.StringResource(key: "findStore", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: For more information
      /// 
      /// Locales: en, da, da-GL
      static let forMoreInformation = Rswift.StringResource(key: "forMoreInformation", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Forgot Password?
      /// 
      /// Locales: en, da, da-GL
      static let forgot_Password = Rswift.StringResource(key: "forgot_Password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Forgot password
      /// 
      /// Locales: en, da, da-GL
      static let forgotPassword = Rswift.StringResource(key: "forgotPassword", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Free
      /// 
      /// Locales: en, da, da-GL
      static let free = Rswift.StringResource(key: "free", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: From Camera/Library
      /// 
      /// Locales: en, da, da-GL
      static let fromGallery = Rswift.StringResource(key: "fromGallery", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: From Documents
      /// 
      /// Locales: en, da, da-GL
      static let fromDocuments = Rswift.StringResource(key: "fromDocuments", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Full Name
      /// 
      /// Locales: en, da, da-GL
      static let fullName = Rswift.StringResource(key: "fullName", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Full name required
      /// 
      /// Locales: en, da, da-GL
      static let fullNameRequired = Rswift.StringResource(key: "fullNameRequired", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Full name should be minimum lenght of 2 and maximum lenght of 30
      /// 
      /// Locales: en, da, da-GL
      static let fullNameLenghtError = Rswift.StringResource(key: "fullNameLenghtError", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: GDPR
      /// 
      /// Locales: en, da, da-GL
      static let gdpr = Rswift.StringResource(key: "gdpr", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Gender
      /// 
      /// Locales: en, da, da-GL
      static let gender = Rswift.StringResource(key: "gender", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Get Help With Scan
      /// 
      /// Locales: en, da, da-GL
      static let getHelpWithScan = Rswift.StringResource(key: "getHelpWithScan", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Go To Checkout
      /// 
      /// Locales: en, da, da-GL
      static let goToCheckout = Rswift.StringResource(key: "goToCheckout", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Greenland
      /// 
      /// Locales: en, da, da-GL
      static let greenland = Rswift.StringResource(key: "greenland", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Hardware
      /// 
      /// Locales: en, da, da-GL
      static let hardware = Rswift.StringResource(key: "hardware", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Hi
      /// 
      /// Locales: en, da, da-GL
      static let hi = Rswift.StringResource(key: "hi", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Home
      /// 
      /// Locales: en, da, da-GL
      static let home = Rswift.StringResource(key: "home", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: In stock
      /// 
      /// Locales: en, da, da-GL
      static let inStock = Rswift.StringResource(key: "inStock", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Inbox
      /// 
      /// Locales: en, da, da-GL
      static let inbox = Rswift.StringResource(key: "inbox", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Info
      /// 
      /// Locales: en, da, da-GL
      static let info = Rswift.StringResource(key: "info", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Ingrediants
      /// 
      /// Locales: en, da, da-GL
      static let ingrediants = Rswift.StringResource(key: "ingrediants", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Instructions
      /// 
      /// Locales: en, da, da-GL
      static let instructions = Rswift.StringResource(key: "instructions", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Interior design
      /// 
      /// Locales: en, da, da-GL
      static let interiorDesign = Rswift.StringResource(key: "interiorDesign", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Items
      /// 
      /// Locales: en, da, da-GL
      static let items = Rswift.StringResource(key: "items", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Join Pisiffik
      /// 
      /// Locales: en, da, da-GL
      static let joinPisiffik = Rswift.StringResource(key: "joinPisiffik", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Last 6 Months
      /// 
      /// Locales: en, da, da-GL
      static let lastSixMonths = Rswift.StringResource(key: "lastSixMonths", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Local
      /// 
      /// Locales: en, da, da-GL
      static let local = Rswift.StringResource(key: "local", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Local offers
      /// 
      /// Locales: en, da, da-GL
      static let localOffers = Rswift.StringResource(key: "localOffers", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Login
      /// 
      /// Locales: en, da, da-GL
      static let login = Rswift.StringResource(key: "login", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Login Your Account
      /// 
      /// Locales: en, da, da-GL
      static let loginYourAccount = Rswift.StringResource(key: "loginYourAccount", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Logout
      /// 
      /// Locales: en, da, da-GL
      static let logout = Rswift.StringResource(key: "logout", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Loyalty and discounts
      /// 
      /// Locales: en, da, da-GL
      static let loyaltyAndDiscounts = Rswift.StringResource(key: "loyaltyAndDiscounts", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Lunch
      /// 
      /// Locales: en, da, da-GL
      static let lunch = Rswift.StringResource(key: "lunch", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: MB
      /// 
      /// Locales: en, da, da-GL
      static let mb = Rswift.StringResource(key: "mb", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Make sure wifi or cellular data is turned on and then try again
      /// 
      /// Locales: en, da, da-GL
      static let makeSureWifiOrCellularDataIsTurnedOnAndThenTrySgain = Rswift.StringResource(key: "makeSureWifiOrCellularDataIsTurnedOnAndThenTrySgain", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Male
      /// 
      /// Locales: en, da, da-GL
      static let male = Rswift.StringResource(key: "male", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Membership
      /// 
      /// Locales: en, da, da-GL
      static let membership = Rswift.StringResource(key: "membership", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Membership offers
      /// 
      /// Locales: en, da, da-GL
      static let membershipOffers = Rswift.StringResource(key: "membershipOffers", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Message required
      /// 
      /// Locales: en, da, da-GL
      static let messageRequired = Rswift.StringResource(key: "messageRequired", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Mobile Number
      /// 
      /// Locales: en, da, da-GL
      static let mobileNumber = Rswift.StringResource(key: "mobileNumber", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Mobile number required
      /// 
      /// Locales: en, da, da-GL
      static let mobileNumberRequired = Rswift.StringResource(key: "mobileNumberRequired", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: More
      /// 
      /// Locales: en, da, da-GL
      static let more = Rswift.StringResource(key: "more", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Must be at least 6 characters.
      /// 
      /// Locales: en, da, da-GL
      static let mustBeAtLeastSixCharacters = Rswift.StringResource(key: "mustBeAtLeastSixCharacters", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: My Cart
      /// 
      /// Locales: en, da, da-GL
      static let myCart = Rswift.StringResource(key: "myCart", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: My Membership Card
      /// 
      /// Locales: en, da, da-GL
      static let myMembershipCard = Rswift.StringResource(key: "myMembershipCard", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: My Shopping List
      /// 
      /// Locales: en, da, da-GL
      static let myShoppingList = Rswift.StringResource(key: "myShoppingList", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Name on Card
      /// 
      /// Locales: en, da, da-GL
      static let nameOnCard = Rswift.StringResource(key: "nameOnCard", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: New Password
      /// 
      /// Locales: en, da, da-GL
      static let newPassword = Rswift.StringResource(key: "newPassword", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: New email is required.
      /// 
      /// Locales: en, da, da-GL
      static let newEmailIsRequired = Rswift.StringResource(key: "newEmailIsRequired", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: New phone number is required.
      /// 
      /// Locales: en, da, da-GL
      static let newPhoneIsRequired = Rswift.StringResource(key: "newPhoneIsRequired", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: News
      /// 
      /// Locales: en, da, da-GL
      static let news = Rswift.StringResource(key: "news", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Next
      /// 
      /// Locales: en, da, da-GL
      static let next = Rswift.StringResource(key: "next", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: No
      /// 
      /// Locales: en, da, da-GL
      static let no = Rswift.StringResource(key: "no", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: No cards added
      /// 
      /// Locales: en, da, da-GL
      static let noCardsAdded = Rswift.StringResource(key: "noCardsAdded", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Not register yet? Create an account
      /// 
      /// Locales: en, da, da-GL
      static let notRegisterYetCreateAnAccount = Rswift.StringResource(key: "notRegisterYetCreateAnAccount", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Notifications
      /// 
      /// Locales: en, da, da-GL
      static let notifications = Rswift.StringResource(key: "notifications", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: OK
      /// 
      /// Locales: en, da, da-GL
      static let ok = Rswift.StringResource(key: "ok", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: OR
      /// 
      /// Locales: en, da, da-GL
      static let or = Rswift.StringResource(key: "or", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Offer newspapers
      /// 
      /// Locales: en, da, da-GL
      static let offerNewspapers = Rswift.StringResource(key: "offerNewspapers", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Offers
      /// 
      /// Locales: en, da, da-GL
      static let offers = Rswift.StringResource(key: "offers", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Offers and Benefits
      /// 
      /// Locales: en, da, da-GL
      static let offersAndBenefits = Rswift.StringResource(key: "offersAndBenefits", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Office
      /// 
      /// Locales: en, da, da-GL
      static let office = Rswift.StringResource(key: "office", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Ok
      /// 
      /// Locales: en, da, da-GL
      static let commonOk = Rswift.StringResource(key: "commonOk", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Ok
      /// 
      /// Locales: en, da, da-GL
      static let okay = Rswift.StringResource(key: "okay", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Online
      /// 
      /// Locales: en, da, da-GL
      static let online = Rswift.StringResource(key: "online", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Oops, store direction not available!
      /// 
      /// Locales: en, da, da-GL
      static let oopsStoreDirectionNotAvailable = Rswift.StringResource(key: "oopsStoreDirectionNotAvailable", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Oops. No internet connection
      /// 
      /// Locales: en, da, da-GL
      static let oopsNoInternetConnection = Rswift.StringResource(key: "oopsNoInternetConnection", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Open
      /// 
      /// Locales: en, da, da-GL
      static let `open` = Rswift.StringResource(key: "open", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Opening Hours
      /// 
      /// Locales: en, da, da-GL
      static let openingHours = Rswift.StringResource(key: "openingHours", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Order
      /// 
      /// Locales: en, da, da-GL
      static let order = Rswift.StringResource(key: "order", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Order Date
      /// 
      /// Locales: en, da, da-GL
      static let orderDate = Rswift.StringResource(key: "orderDate", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Order No
      /// 
      /// Locales: en, da, da-GL
      static let orderNo = Rswift.StringResource(key: "orderNo", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Order info
      /// 
      /// Locales: en, da, da-GL
      static let orderInfo = Rswift.StringResource(key: "orderInfo", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Other
      /// 
      /// Locales: en, da, da-GL
      static let other = Rswift.StringResource(key: "other", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Other Items
      /// 
      /// Locales: en, da, da-GL
      static let otherItems = Rswift.StringResource(key: "otherItems", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Other queries
      /// 
      /// Locales: en, da, da-GL
      static let otherQueries = Rswift.StringResource(key: "otherQueries", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Outdoor
      /// 
      /// Locales: en, da, da-GL
      static let outdoor = Rswift.StringResource(key: "outdoor", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Package number
      /// 
      /// Locales: en, da, da-GL
      static let packageNumber = Rswift.StringResource(key: "packageNumber", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Password
      /// 
      /// Locales: en, da, da-GL
      static let password = Rswift.StringResource(key: "password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Password does not match
      /// 
      /// Locales: en, da, da-GL
      static let bothPasswordMustBeMatched = Rswift.StringResource(key: "bothPasswordMustBeMatched", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Password must required
      /// 
      /// Locales: en, da, da-GL
      static let passwordMustRequired = Rswift.StringResource(key: "passwordMustRequired", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Password should be minimum of 6 characters
      /// 
      /// Locales: en, da, da-GL
      static let passwordShouldBe6Characters = Rswift.StringResource(key: "passwordShouldBe6Characters", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Payment
      /// 
      /// Locales: en, da, da-GL
      static let payment = Rswift.StringResource(key: "payment", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Payment Method
      /// 
      /// Locales: en, da, da-GL
      static let paymentMethod = Rswift.StringResource(key: "paymentMethod", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Pending
      /// 
      /// Locales: en, da, da-GL
      static let pending = Rswift.StringResource(key: "pending", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Person
      /// 
      /// Locales: en, da, da-GL
      static let person = Rswift.StringResource(key: "person", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Personal
      /// 
      /// Locales: en, da, da-GL
      static let personal = Rswift.StringResource(key: "personal", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Personal offers
      /// 
      /// Locales: en, da, da-GL
      static let personalOffers = Rswift.StringResource(key: "personalOffers", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Photo
      /// 
      /// Locales: en, da, da-GL
      static let photo = Rswift.StringResource(key: "photo", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Pisiffik Benefits
      /// 
      /// Locales: en, da, da-GL
      static let pisiffikBenefits = Rswift.StringResource(key: "pisiffikBenefits", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Pisiffik Items
      /// 
      /// Locales: en, da, da-GL
      static let pisiffikItems = Rswift.StringResource(key: "pisiffikItems", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Pisiffik representative will respond to your query soon.
      /// 
      /// Locales: en, da, da-GL
      static let pisiffikRepresentativeWillRespondToYourQuerySoon = Rswift.StringResource(key: "pisiffikRepresentativeWillRespondToYourQuerySoon", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Please Select Your Language
      /// 
      /// Locales: en, da, da-GL
      static let pleaseSelectYourLanguage = Rswift.StringResource(key: "pleaseSelectYourLanguage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Please enable access to calender to add events to your calender.
      /// 
      /// Locales: en, da, da-GL
      static let enableAccessToCalenderMessage = Rswift.StringResource(key: "enableAccessToCalenderMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Please enable your location to get the direction of store.
      /// 
      /// Locales: en, da, da-GL
      static let enableLocationStoreDirectionAlertMessage = Rswift.StringResource(key: "enableLocationStoreDirectionAlertMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Please enable your location to get the distance of store from your current location.
      /// 
      /// Locales: en, da, da-GL
      static let enableLocationStoreDistanceAlertMessage = Rswift.StringResource(key: "enableLocationStoreDistanceAlertMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Please enter valid OTP code for verification
      /// 
      /// Locales: en, da, da-GL
      static let pleaseEnterValidOtpCodeForVerification = Rswift.StringResource(key: "pleaseEnterValidOtpCodeForVerification", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Please enter valid new email.
      /// 
      /// Locales: en, da, da-GL
      static let newEmailIsInValid = Rswift.StringResource(key: "newEmailIsInValid", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Please enter valid new phone number.
      /// 
      /// Locales: en, da, da-GL
      static let newPhoneIsInValid = Rswift.StringResource(key: "newPhoneIsInValid", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Please type phone number or email address.
      /// 
      /// Locales: en, da, da-GL
      static let pleaseTypePhoneNmbOrEmailError = Rswift.StringResource(key: "pleaseTypePhoneNmbOrEmailError", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Points
      /// 
      /// Locales: en, da, da-GL
      static let points = Rswift.StringResource(key: "points", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Points Overview
      /// 
      /// Locales: en, da, da-GL
      static let pointsOverview = Rswift.StringResource(key: "pointsOverview", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Points at Pisiffik
      /// 
      /// Locales: en, da, da-GL
      static let pointsAtPisiffik = Rswift.StringResource(key: "pointsAtPisiffik", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Points to be earned
      /// 
      /// Locales: en, da, da-GL
      static let pointsToBeEarned = Rswift.StringResource(key: "pointsToBeEarned", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Points to be used
      /// 
      /// Locales: en, da, da-GL
      static let pointsToBeUsed = Rswift.StringResource(key: "pointsToBeUsed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Portions
      /// 
      /// Locales: en, da, da-GL
      static let portions = Rswift.StringResource(key: "portions", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Preferences
      /// 
      /// Locales: en, da, da-GL
      static let preferences = Rswift.StringResource(key: "preferences", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Privacy Policy
      /// 
      /// Locales: en, da, da-GL
      static let privacyPolicy = Rswift.StringResource(key: "privacyPolicy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Product
      /// 
      /// Locales: en, da, da-GL
      static let product = Rswift.StringResource(key: "product", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Profile
      /// 
      /// Locales: en, da, da-GL
      static let profile = Rswift.StringResource(key: "profile", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Purchase
      /// 
      /// Locales: en, da, da-GL
      static let purchase = Rswift.StringResource(key: "purchase", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: QTY
      /// 
      /// Locales: en, da, da-GL
      static let qty = Rswift.StringResource(key: "qty", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Quantity
      /// 
      /// Locales: en, da, da-GL
      static let quantity = Rswift.StringResource(key: "quantity", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Rate Our App
      /// 
      /// Locales: en, da, da-GL
      static let rateOurApp = Rswift.StringResource(key: "rateOurApp", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Re-Opened
      /// 
      /// Locales: en, da, da-GL
      static let reOpened = Rswift.StringResource(key: "reOpened", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Ready for pickup
      /// 
      /// Locales: en, da, da-GL
      static let readyForPickup = Rswift.StringResource(key: "readyForPickup", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Reason
      /// 
      /// Locales: en, da, da-GL
      static let reason = Rswift.StringResource(key: "reason", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Reason for cancellation
      /// 
      /// Locales: en, da, da-GL
      static let reasonForCancellation = Rswift.StringResource(key: "reasonForCancellation", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Rebate
      /// 
      /// Locales: en, da, da-GL
      static let rebate = Rswift.StringResource(key: "rebate", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Received
      /// 
      /// Locales: en, da, da-GL
      static let received = Rswift.StringResource(key: "received", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Recent
      /// 
      /// Locales: en, da, da-GL
      static let recent = Rswift.StringResource(key: "recent", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Recipes
      /// 
      /// Locales: en, da, da-GL
      static let recipes = Rswift.StringResource(key: "recipes", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Redeem
      /// 
      /// Locales: en, da, da-GL
      static let redeem = Rswift.StringResource(key: "redeem", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Redeem Points
      /// 
      /// Locales: en, da, da-GL
      static let redeemPoints = Rswift.StringResource(key: "redeemPoints", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Reedem All
      /// 
      /// Locales: en, da, da-GL
      static let reedemAll = Rswift.StringResource(key: "reedemAll", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Reedem Points
      /// 
      /// Locales: en, da, da-GL
      static let reedemPoints = Rswift.StringResource(key: "reedemPoints", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Remove from calender
      /// 
      /// Locales: en, da, da-GL
      static let eventRemovedToCalender = Rswift.StringResource(key: "eventRemovedToCalender", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Request Sent
      /// 
      /// Locales: en, da, da-GL
      static let requestSent = Rswift.StringResource(key: "requestSent", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Resend
      /// 
      /// Locales: en, da, da-GL
      static let resend = Rswift.StringResource(key: "resend", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Reset Your Password
      /// 
      /// Locales: en, da, da-GL
      static let resetYourPassword = Rswift.StringResource(key: "resetYourPassword", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Reset password
      /// 
      /// Locales: en, da, da-GL
      static let resetPassword = Rswift.StringResource(key: "resetPassword", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Save
      /// 
      /// Locales: en, da, da-GL
      static let save = Rswift.StringResource(key: "save", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Save Card
      /// 
      /// Locales: en, da, da-GL
      static let saveCard = Rswift.StringResource(key: "saveCard", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Save Changes
      /// 
      /// Locales: en, da, da-GL
      static let saveChanges = Rswift.StringResource(key: "saveChanges", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Scan
      /// 
      /// Locales: en, da, da-GL
      static let scan = Rswift.StringResource(key: "scan", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Scan Barcode
      /// 
      /// Locales: en, da, da-GL
      static let scanBarcode = Rswift.StringResource(key: "scanBarcode", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Scan Barcode and get product details, like product name, brand, pricing etc.
      /// 
      /// Locales: en, da, da-GL
      static let scanBarcodeAndGetProductDetailsLikeProductNameBrandPricing = Rswift.StringResource(key: "scanBarcodeAndGetProductDetailsLikeProductNameBrandPricing", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Scanning not supported
      /// 
      /// Locales: en, da, da-GL
      static let scanningNotSupported = Rswift.StringResource(key: "scanningNotSupported", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Schedule
      /// 
      /// Locales: en, da, da-GL
      static let schedule = Rswift.StringResource(key: "schedule", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Search
      /// 
      /// Locales: en, da, da-GL
      static let search = Rswift.StringResource(key: "search", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: See FAQ
      /// 
      /// Locales: en, da, da-GL
      static let seeFAQ = Rswift.StringResource(key: "seeFAQ", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: See More
      /// 
      /// Locales: en, da, da-GL
      static let seeMore = Rswift.StringResource(key: "seeMore", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: See all
      /// 
      /// Locales: en, da, da-GL
      static let seeAll = Rswift.StringResource(key: "seeAll", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: See the relevant topic
      /// 
      /// Locales: en, da, da-GL
      static let seeTheRelevantTopic = Rswift.StringResource(key: "seeTheRelevantTopic", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Select
      /// 
      /// Locales: en, da, da-GL
      static let select = Rswift.StringResource(key: "select", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Select Date of Birth
      /// 
      /// Locales: en, da, da-GL
      static let selectDateOfBirth = Rswift.StringResource(key: "selectDateOfBirth", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Select One
      /// 
      /// Locales: en, da, da-GL
      static let selectOne = Rswift.StringResource(key: "selectOne", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Select products from ingredients
      /// 
      /// Locales: en, da, da-GL
      static let selectProductsFromIngredients = Rswift.StringResource(key: "selectProductsFromIngredients", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Select your gender
      /// 
      /// Locales: en, da, da-GL
      static let selectYourGender = Rswift.StringResource(key: "selectYourGender", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Select your reason
      /// 
      /// Locales: en, da, da-GL
      static let reasonRequired = Rswift.StringResource(key: "reasonRequired", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Send
      /// 
      /// Locales: en, da, da-GL
      static let send = Rswift.StringResource(key: "send", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Sent to calender
      /// 
      /// Locales: en, da, da-GL
      static let eventAddedToCalender = Rswift.StringResource(key: "eventAddedToCalender", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Sent to store
      /// 
      /// Locales: en, da, da-GL
      static let sentToStore = Rswift.StringResource(key: "sentToStore", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Serving
      /// 
      /// Locales: en, da, da-GL
      static let serving = Rswift.StringResource(key: "serving", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Session Expired
      /// 
      /// Locales: en, da, da-GL
      static let sessionExpired = Rswift.StringResource(key: "sessionExpired", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Single Purchase
      /// 
      /// Locales: en, da, da-GL
      static let singlePurchase = Rswift.StringResource(key: "singlePurchase", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Slide To Order
      /// 
      /// Locales: en, da, da-GL
      static let slideToOrder = Rswift.StringResource(key: "slideToOrder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Something went wrong
      /// 
      /// Locales: en, da, da-GL
      static let somethingWentWrong = Rswift.StringResource(key: "somethingWentWrong", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Something went wrong. Please try again later
      /// 
      /// Locales: en, da, da-GL
      static let errorSomethingWrong = Rswift.StringResource(key: "errorSomethingWrong", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Sorry! No Item Found
      /// 
      /// Locales: en, da, da-GL
      static let sorryNoItemFound = Rswift.StringResource(key: "sorryNoItemFound", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Specification
      /// 
      /// Locales: en, da, da-GL
      static let specification = Rswift.StringResource(key: "specification", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: State
      /// 
      /// Locales: en, da, da-GL
      static let state = Rswift.StringResource(key: "state", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Status
      /// 
      /// Locales: en, da, da-GL
      static let status = Rswift.StringResource(key: "status", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Store
      /// 
      /// Locales: en, da, da-GL
      static let store = Rswift.StringResource(key: "store", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Subject
      /// 
      /// Locales: en, da, da-GL
      static let subject = Rswift.StringResource(key: "subject", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Subject required
      /// 
      /// Locales: en, da, da-GL
      static let subjectRequired = Rswift.StringResource(key: "subjectRequired", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Success
      /// 
      /// Locales: en, da, da-GL
      static let success = Rswift.StringResource(key: "success", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Terms & Conditions
      /// 
      /// Locales: en, da, da-GL
      static let termsAndConditions = Rswift.StringResource(key: "termsAndConditions", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Terms of Use
      /// 
      /// Locales: en, da, da-GL
      static let termsOfUse = Rswift.StringResource(key: "termsOfUse", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Thank you for contacting us.
      /// 
      /// Locales: en, da, da-GL
      static let thankYouForContactingUs = Rswift.StringResource(key: "thankYouForContactingUs", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Thank you for your request to cancel this order. please leave us a note about cancellation request and we will review it as soon as possible.
      /// 
      /// Locales: en, da, da-GL
      static let cancelOrderDescription = Rswift.StringResource(key: "cancelOrderDescription", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: This Month
      /// 
      /// Locales: en, da, da-GL
      static let thisMonth = Rswift.StringResource(key: "thisMonth", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: This Week
      /// 
      /// Locales: en, da, da-GL
      static let thisWeek = Rswift.StringResource(key: "thisWeek", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: This Year
      /// 
      /// Locales: en, da, da-GL
      static let thisYear = Rswift.StringResource(key: "thisYear", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: This e-mail is already verified.
      /// 
      /// Locales: en, da, da-GL
      static let alreadyVerifiedEmail = Rswift.StringResource(key: "alreadyVerifiedEmail", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: This ticket is closed by Admin.
      /// 
      /// Locales: en, da, da-GL
      static let ticketClosedError = Rswift.StringResource(key: "ticketClosedError", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Ticket
      /// 
      /// Locales: en, da, da-GL
      static let ticket = Rswift.StringResource(key: "ticket", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Tickets
      /// 
      /// Locales: en, da, da-GL
      static let tickets = Rswift.StringResource(key: "tickets", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Time
      /// 
      /// Locales: en, da, da-GL
      static let time = Rswift.StringResource(key: "time", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Tip
      /// 
      /// Locales: en, da, da-GL
      static let tip = Rswift.StringResource(key: "tip", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Total (Incl. VAT)
      /// 
      /// Locales: en, da, da-GL
      static let totalVAT = Rswift.StringResource(key: "totalVAT", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Total Amount Due
      /// 
      /// Locales: en, da, da-GL
      static let totalAmountDue = Rswift.StringResource(key: "totalAmountDue", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Toys & Leisure
      /// 
      /// Locales: en, da, da-GL
      static let toysLeisure = Rswift.StringResource(key: "toysLeisure", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Try Again
      /// 
      /// Locales: en, da, da-GL
      static let tryAgain = Rswift.StringResource(key: "tryAgain", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Type
      /// 
      /// Locales: en, da, da-GL
      static let type = Rswift.StringResource(key: "type", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Update
      /// 
      /// Locales: en, da, da-GL
      static let update = Rswift.StringResource(key: "update", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Valid from
      /// 
      /// Locales: en, da, da-GL
      static let validFrom = Rswift.StringResource(key: "validFrom", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Verified
      /// 
      /// Locales: en, da, da-GL
      static let verified = Rswift.StringResource(key: "verified", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Verify
      /// 
      /// Locales: en, da, da-GL
      static let verify = Rswift.StringResource(key: "verify", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Verify E-mail
      /// 
      /// Locales: en, da, da-GL
      static let verifyEmail = Rswift.StringResource(key: "verifyEmail", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Verify Phone
      /// 
      /// Locales: en, da, da-GL
      static let verifyPhone = Rswift.StringResource(key: "verifyPhone", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Verifying
      /// 
      /// Locales: en, da, da-GL
      static let verifying = Rswift.StringResource(key: "verifying", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: View Detail
      /// 
      /// Locales: en, da, da-GL
      static let viewDetail = Rswift.StringResource(key: "viewDetail", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: View file
      /// 
      /// Locales: en, da, da-GL
      static let viewFile = Rswift.StringResource(key: "viewFile", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Vinnit
      /// 
      /// Locales: en, da, da-GL
      static let vinnit = Rswift.StringResource(key: "vinnit", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: We have sent to your e-mail
      /// 
      /// Locales: en, da, da-GL
      static let weHaveSentToYourEmail = Rswift.StringResource(key: "weHaveSentToYourEmail", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: We have sent to your email address
      /// 
      /// Locales: en, da, da-GL
      static let weHaveSentToYourEmailAddress = Rswift.StringResource(key: "weHaveSentToYourEmailAddress", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: We have sent to your mobile number
      /// 
      /// Locales: en, da, da-GL
      static let weHaveSentToYourMobileNumber = Rswift.StringResource(key: "weHaveSentToYourMobileNumber", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Women's Clothing
      /// 
      /// Locales: en, da, da-GL
      static let womenClothing = Rswift.StringResource(key: "womenClothing", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Yes
      /// 
      /// Locales: en, da, da-GL
      static let yes = Rswift.StringResource(key: "yes", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: You can contact us
      /// 
      /// Locales: en, da, da-GL
      static let youCanContactUs = Rswift.StringResource(key: "youCanContactUs", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: You can only select maximum
      /// 
      /// Locales: en, da, da-GL
      static let youCanOnlSelectMaximum = Rswift.StringResource(key: "youCanOnlSelectMaximum", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: You can only send maximum
      /// 
      /// Locales: en, da, da-GL
      static let youCanOnlySendMaximum = Rswift.StringResource(key: "youCanOnlySendMaximum", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: You have earned
      /// 
      /// Locales: en, da, da-GL
      static let youHaveEarned = Rswift.StringResource(key: "youHaveEarned", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: You will earn
      /// 
      /// Locales: en, da, da-GL
      static let youWillEarn = Rswift.StringResource(key: "youWillEarn", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: You will spent
      /// 
      /// Locales: en, da, da-GL
      static let youWillSpent = Rswift.StringResource(key: "youWillSpent", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Your Points Expire Soon!
      /// 
      /// Locales: en, da, da-GL
      static let yourPointsExpireSoon = Rswift.StringResource(key: "yourPointsExpireSoon", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Your device does not support scanning a code from an item. Please use a device with a camera.
      /// 
      /// Locales: en, da, da-GL
      static let yourDeviceDoesNotSupportScanningaCodeFromAnItemPleaseUseADeviceWithACamera = Rswift.StringResource(key: "yourDeviceDoesNotSupportScanningaCodeFromAnItemPleaseUse aDeviceWith aCamera", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: Your items has been placed and is on it’s way to being processed
      /// 
      /// Locales: en, da, da-GL
      static let yourItemsHasBeenPlacedAndIsOnItWayToBeingProcessed = Rswift.StringResource(key: "yourItemsHasBeenPlacedAndIsOnItWayToBeingProcessed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: and
      /// 
      /// Locales: en, da, da-GL
      static let and = Rswift.StringResource(key: "and", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: and get rebate
      /// 
      /// Locales: en, da, da-GL
      static let andGetRebate = Rswift.StringResource(key: "andGetRebate", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: at
      /// 
      /// Locales: en, da, da-GL
      static let at = Rswift.StringResource(key: "at", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: at Pisiffik
      /// 
      /// Locales: en, da, da-GL
      static let atPisiffik = Rswift.StringResource(key: "atPisiffik", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: example@gmail.com
      /// 
      /// Locales: en, da, da-GL
      static let emailPlaceHolder = Rswift.StringResource(key: "emailPlaceHolder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: file size
      /// 
      /// Locales: en, da, da-GL
      static let fileSize = Rswift.StringResource(key: "fileSize", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: km
      /// 
      /// Locales: en, da, da-GL
      static let km = Rswift.StringResource(key: "km", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: min
      /// 
      /// Locales: en, da, da-GL
      static let min = Rswift.StringResource(key: "min", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: out of
      /// 
      /// Locales: en, da, da-GL
      static let outOf = Rswift.StringResource(key: "outOf", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      /// en translation: when your order is completed successfully.
      /// 
      /// Locales: en, da, da-GL
      static let whenYourOrderIsCompletedSuccessfully = Rswift.StringResource(key: "whenYourOrderIsCompletedSuccessfully", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da", "da-GL"], comment: nil)
      
      /// en translation: &
      /// 
      /// Locales: en, da, da-GL
      static func _and(_: Void = ()) -> String {
        return NSLocalizedString("_and", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: (Optional)
      /// 
      /// Locales: en, da, da-GL
      static func optional(_: Void = ()) -> String {
        return NSLocalizedString("optional", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: About Pisiffik
      /// 
      /// Locales: en, da, da-GL
      static func aboutPisiffik(_: Void = ()) -> String {
        return NSLocalizedString("aboutPisiffik", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Add New Address
      /// 
      /// Locales: en, da, da-GL
      static func addNewAddress(_: Void = ()) -> String {
        return NSLocalizedString("addNewAddress", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Add New Card
      /// 
      /// Locales: en, da, da-GL
      static func addNewCard(_: Void = ()) -> String {
        return NSLocalizedString("addNewCard", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Add To Cart
      /// 
      /// Locales: en, da, da-GL
      static func addToCart(_: Void = ()) -> String {
        return NSLocalizedString("addToCart", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Add To Shopping List
      /// 
      /// Locales: en, da, da-GL
      static func addToShoppingList(_: Void = ()) -> String {
        return NSLocalizedString("addToShoppingList", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Add a card to enjoy a seamless payments experience
      /// 
      /// Locales: en, da, da-GL
      static func addACardToEnjoyASeamlessPaymentsExperience(_: Void = ()) -> String {
        return NSLocalizedString("addACardToEnjoyASeamlessPaymentsExperience", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Additional Addresses
      /// 
      /// Locales: en, da, da-GL
      static func additionalAddresses(_: Void = ()) -> String {
        return NSLocalizedString("additionalAddresses", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Address
      /// 
      /// Locales: en, da, da-GL
      static func address(_: Void = ()) -> String {
        return NSLocalizedString("address", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Alert
      /// 
      /// Locales: en, da, da-GL
      static func alert(_: Void = ()) -> String {
        return NSLocalizedString("alert", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: All
      /// 
      /// Locales: en, da, da-GL
      static func all(_: Void = ()) -> String {
        return NSLocalizedString("all", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: All Offers
      /// 
      /// Locales: en, da, da-GL
      static func allOffers(_: Void = ()) -> String {
        return NSLocalizedString("allOffers", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: All Purchases
      /// 
      /// Locales: en, da, da-GL
      static func allPurchases(_: Void = ()) -> String {
        return NSLocalizedString("allPurchases", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Already a member? Login
      /// 
      /// Locales: en, da, da-GL
      static func alreadyAMemberLogin(_: Void = ()) -> String {
        return NSLocalizedString("alreadyAMemberLogin", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Amount
      /// 
      /// Locales: en, da, da-GL
      static func amount(_: Void = ()) -> String {
        return NSLocalizedString("amount", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Apply
      /// 
      /// Locales: en, da, da-GL
      static func apply(_: Void = ()) -> String {
        return NSLocalizedString("apply", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Are you sure you want to cancel this order?
      /// 
      /// Locales: en, da, da-GL
      static func areYouSureYouWantToCancelThisOrder(_: Void = ()) -> String {
        return NSLocalizedString("areYouSureYouWantToCancelThisOrder", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Are you sure you want to delete this Address?
      /// 
      /// Locales: en, da, da-GL
      static func areYouSureYouWantToDeleteThisAddress(_: Void = ()) -> String {
        return NSLocalizedString("areYouSureYouWantToDeleteThisAddress", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Attach files
      /// 
      /// Locales: en, da, da-GL
      static func attachFile(_: Void = ()) -> String {
        return NSLocalizedString("attachFile", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Attachments
      /// 
      /// Locales: en, da, da-GL
      static func attacments(_: Void = ()) -> String {
        return NSLocalizedString("attacments", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Available Points
      /// 
      /// Locales: en, da, da-GL
      static func availablePoints(_: Void = ()) -> String {
        return NSLocalizedString("availablePoints", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Available at Stores
      /// 
      /// Locales: en, da, da-GL
      static func availableAtStores(_: Void = ()) -> String {
        return NSLocalizedString("availableAtStores", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Bought in Pisiffik Store
      /// 
      /// Locales: en, da, da-GL
      static func boughtInPisiffikStore(_: Void = ()) -> String {
        return NSLocalizedString("boughtInPisiffikStore", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Bought in Pisiffik Webshop
      /// 
      /// Locales: en, da, da-GL
      static func boughtInPisiffikWebshop(_: Void = ()) -> String {
        return NSLocalizedString("boughtInPisiffikWebshop", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Breakfast
      /// 
      /// Locales: en, da, da-GL
      static func breakfast(_: Void = ()) -> String {
        return NSLocalizedString("breakfast", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: By
      /// 
      /// Locales: en, da, da-GL
      static func by(_: Void = ()) -> String {
        return NSLocalizedString("by", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: By sign in you agree to Pisiffik:
      /// 
      /// Locales: en, da, da-GL
      static func bySignInYouAgreeToPisiffik(_: Void = ()) -> String {
        return NSLocalizedString("bySignInYouAgreeToPisiffik", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: By sign up you agree to Pisiffik:
      /// 
      /// Locales: en, da, da-GL
      static func bySignUpYouAgreeToPisiffik(_: Void = ()) -> String {
        return NSLocalizedString("bySignUpYouAgreeToPisiffik", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: CVV
      /// 
      /// Locales: en, da, da-GL
      static func cvv(_: Void = ()) -> String {
        return NSLocalizedString("cvv", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Camera permission is needed
      /// 
      /// Locales: en, da, da-GL
      static func cameraPermissionNeeded(_: Void = ()) -> String {
        return NSLocalizedString("cameraPermissionNeeded", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Campaign Products
      /// 
      /// Locales: en, da, da-GL
      static func campaignProducts(_: Void = ()) -> String {
        return NSLocalizedString("campaignProducts", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Cancel
      /// 
      /// Locales: en, da, da-GL
      static func cancel(_: Void = ()) -> String {
        return NSLocalizedString("cancel", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Cancel
      /// 
      /// Locales: en, da, da-GL
      static func commonCancel(_: Void = ()) -> String {
        return NSLocalizedString("commonCancel", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Cancel Order
      /// 
      /// Locales: en, da, da-GL
      static func cancelOrder(_: Void = ()) -> String {
        return NSLocalizedString("cancelOrder", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Cancellation Request
      /// 
      /// Locales: en, da, da-GL
      static func cancellationRequest(_: Void = ()) -> String {
        return NSLocalizedString("cancellationRequest", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Card Number
      /// 
      /// Locales: en, da, da-GL
      static func cardNumber(_: Void = ()) -> String {
        return NSLocalizedString("cardNumber", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Card no
      /// 
      /// Locales: en, da, da-GL
      static func cardNo(_: Void = ()) -> String {
        return NSLocalizedString("cardNo", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Cash On Delivery
      /// 
      /// Locales: en, da, da-GL
      static func cashOnDelivery(_: Void = ()) -> String {
        return NSLocalizedString("cashOnDelivery", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Categories
      /// 
      /// Locales: en, da, da-GL
      static func categories(_: Void = ()) -> String {
        return NSLocalizedString("categories", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Checkout
      /// 
      /// Locales: en, da, da-GL
      static func checkout(_: Void = ()) -> String {
        return NSLocalizedString("checkout", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Checkout to earn
      /// 
      /// Locales: en, da, da-GL
      static func checkoutToEarn(_: Void = ()) -> String {
        return NSLocalizedString("checkoutToEarn", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: City
      /// 
      /// Locales: en, da, da-GL
      static func city(_: Void = ()) -> String {
        return NSLocalizedString("city", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Click here
      /// 
      /// Locales: en, da, da-GL
      static func clickHere(_: Void = ()) -> String {
        return NSLocalizedString("clickHere", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Closed
      /// 
      /// Locales: en, da, da-GL
      static func closed(_: Void = ()) -> String {
        return NSLocalizedString("closed", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Concepts
      /// 
      /// Locales: en, da, da-GL
      static func concept(_: Void = ()) -> String {
        return NSLocalizedString("concept", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Confirm Cancellation Request
      /// 
      /// Locales: en, da, da-GL
      static func confirmCancellationRequest(_: Void = ()) -> String {
        return NSLocalizedString("confirmCancellationRequest", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Confirm Password
      /// 
      /// Locales: en, da, da-GL
      static func confirmPassword(_: Void = ()) -> String {
        return NSLocalizedString("confirmPassword", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Confirm password must required
      /// 
      /// Locales: en, da, da-GL
      static func confirmPasswordMustRequired(_: Void = ()) -> String {
        return NSLocalizedString("confirmPasswordMustRequired", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Confirm password should be minimum of 6 characters
      /// 
      /// Locales: en, da, da-GL
      static func confirmPasswordShouldBe6Characters(_: Void = ()) -> String {
        return NSLocalizedString("confirmPasswordShouldBe6Characters", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Contact Us
      /// 
      /// Locales: en, da, da-GL
      static func contactUs(_: Void = ()) -> String {
        return NSLocalizedString("contactUs", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Contact to customer service center?
      /// 
      /// Locales: en, da, da-GL
      static func contactToCustomerServiceCenter(_: Void = ()) -> String {
        return NSLocalizedString("contactToCustomerServiceCenter", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Continue
      /// 
      /// Locales: en, da, da-GL
      static func `continue`(_: Void = ()) -> String {
        return NSLocalizedString("continue", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Country
      /// 
      /// Locales: en, da, da-GL
      static func country(_: Void = ()) -> String {
        return NSLocalizedString("country", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Course of action
      /// 
      /// Locales: en, da, da-GL
      static func courseOfAction(_: Void = ()) -> String {
        return NSLocalizedString("courseOfAction", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Credit/Dabit Card
      /// 
      /// Locales: en, da, da-GL
      static func creditOrDabitCard(_: Void = ()) -> String {
        return NSLocalizedString("creditOrDabitCard", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Current campaigns
      /// 
      /// Locales: en, da, da-GL
      static func currentCampaigns(_: Void = ()) -> String {
        return NSLocalizedString("currentCampaigns", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Current offers
      /// 
      /// Locales: en, da, da-GL
      static func currentOffers(_: Void = ()) -> String {
        return NSLocalizedString("currentOffers", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Customer Service
      /// 
      /// Locales: en, da, da-GL
      static func customerService(_: Void = ()) -> String {
        return NSLocalizedString("customerService", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Danish
      /// 
      /// Locales: en, da, da-GL
      static func danish(_: Void = ()) -> String {
        return NSLocalizedString("danish", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Date
      /// 
      /// Locales: en, da, da-GL
      static func date(_: Void = ()) -> String {
        return NSLocalizedString("date", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Date Of Birth
      /// 
      /// Locales: en, da, da-GL
      static func dateOfBirth(_: Void = ()) -> String {
        return NSLocalizedString("dateOfBirth", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Days
      /// 
      /// Locales: en, da, da-GL
      static func days(_: Void = ()) -> String {
        return NSLocalizedString("days", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Default Address
      /// 
      /// Locales: en, da, da-GL
      static func defaultAddress(_: Void = ()) -> String {
        return NSLocalizedString("defaultAddress", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Delete Address
      /// 
      /// Locales: en, da, da-GL
      static func deleteAddress(_: Void = ()) -> String {
        return NSLocalizedString("deleteAddress", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Delivered
      /// 
      /// Locales: en, da, da-GL
      static func delivered(_: Void = ()) -> String {
        return NSLocalizedString("delivered", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Delivery
      /// 
      /// Locales: en, da, da-GL
      static func delivery(_: Void = ()) -> String {
        return NSLocalizedString("delivery", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Delivery Address
      /// 
      /// Locales: en, da, da-GL
      static func deliveryAddress(_: Void = ()) -> String {
        return NSLocalizedString("deliveryAddress", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Delivery Fee
      /// 
      /// Locales: en, da, da-GL
      static func deliveryFee(_: Void = ()) -> String {
        return NSLocalizedString("deliveryFee", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Delivery to
      /// 
      /// Locales: en, da, da-GL
      static func deliveryTo(_: Void = ()) -> String {
        return NSLocalizedString("deliveryTo", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Description
      /// 
      /// Locales: en, da, da-GL
      static func description(_: Void = ()) -> String {
        return NSLocalizedString("description", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Details
      /// 
      /// Locales: en, da, da-GL
      static func details(_: Void = ()) -> String {
        return NSLocalizedString("details", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Device type is required
      /// 
      /// Locales: en, da, da-GL
      static func deviceTypeRequired(_: Void = ()) -> String {
        return NSLocalizedString("deviceTypeRequired", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Didn’t get a code?
      /// 
      /// Locales: en, da, da-GL
      static func didNotGetACode(_: Void = ()) -> String {
        return NSLocalizedString("didNotGetACode", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Dinner
      /// 
      /// Locales: en, da, da-GL
      static func dinner(_: Void = ()) -> String {
        return NSLocalizedString("dinner", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Direction
      /// 
      /// Locales: en, da, da-GL
      static func direction(_: Void = ()) -> String {
        return NSLocalizedString("direction", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Document
      /// 
      /// Locales: en, da, da-GL
      static func document(_: Void = ()) -> String {
        return NSLocalizedString("document", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Done
      /// 
      /// Locales: en, da, da-GL
      static func done(_: Void = ()) -> String {
        return NSLocalizedString("done", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: During Treatment
      /// 
      /// Locales: en, da, da-GL
      static func duringTreatment(_: Void = ()) -> String {
        return NSLocalizedString("duringTreatment", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: E-mail
      /// 
      /// Locales: en, da, da-GL
      static func email(_: Void = ()) -> String {
        return NSLocalizedString("email", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Earned
      /// 
      /// Locales: en, da, da-GL
      static func earned(_: Void = ()) -> String {
        return NSLocalizedString("earned", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Earned Points
      /// 
      /// Locales: en, da, da-GL
      static func earnedPoints(_: Void = ()) -> String {
        return NSLocalizedString("earnedPoints", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Edit Address
      /// 
      /// Locales: en, da, da-GL
      static func editAddress(_: Void = ()) -> String {
        return NSLocalizedString("editAddress", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Electronics
      /// 
      /// Locales: en, da, da-GL
      static func electronics(_: Void = ()) -> String {
        return NSLocalizedString("electronics", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Email required
      /// 
      /// Locales: en, da, da-GL
      static func emailRequired(_: Void = ()) -> String {
        return NSLocalizedString("emailRequired", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: English
      /// 
      /// Locales: en, da, da-GL
      static func english(_: Void = ()) -> String {
        return NSLocalizedString("english", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Enter Verification Code
      /// 
      /// Locales: en, da, da-GL
      static func enterVerificationCode(_: Void = ()) -> String {
        return NSLocalizedString("enterVerificationCode", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Enter valid e-mail
      /// 
      /// Locales: en, da, da-GL
      static func enterValidEmail(_: Void = ()) -> String {
        return NSLocalizedString("enterValidEmail", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Enter valid full name
      /// 
      /// Locales: en, da, da-GL
      static func enterValidFullName(_: Void = ()) -> String {
        return NSLocalizedString("enterValidFullName", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Enter valid full name without numbers.
      /// 
      /// Locales: en, da, da-GL
      static func enterValidFullNameWithoutNumber(_: Void = ()) -> String {
        return NSLocalizedString("enterValidFullNameWithoutNumber", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Enter valid number
      /// 
      /// Locales: en, da, da-GL
      static func enterValidNumber(_: Void = ()) -> String {
        return NSLocalizedString("enterValidNumber", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Enter your mobile number to reset password
      /// 
      /// Locales: en, da, da-GL
      static func enterYourMobileNumberToResetPassword(_: Void = ()) -> String {
        return NSLocalizedString("enterYourMobileNumberToResetPassword", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Error
      /// 
      /// Locales: en, da, da-GL
      static func commonError(_: Void = ()) -> String {
        return NSLocalizedString("commonError", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Error
      /// 
      /// Locales: en, da, da-GL
      static func error(_: Void = ()) -> String {
        return NSLocalizedString("error", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Event Details
      /// 
      /// Locales: en, da, da-GL
      static func eventDetails(_: Void = ()) -> String {
        return NSLocalizedString("eventDetails", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Events
      /// 
      /// Locales: en, da, da-GL
      static func events(_: Void = ()) -> String {
        return NSLocalizedString("events", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Events / Activities
      /// 
      /// Locales: en, da, da-GL
      static func eventActivities(_: Void = ()) -> String {
        return NSLocalizedString("eventActivities", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Expire
      /// 
      /// Locales: en, da, da-GL
      static func expire(_: Void = ()) -> String {
        return NSLocalizedString("expire", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Expire In
      /// 
      /// Locales: en, da, da-GL
      static func expireIn(_: Void = ()) -> String {
        return NSLocalizedString("expireIn", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Expired
      /// 
      /// Locales: en, da, da-GL
      static func expired(_: Void = ()) -> String {
        return NSLocalizedString("expired", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Expires on
      /// 
      /// Locales: en, da, da-GL
      static func expiresOn(_: Void = ()) -> String {
        return NSLocalizedString("expiresOn", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Expiry Month
      /// 
      /// Locales: en, da, da-GL
      static func expiryMonth(_: Void = ()) -> String {
        return NSLocalizedString("expiryMonth", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Expiry Year
      /// 
      /// Locales: en, da, da-GL
      static func expiryYear(_: Void = ()) -> String {
        return NSLocalizedString("expiryYear", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: FAQ
      /// 
      /// Locales: en, da, da-GL
      static func faq(_: Void = ()) -> String {
        return NSLocalizedString("faq", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Favorites
      /// 
      /// Locales: en, da, da-GL
      static func favorites(_: Void = ()) -> String {
        return NSLocalizedString("favorites", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Fcm token is required
      /// 
      /// Locales: en, da, da-GL
      static func fcmTokenRequired(_: Void = ()) -> String {
        return NSLocalizedString("fcmTokenRequired", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Female
      /// 
      /// Locales: en, da, da-GL
      static func female(_: Void = ()) -> String {
        return NSLocalizedString("female", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Find Store
      /// 
      /// Locales: en, da, da-GL
      static func findStore(_: Void = ()) -> String {
        return NSLocalizedString("findStore", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: For more information
      /// 
      /// Locales: en, da, da-GL
      static func forMoreInformation(_: Void = ()) -> String {
        return NSLocalizedString("forMoreInformation", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Forgot Password?
      /// 
      /// Locales: en, da, da-GL
      static func forgot_Password(_: Void = ()) -> String {
        return NSLocalizedString("forgot_Password", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Forgot password
      /// 
      /// Locales: en, da, da-GL
      static func forgotPassword(_: Void = ()) -> String {
        return NSLocalizedString("forgotPassword", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Free
      /// 
      /// Locales: en, da, da-GL
      static func free(_: Void = ()) -> String {
        return NSLocalizedString("free", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: From Camera/Library
      /// 
      /// Locales: en, da, da-GL
      static func fromGallery(_: Void = ()) -> String {
        return NSLocalizedString("fromGallery", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: From Documents
      /// 
      /// Locales: en, da, da-GL
      static func fromDocuments(_: Void = ()) -> String {
        return NSLocalizedString("fromDocuments", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Full Name
      /// 
      /// Locales: en, da, da-GL
      static func fullName(_: Void = ()) -> String {
        return NSLocalizedString("fullName", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Full name required
      /// 
      /// Locales: en, da, da-GL
      static func fullNameRequired(_: Void = ()) -> String {
        return NSLocalizedString("fullNameRequired", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Full name should be minimum lenght of 2 and maximum lenght of 30
      /// 
      /// Locales: en, da, da-GL
      static func fullNameLenghtError(_: Void = ()) -> String {
        return NSLocalizedString("fullNameLenghtError", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: GDPR
      /// 
      /// Locales: en, da, da-GL
      static func gdpr(_: Void = ()) -> String {
        return NSLocalizedString("gdpr", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Gender
      /// 
      /// Locales: en, da, da-GL
      static func gender(_: Void = ()) -> String {
        return NSLocalizedString("gender", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Get Help With Scan
      /// 
      /// Locales: en, da, da-GL
      static func getHelpWithScan(_: Void = ()) -> String {
        return NSLocalizedString("getHelpWithScan", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Go To Checkout
      /// 
      /// Locales: en, da, da-GL
      static func goToCheckout(_: Void = ()) -> String {
        return NSLocalizedString("goToCheckout", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Greenland
      /// 
      /// Locales: en, da, da-GL
      static func greenland(_: Void = ()) -> String {
        return NSLocalizedString("greenland", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Hardware
      /// 
      /// Locales: en, da, da-GL
      static func hardware(_: Void = ()) -> String {
        return NSLocalizedString("hardware", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Hi
      /// 
      /// Locales: en, da, da-GL
      static func hi(_: Void = ()) -> String {
        return NSLocalizedString("hi", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Home
      /// 
      /// Locales: en, da, da-GL
      static func home(_: Void = ()) -> String {
        return NSLocalizedString("home", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: In stock
      /// 
      /// Locales: en, da, da-GL
      static func inStock(_: Void = ()) -> String {
        return NSLocalizedString("inStock", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Inbox
      /// 
      /// Locales: en, da, da-GL
      static func inbox(_: Void = ()) -> String {
        return NSLocalizedString("inbox", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Info
      /// 
      /// Locales: en, da, da-GL
      static func info(_: Void = ()) -> String {
        return NSLocalizedString("info", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Ingrediants
      /// 
      /// Locales: en, da, da-GL
      static func ingrediants(_: Void = ()) -> String {
        return NSLocalizedString("ingrediants", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Instructions
      /// 
      /// Locales: en, da, da-GL
      static func instructions(_: Void = ()) -> String {
        return NSLocalizedString("instructions", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Interior design
      /// 
      /// Locales: en, da, da-GL
      static func interiorDesign(_: Void = ()) -> String {
        return NSLocalizedString("interiorDesign", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Items
      /// 
      /// Locales: en, da, da-GL
      static func items(_: Void = ()) -> String {
        return NSLocalizedString("items", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Join Pisiffik
      /// 
      /// Locales: en, da, da-GL
      static func joinPisiffik(_: Void = ()) -> String {
        return NSLocalizedString("joinPisiffik", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Last 6 Months
      /// 
      /// Locales: en, da, da-GL
      static func lastSixMonths(_: Void = ()) -> String {
        return NSLocalizedString("lastSixMonths", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Local
      /// 
      /// Locales: en, da, da-GL
      static func local(_: Void = ()) -> String {
        return NSLocalizedString("local", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Local offers
      /// 
      /// Locales: en, da, da-GL
      static func localOffers(_: Void = ()) -> String {
        return NSLocalizedString("localOffers", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Login
      /// 
      /// Locales: en, da, da-GL
      static func login(_: Void = ()) -> String {
        return NSLocalizedString("login", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Login Your Account
      /// 
      /// Locales: en, da, da-GL
      static func loginYourAccount(_: Void = ()) -> String {
        return NSLocalizedString("loginYourAccount", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Logout
      /// 
      /// Locales: en, da, da-GL
      static func logout(_: Void = ()) -> String {
        return NSLocalizedString("logout", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Loyalty and discounts
      /// 
      /// Locales: en, da, da-GL
      static func loyaltyAndDiscounts(_: Void = ()) -> String {
        return NSLocalizedString("loyaltyAndDiscounts", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Lunch
      /// 
      /// Locales: en, da, da-GL
      static func lunch(_: Void = ()) -> String {
        return NSLocalizedString("lunch", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: MB
      /// 
      /// Locales: en, da, da-GL
      static func mb(_: Void = ()) -> String {
        return NSLocalizedString("mb", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Make sure wifi or cellular data is turned on and then try again
      /// 
      /// Locales: en, da, da-GL
      static func makeSureWifiOrCellularDataIsTurnedOnAndThenTrySgain(_: Void = ()) -> String {
        return NSLocalizedString("makeSureWifiOrCellularDataIsTurnedOnAndThenTrySgain", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Male
      /// 
      /// Locales: en, da, da-GL
      static func male(_: Void = ()) -> String {
        return NSLocalizedString("male", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Membership
      /// 
      /// Locales: en, da, da-GL
      static func membership(_: Void = ()) -> String {
        return NSLocalizedString("membership", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Membership offers
      /// 
      /// Locales: en, da, da-GL
      static func membershipOffers(_: Void = ()) -> String {
        return NSLocalizedString("membershipOffers", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Message required
      /// 
      /// Locales: en, da, da-GL
      static func messageRequired(_: Void = ()) -> String {
        return NSLocalizedString("messageRequired", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Mobile Number
      /// 
      /// Locales: en, da, da-GL
      static func mobileNumber(_: Void = ()) -> String {
        return NSLocalizedString("mobileNumber", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Mobile number required
      /// 
      /// Locales: en, da, da-GL
      static func mobileNumberRequired(_: Void = ()) -> String {
        return NSLocalizedString("mobileNumberRequired", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: More
      /// 
      /// Locales: en, da, da-GL
      static func more(_: Void = ()) -> String {
        return NSLocalizedString("more", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Must be at least 6 characters.
      /// 
      /// Locales: en, da, da-GL
      static func mustBeAtLeastSixCharacters(_: Void = ()) -> String {
        return NSLocalizedString("mustBeAtLeastSixCharacters", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: My Cart
      /// 
      /// Locales: en, da, da-GL
      static func myCart(_: Void = ()) -> String {
        return NSLocalizedString("myCart", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: My Membership Card
      /// 
      /// Locales: en, da, da-GL
      static func myMembershipCard(_: Void = ()) -> String {
        return NSLocalizedString("myMembershipCard", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: My Shopping List
      /// 
      /// Locales: en, da, da-GL
      static func myShoppingList(_: Void = ()) -> String {
        return NSLocalizedString("myShoppingList", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Name on Card
      /// 
      /// Locales: en, da, da-GL
      static func nameOnCard(_: Void = ()) -> String {
        return NSLocalizedString("nameOnCard", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: New Password
      /// 
      /// Locales: en, da, da-GL
      static func newPassword(_: Void = ()) -> String {
        return NSLocalizedString("newPassword", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: New email is required.
      /// 
      /// Locales: en, da, da-GL
      static func newEmailIsRequired(_: Void = ()) -> String {
        return NSLocalizedString("newEmailIsRequired", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: New phone number is required.
      /// 
      /// Locales: en, da, da-GL
      static func newPhoneIsRequired(_: Void = ()) -> String {
        return NSLocalizedString("newPhoneIsRequired", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: News
      /// 
      /// Locales: en, da, da-GL
      static func news(_: Void = ()) -> String {
        return NSLocalizedString("news", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Next
      /// 
      /// Locales: en, da, da-GL
      static func next(_: Void = ()) -> String {
        return NSLocalizedString("next", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: No
      /// 
      /// Locales: en, da, da-GL
      static func no(_: Void = ()) -> String {
        return NSLocalizedString("no", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: No cards added
      /// 
      /// Locales: en, da, da-GL
      static func noCardsAdded(_: Void = ()) -> String {
        return NSLocalizedString("noCardsAdded", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Not register yet? Create an account
      /// 
      /// Locales: en, da, da-GL
      static func notRegisterYetCreateAnAccount(_: Void = ()) -> String {
        return NSLocalizedString("notRegisterYetCreateAnAccount", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Notifications
      /// 
      /// Locales: en, da, da-GL
      static func notifications(_: Void = ()) -> String {
        return NSLocalizedString("notifications", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: OK
      /// 
      /// Locales: en, da, da-GL
      static func ok(_: Void = ()) -> String {
        return NSLocalizedString("ok", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: OR
      /// 
      /// Locales: en, da, da-GL
      static func or(_: Void = ()) -> String {
        return NSLocalizedString("or", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Offer newspapers
      /// 
      /// Locales: en, da, da-GL
      static func offerNewspapers(_: Void = ()) -> String {
        return NSLocalizedString("offerNewspapers", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Offers
      /// 
      /// Locales: en, da, da-GL
      static func offers(_: Void = ()) -> String {
        return NSLocalizedString("offers", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Offers and Benefits
      /// 
      /// Locales: en, da, da-GL
      static func offersAndBenefits(_: Void = ()) -> String {
        return NSLocalizedString("offersAndBenefits", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Office
      /// 
      /// Locales: en, da, da-GL
      static func office(_: Void = ()) -> String {
        return NSLocalizedString("office", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Ok
      /// 
      /// Locales: en, da, da-GL
      static func commonOk(_: Void = ()) -> String {
        return NSLocalizedString("commonOk", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Ok
      /// 
      /// Locales: en, da, da-GL
      static func okay(_: Void = ()) -> String {
        return NSLocalizedString("okay", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Online
      /// 
      /// Locales: en, da, da-GL
      static func online(_: Void = ()) -> String {
        return NSLocalizedString("online", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Oops, store direction not available!
      /// 
      /// Locales: en, da, da-GL
      static func oopsStoreDirectionNotAvailable(_: Void = ()) -> String {
        return NSLocalizedString("oopsStoreDirectionNotAvailable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Oops. No internet connection
      /// 
      /// Locales: en, da, da-GL
      static func oopsNoInternetConnection(_: Void = ()) -> String {
        return NSLocalizedString("oopsNoInternetConnection", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Open
      /// 
      /// Locales: en, da, da-GL
      static func `open`(_: Void = ()) -> String {
        return NSLocalizedString("open", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Opening Hours
      /// 
      /// Locales: en, da, da-GL
      static func openingHours(_: Void = ()) -> String {
        return NSLocalizedString("openingHours", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Order
      /// 
      /// Locales: en, da, da-GL
      static func order(_: Void = ()) -> String {
        return NSLocalizedString("order", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Order Date
      /// 
      /// Locales: en, da, da-GL
      static func orderDate(_: Void = ()) -> String {
        return NSLocalizedString("orderDate", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Order No
      /// 
      /// Locales: en, da, da-GL
      static func orderNo(_: Void = ()) -> String {
        return NSLocalizedString("orderNo", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Order info
      /// 
      /// Locales: en, da, da-GL
      static func orderInfo(_: Void = ()) -> String {
        return NSLocalizedString("orderInfo", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Other
      /// 
      /// Locales: en, da, da-GL
      static func other(_: Void = ()) -> String {
        return NSLocalizedString("other", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Other Items
      /// 
      /// Locales: en, da, da-GL
      static func otherItems(_: Void = ()) -> String {
        return NSLocalizedString("otherItems", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Other queries
      /// 
      /// Locales: en, da, da-GL
      static func otherQueries(_: Void = ()) -> String {
        return NSLocalizedString("otherQueries", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Outdoor
      /// 
      /// Locales: en, da, da-GL
      static func outdoor(_: Void = ()) -> String {
        return NSLocalizedString("outdoor", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Package number
      /// 
      /// Locales: en, da, da-GL
      static func packageNumber(_: Void = ()) -> String {
        return NSLocalizedString("packageNumber", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Password
      /// 
      /// Locales: en, da, da-GL
      static func password(_: Void = ()) -> String {
        return NSLocalizedString("password", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Password does not match
      /// 
      /// Locales: en, da, da-GL
      static func bothPasswordMustBeMatched(_: Void = ()) -> String {
        return NSLocalizedString("bothPasswordMustBeMatched", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Password must required
      /// 
      /// Locales: en, da, da-GL
      static func passwordMustRequired(_: Void = ()) -> String {
        return NSLocalizedString("passwordMustRequired", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Password should be minimum of 6 characters
      /// 
      /// Locales: en, da, da-GL
      static func passwordShouldBe6Characters(_: Void = ()) -> String {
        return NSLocalizedString("passwordShouldBe6Characters", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Payment
      /// 
      /// Locales: en, da, da-GL
      static func payment(_: Void = ()) -> String {
        return NSLocalizedString("payment", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Payment Method
      /// 
      /// Locales: en, da, da-GL
      static func paymentMethod(_: Void = ()) -> String {
        return NSLocalizedString("paymentMethod", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Pending
      /// 
      /// Locales: en, da, da-GL
      static func pending(_: Void = ()) -> String {
        return NSLocalizedString("pending", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Person
      /// 
      /// Locales: en, da, da-GL
      static func person(_: Void = ()) -> String {
        return NSLocalizedString("person", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Personal
      /// 
      /// Locales: en, da, da-GL
      static func personal(_: Void = ()) -> String {
        return NSLocalizedString("personal", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Personal offers
      /// 
      /// Locales: en, da, da-GL
      static func personalOffers(_: Void = ()) -> String {
        return NSLocalizedString("personalOffers", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Photo
      /// 
      /// Locales: en, da, da-GL
      static func photo(_: Void = ()) -> String {
        return NSLocalizedString("photo", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Pisiffik Benefits
      /// 
      /// Locales: en, da, da-GL
      static func pisiffikBenefits(_: Void = ()) -> String {
        return NSLocalizedString("pisiffikBenefits", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Pisiffik Items
      /// 
      /// Locales: en, da, da-GL
      static func pisiffikItems(_: Void = ()) -> String {
        return NSLocalizedString("pisiffikItems", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Pisiffik representative will respond to your query soon.
      /// 
      /// Locales: en, da, da-GL
      static func pisiffikRepresentativeWillRespondToYourQuerySoon(_: Void = ()) -> String {
        return NSLocalizedString("pisiffikRepresentativeWillRespondToYourQuerySoon", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please Select Your Language
      /// 
      /// Locales: en, da, da-GL
      static func pleaseSelectYourLanguage(_: Void = ()) -> String {
        return NSLocalizedString("pleaseSelectYourLanguage", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please enable access to calender to add events to your calender.
      /// 
      /// Locales: en, da, da-GL
      static func enableAccessToCalenderMessage(_: Void = ()) -> String {
        return NSLocalizedString("enableAccessToCalenderMessage", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please enable your location to get the direction of store.
      /// 
      /// Locales: en, da, da-GL
      static func enableLocationStoreDirectionAlertMessage(_: Void = ()) -> String {
        return NSLocalizedString("enableLocationStoreDirectionAlertMessage", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please enable your location to get the distance of store from your current location.
      /// 
      /// Locales: en, da, da-GL
      static func enableLocationStoreDistanceAlertMessage(_: Void = ()) -> String {
        return NSLocalizedString("enableLocationStoreDistanceAlertMessage", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please enter valid OTP code for verification
      /// 
      /// Locales: en, da, da-GL
      static func pleaseEnterValidOtpCodeForVerification(_: Void = ()) -> String {
        return NSLocalizedString("pleaseEnterValidOtpCodeForVerification", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please enter valid new email.
      /// 
      /// Locales: en, da, da-GL
      static func newEmailIsInValid(_: Void = ()) -> String {
        return NSLocalizedString("newEmailIsInValid", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please enter valid new phone number.
      /// 
      /// Locales: en, da, da-GL
      static func newPhoneIsInValid(_: Void = ()) -> String {
        return NSLocalizedString("newPhoneIsInValid", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please type phone number or email address.
      /// 
      /// Locales: en, da, da-GL
      static func pleaseTypePhoneNmbOrEmailError(_: Void = ()) -> String {
        return NSLocalizedString("pleaseTypePhoneNmbOrEmailError", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Points
      /// 
      /// Locales: en, da, da-GL
      static func points(_: Void = ()) -> String {
        return NSLocalizedString("points", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Points Overview
      /// 
      /// Locales: en, da, da-GL
      static func pointsOverview(_: Void = ()) -> String {
        return NSLocalizedString("pointsOverview", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Points at Pisiffik
      /// 
      /// Locales: en, da, da-GL
      static func pointsAtPisiffik(_: Void = ()) -> String {
        return NSLocalizedString("pointsAtPisiffik", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Points to be earned
      /// 
      /// Locales: en, da, da-GL
      static func pointsToBeEarned(_: Void = ()) -> String {
        return NSLocalizedString("pointsToBeEarned", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Points to be used
      /// 
      /// Locales: en, da, da-GL
      static func pointsToBeUsed(_: Void = ()) -> String {
        return NSLocalizedString("pointsToBeUsed", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Portions
      /// 
      /// Locales: en, da, da-GL
      static func portions(_: Void = ()) -> String {
        return NSLocalizedString("portions", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Preferences
      /// 
      /// Locales: en, da, da-GL
      static func preferences(_: Void = ()) -> String {
        return NSLocalizedString("preferences", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Privacy Policy
      /// 
      /// Locales: en, da, da-GL
      static func privacyPolicy(_: Void = ()) -> String {
        return NSLocalizedString("privacyPolicy", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Product
      /// 
      /// Locales: en, da, da-GL
      static func product(_: Void = ()) -> String {
        return NSLocalizedString("product", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Profile
      /// 
      /// Locales: en, da, da-GL
      static func profile(_: Void = ()) -> String {
        return NSLocalizedString("profile", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Purchase
      /// 
      /// Locales: en, da, da-GL
      static func purchase(_: Void = ()) -> String {
        return NSLocalizedString("purchase", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: QTY
      /// 
      /// Locales: en, da, da-GL
      static func qty(_: Void = ()) -> String {
        return NSLocalizedString("qty", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Quantity
      /// 
      /// Locales: en, da, da-GL
      static func quantity(_: Void = ()) -> String {
        return NSLocalizedString("quantity", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Rate Our App
      /// 
      /// Locales: en, da, da-GL
      static func rateOurApp(_: Void = ()) -> String {
        return NSLocalizedString("rateOurApp", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Re-Opened
      /// 
      /// Locales: en, da, da-GL
      static func reOpened(_: Void = ()) -> String {
        return NSLocalizedString("reOpened", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Ready for pickup
      /// 
      /// Locales: en, da, da-GL
      static func readyForPickup(_: Void = ()) -> String {
        return NSLocalizedString("readyForPickup", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Reason
      /// 
      /// Locales: en, da, da-GL
      static func reason(_: Void = ()) -> String {
        return NSLocalizedString("reason", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Reason for cancellation
      /// 
      /// Locales: en, da, da-GL
      static func reasonForCancellation(_: Void = ()) -> String {
        return NSLocalizedString("reasonForCancellation", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Rebate
      /// 
      /// Locales: en, da, da-GL
      static func rebate(_: Void = ()) -> String {
        return NSLocalizedString("rebate", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Received
      /// 
      /// Locales: en, da, da-GL
      static func received(_: Void = ()) -> String {
        return NSLocalizedString("received", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Recent
      /// 
      /// Locales: en, da, da-GL
      static func recent(_: Void = ()) -> String {
        return NSLocalizedString("recent", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Recipes
      /// 
      /// Locales: en, da, da-GL
      static func recipes(_: Void = ()) -> String {
        return NSLocalizedString("recipes", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Redeem
      /// 
      /// Locales: en, da, da-GL
      static func redeem(_: Void = ()) -> String {
        return NSLocalizedString("redeem", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Redeem Points
      /// 
      /// Locales: en, da, da-GL
      static func redeemPoints(_: Void = ()) -> String {
        return NSLocalizedString("redeemPoints", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Reedem All
      /// 
      /// Locales: en, da, da-GL
      static func reedemAll(_: Void = ()) -> String {
        return NSLocalizedString("reedemAll", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Reedem Points
      /// 
      /// Locales: en, da, da-GL
      static func reedemPoints(_: Void = ()) -> String {
        return NSLocalizedString("reedemPoints", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Remove from calender
      /// 
      /// Locales: en, da, da-GL
      static func eventRemovedToCalender(_: Void = ()) -> String {
        return NSLocalizedString("eventRemovedToCalender", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Request Sent
      /// 
      /// Locales: en, da, da-GL
      static func requestSent(_: Void = ()) -> String {
        return NSLocalizedString("requestSent", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Resend
      /// 
      /// Locales: en, da, da-GL
      static func resend(_: Void = ()) -> String {
        return NSLocalizedString("resend", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Reset Your Password
      /// 
      /// Locales: en, da, da-GL
      static func resetYourPassword(_: Void = ()) -> String {
        return NSLocalizedString("resetYourPassword", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Reset password
      /// 
      /// Locales: en, da, da-GL
      static func resetPassword(_: Void = ()) -> String {
        return NSLocalizedString("resetPassword", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Save
      /// 
      /// Locales: en, da, da-GL
      static func save(_: Void = ()) -> String {
        return NSLocalizedString("save", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Save Card
      /// 
      /// Locales: en, da, da-GL
      static func saveCard(_: Void = ()) -> String {
        return NSLocalizedString("saveCard", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Save Changes
      /// 
      /// Locales: en, da, da-GL
      static func saveChanges(_: Void = ()) -> String {
        return NSLocalizedString("saveChanges", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Scan
      /// 
      /// Locales: en, da, da-GL
      static func scan(_: Void = ()) -> String {
        return NSLocalizedString("scan", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Scan Barcode
      /// 
      /// Locales: en, da, da-GL
      static func scanBarcode(_: Void = ()) -> String {
        return NSLocalizedString("scanBarcode", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Scan Barcode and get product details, like product name, brand, pricing etc.
      /// 
      /// Locales: en, da, da-GL
      static func scanBarcodeAndGetProductDetailsLikeProductNameBrandPricing(_: Void = ()) -> String {
        return NSLocalizedString("scanBarcodeAndGetProductDetailsLikeProductNameBrandPricing", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Scanning not supported
      /// 
      /// Locales: en, da, da-GL
      static func scanningNotSupported(_: Void = ()) -> String {
        return NSLocalizedString("scanningNotSupported", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Schedule
      /// 
      /// Locales: en, da, da-GL
      static func schedule(_: Void = ()) -> String {
        return NSLocalizedString("schedule", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Search
      /// 
      /// Locales: en, da, da-GL
      static func search(_: Void = ()) -> String {
        return NSLocalizedString("search", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: See FAQ
      /// 
      /// Locales: en, da, da-GL
      static func seeFAQ(_: Void = ()) -> String {
        return NSLocalizedString("seeFAQ", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: See More
      /// 
      /// Locales: en, da, da-GL
      static func seeMore(_: Void = ()) -> String {
        return NSLocalizedString("seeMore", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: See all
      /// 
      /// Locales: en, da, da-GL
      static func seeAll(_: Void = ()) -> String {
        return NSLocalizedString("seeAll", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: See the relevant topic
      /// 
      /// Locales: en, da, da-GL
      static func seeTheRelevantTopic(_: Void = ()) -> String {
        return NSLocalizedString("seeTheRelevantTopic", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Select
      /// 
      /// Locales: en, da, da-GL
      static func select(_: Void = ()) -> String {
        return NSLocalizedString("select", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Select Date of Birth
      /// 
      /// Locales: en, da, da-GL
      static func selectDateOfBirth(_: Void = ()) -> String {
        return NSLocalizedString("selectDateOfBirth", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Select One
      /// 
      /// Locales: en, da, da-GL
      static func selectOne(_: Void = ()) -> String {
        return NSLocalizedString("selectOne", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Select products from ingredients
      /// 
      /// Locales: en, da, da-GL
      static func selectProductsFromIngredients(_: Void = ()) -> String {
        return NSLocalizedString("selectProductsFromIngredients", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Select your gender
      /// 
      /// Locales: en, da, da-GL
      static func selectYourGender(_: Void = ()) -> String {
        return NSLocalizedString("selectYourGender", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Select your reason
      /// 
      /// Locales: en, da, da-GL
      static func reasonRequired(_: Void = ()) -> String {
        return NSLocalizedString("reasonRequired", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Send
      /// 
      /// Locales: en, da, da-GL
      static func send(_: Void = ()) -> String {
        return NSLocalizedString("send", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Sent to calender
      /// 
      /// Locales: en, da, da-GL
      static func eventAddedToCalender(_: Void = ()) -> String {
        return NSLocalizedString("eventAddedToCalender", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Sent to store
      /// 
      /// Locales: en, da, da-GL
      static func sentToStore(_: Void = ()) -> String {
        return NSLocalizedString("sentToStore", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Serving
      /// 
      /// Locales: en, da, da-GL
      static func serving(_: Void = ()) -> String {
        return NSLocalizedString("serving", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Session Expired
      /// 
      /// Locales: en, da, da-GL
      static func sessionExpired(_: Void = ()) -> String {
        return NSLocalizedString("sessionExpired", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Single Purchase
      /// 
      /// Locales: en, da, da-GL
      static func singlePurchase(_: Void = ()) -> String {
        return NSLocalizedString("singlePurchase", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Slide To Order
      /// 
      /// Locales: en, da, da-GL
      static func slideToOrder(_: Void = ()) -> String {
        return NSLocalizedString("slideToOrder", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Something went wrong
      /// 
      /// Locales: en, da, da-GL
      static func somethingWentWrong(_: Void = ()) -> String {
        return NSLocalizedString("somethingWentWrong", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Something went wrong. Please try again later
      /// 
      /// Locales: en, da, da-GL
      static func errorSomethingWrong(_: Void = ()) -> String {
        return NSLocalizedString("errorSomethingWrong", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Sorry! No Item Found
      /// 
      /// Locales: en, da, da-GL
      static func sorryNoItemFound(_: Void = ()) -> String {
        return NSLocalizedString("sorryNoItemFound", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Specification
      /// 
      /// Locales: en, da, da-GL
      static func specification(_: Void = ()) -> String {
        return NSLocalizedString("specification", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: State
      /// 
      /// Locales: en, da, da-GL
      static func state(_: Void = ()) -> String {
        return NSLocalizedString("state", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Status
      /// 
      /// Locales: en, da, da-GL
      static func status(_: Void = ()) -> String {
        return NSLocalizedString("status", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Store
      /// 
      /// Locales: en, da, da-GL
      static func store(_: Void = ()) -> String {
        return NSLocalizedString("store", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Subject
      /// 
      /// Locales: en, da, da-GL
      static func subject(_: Void = ()) -> String {
        return NSLocalizedString("subject", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Subject required
      /// 
      /// Locales: en, da, da-GL
      static func subjectRequired(_: Void = ()) -> String {
        return NSLocalizedString("subjectRequired", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Success
      /// 
      /// Locales: en, da, da-GL
      static func success(_: Void = ()) -> String {
        return NSLocalizedString("success", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Terms & Conditions
      /// 
      /// Locales: en, da, da-GL
      static func termsAndConditions(_: Void = ()) -> String {
        return NSLocalizedString("termsAndConditions", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Terms of Use
      /// 
      /// Locales: en, da, da-GL
      static func termsOfUse(_: Void = ()) -> String {
        return NSLocalizedString("termsOfUse", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Thank you for contacting us.
      /// 
      /// Locales: en, da, da-GL
      static func thankYouForContactingUs(_: Void = ()) -> String {
        return NSLocalizedString("thankYouForContactingUs", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Thank you for your request to cancel this order. please leave us a note about cancellation request and we will review it as soon as possible.
      /// 
      /// Locales: en, da, da-GL
      static func cancelOrderDescription(_: Void = ()) -> String {
        return NSLocalizedString("cancelOrderDescription", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: This Month
      /// 
      /// Locales: en, da, da-GL
      static func thisMonth(_: Void = ()) -> String {
        return NSLocalizedString("thisMonth", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: This Week
      /// 
      /// Locales: en, da, da-GL
      static func thisWeek(_: Void = ()) -> String {
        return NSLocalizedString("thisWeek", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: This Year
      /// 
      /// Locales: en, da, da-GL
      static func thisYear(_: Void = ()) -> String {
        return NSLocalizedString("thisYear", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: This e-mail is already verified.
      /// 
      /// Locales: en, da, da-GL
      static func alreadyVerifiedEmail(_: Void = ()) -> String {
        return NSLocalizedString("alreadyVerifiedEmail", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: This ticket is closed by Admin.
      /// 
      /// Locales: en, da, da-GL
      static func ticketClosedError(_: Void = ()) -> String {
        return NSLocalizedString("ticketClosedError", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Ticket
      /// 
      /// Locales: en, da, da-GL
      static func ticket(_: Void = ()) -> String {
        return NSLocalizedString("ticket", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Tickets
      /// 
      /// Locales: en, da, da-GL
      static func tickets(_: Void = ()) -> String {
        return NSLocalizedString("tickets", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Time
      /// 
      /// Locales: en, da, da-GL
      static func time(_: Void = ()) -> String {
        return NSLocalizedString("time", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Tip
      /// 
      /// Locales: en, da, da-GL
      static func tip(_: Void = ()) -> String {
        return NSLocalizedString("tip", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Total (Incl. VAT)
      /// 
      /// Locales: en, da, da-GL
      static func totalVAT(_: Void = ()) -> String {
        return NSLocalizedString("totalVAT", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Total Amount Due
      /// 
      /// Locales: en, da, da-GL
      static func totalAmountDue(_: Void = ()) -> String {
        return NSLocalizedString("totalAmountDue", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Toys & Leisure
      /// 
      /// Locales: en, da, da-GL
      static func toysLeisure(_: Void = ()) -> String {
        return NSLocalizedString("toysLeisure", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Try Again
      /// 
      /// Locales: en, da, da-GL
      static func tryAgain(_: Void = ()) -> String {
        return NSLocalizedString("tryAgain", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Type
      /// 
      /// Locales: en, da, da-GL
      static func type(_: Void = ()) -> String {
        return NSLocalizedString("type", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Update
      /// 
      /// Locales: en, da, da-GL
      static func update(_: Void = ()) -> String {
        return NSLocalizedString("update", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Valid from
      /// 
      /// Locales: en, da, da-GL
      static func validFrom(_: Void = ()) -> String {
        return NSLocalizedString("validFrom", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Verified
      /// 
      /// Locales: en, da, da-GL
      static func verified(_: Void = ()) -> String {
        return NSLocalizedString("verified", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Verify
      /// 
      /// Locales: en, da, da-GL
      static func verify(_: Void = ()) -> String {
        return NSLocalizedString("verify", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Verify E-mail
      /// 
      /// Locales: en, da, da-GL
      static func verifyEmail(_: Void = ()) -> String {
        return NSLocalizedString("verifyEmail", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Verify Phone
      /// 
      /// Locales: en, da, da-GL
      static func verifyPhone(_: Void = ()) -> String {
        return NSLocalizedString("verifyPhone", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Verifying
      /// 
      /// Locales: en, da, da-GL
      static func verifying(_: Void = ()) -> String {
        return NSLocalizedString("verifying", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: View Detail
      /// 
      /// Locales: en, da, da-GL
      static func viewDetail(_: Void = ()) -> String {
        return NSLocalizedString("viewDetail", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: View file
      /// 
      /// Locales: en, da, da-GL
      static func viewFile(_: Void = ()) -> String {
        return NSLocalizedString("viewFile", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Vinnit
      /// 
      /// Locales: en, da, da-GL
      static func vinnit(_: Void = ()) -> String {
        return NSLocalizedString("vinnit", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: We have sent to your e-mail
      /// 
      /// Locales: en, da, da-GL
      static func weHaveSentToYourEmail(_: Void = ()) -> String {
        return NSLocalizedString("weHaveSentToYourEmail", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: We have sent to your email address
      /// 
      /// Locales: en, da, da-GL
      static func weHaveSentToYourEmailAddress(_: Void = ()) -> String {
        return NSLocalizedString("weHaveSentToYourEmailAddress", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: We have sent to your mobile number
      /// 
      /// Locales: en, da, da-GL
      static func weHaveSentToYourMobileNumber(_: Void = ()) -> String {
        return NSLocalizedString("weHaveSentToYourMobileNumber", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Women's Clothing
      /// 
      /// Locales: en, da, da-GL
      static func womenClothing(_: Void = ()) -> String {
        return NSLocalizedString("womenClothing", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Yes
      /// 
      /// Locales: en, da, da-GL
      static func yes(_: Void = ()) -> String {
        return NSLocalizedString("yes", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: You can contact us
      /// 
      /// Locales: en, da, da-GL
      static func youCanContactUs(_: Void = ()) -> String {
        return NSLocalizedString("youCanContactUs", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: You can only select maximum
      /// 
      /// Locales: en, da, da-GL
      static func youCanOnlSelectMaximum(_: Void = ()) -> String {
        return NSLocalizedString("youCanOnlSelectMaximum", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: You can only send maximum
      /// 
      /// Locales: en, da, da-GL
      static func youCanOnlySendMaximum(_: Void = ()) -> String {
        return NSLocalizedString("youCanOnlySendMaximum", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: You have earned
      /// 
      /// Locales: en, da, da-GL
      static func youHaveEarned(_: Void = ()) -> String {
        return NSLocalizedString("youHaveEarned", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: You will earn
      /// 
      /// Locales: en, da, da-GL
      static func youWillEarn(_: Void = ()) -> String {
        return NSLocalizedString("youWillEarn", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: You will spent
      /// 
      /// Locales: en, da, da-GL
      static func youWillSpent(_: Void = ()) -> String {
        return NSLocalizedString("youWillSpent", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Your Points Expire Soon!
      /// 
      /// Locales: en, da, da-GL
      static func yourPointsExpireSoon(_: Void = ()) -> String {
        return NSLocalizedString("yourPointsExpireSoon", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Your device does not support scanning a code from an item. Please use a device with a camera.
      /// 
      /// Locales: en, da, da-GL
      static func yourDeviceDoesNotSupportScanningaCodeFromAnItemPleaseUseADeviceWithACamera(_: Void = ()) -> String {
        return NSLocalizedString("yourDeviceDoesNotSupportScanningaCodeFromAnItemPleaseUse aDeviceWith aCamera", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Your items has been placed and is on it’s way to being processed
      /// 
      /// Locales: en, da, da-GL
      static func yourItemsHasBeenPlacedAndIsOnItWayToBeingProcessed(_: Void = ()) -> String {
        return NSLocalizedString("yourItemsHasBeenPlacedAndIsOnItWayToBeingProcessed", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: and
      /// 
      /// Locales: en, da, da-GL
      static func and(_: Void = ()) -> String {
        return NSLocalizedString("and", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: and get rebate
      /// 
      /// Locales: en, da, da-GL
      static func andGetRebate(_: Void = ()) -> String {
        return NSLocalizedString("andGetRebate", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: at
      /// 
      /// Locales: en, da, da-GL
      static func at(_: Void = ()) -> String {
        return NSLocalizedString("at", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: at Pisiffik
      /// 
      /// Locales: en, da, da-GL
      static func atPisiffik(_: Void = ()) -> String {
        return NSLocalizedString("atPisiffik", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: example@gmail.com
      /// 
      /// Locales: en, da, da-GL
      static func emailPlaceHolder(_: Void = ()) -> String {
        return NSLocalizedString("emailPlaceHolder", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: file size
      /// 
      /// Locales: en, da, da-GL
      static func fileSize(_: Void = ()) -> String {
        return NSLocalizedString("fileSize", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: km
      /// 
      /// Locales: en, da, da-GL
      static func km(_: Void = ()) -> String {
        return NSLocalizedString("km", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: min
      /// 
      /// Locales: en, da, da-GL
      static func min(_: Void = ()) -> String {
        return NSLocalizedString("min", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: out of
      /// 
      /// Locales: en, da, da-GL
      static func outOf(_: Void = ()) -> String {
        return NSLocalizedString("outOf", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: when your order is completed successfully.
      /// 
      /// Locales: en, da, da-GL
      static func whenYourOrderIsCompletedSuccessfully(_: Void = ()) -> String {
        return NSLocalizedString("whenYourOrderIsCompletedSuccessfully", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
    try nib.validate()
  }
  
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _AddressCell.validate()
      try _AttacmentCell.validate()
      try _BreakfastCell.validate()
      try _BuyOnlineHeaderView.validate()
      try _CampaignsHeaderView.validate()
      try _CategoryCell.validate()
      try _CheckoutAddressCell.validate()
      try _CheckoutAmountCell.validate()
      try _CheckoutPointsCell.validate()
      try _ConceptsCell.validate()
      try _CurrentCampaignsCell.validate()
      try _CurrentOfferCell.validate()
      try _EventDetailCell.validate()
      try _EventDetailSubCell.validate()
      try _EventDetailTimeCell.validate()
      try _EventsCell.validate()
      try _FaqDetailCell.validate()
      try _FavoritesGridCell.validate()
      try _FavoritesHeaderView.validate()
      try _FavoritesListCell.validate()
      try _FindStoreCell.validate()
      try _HomeOfferCollectionCell.validate()
      try _InboxReplyCell.validate()
      try _LocalOfferCell.validate()
      try _MembershipHeaderView.validate()
      try _MembershipOfferCell.validate()
      try _MyCartCell.validate()
      try _MyPointsCell.validate()
      try _MyPurchaseCell.validate()
      try _MyShoppingCell.validate()
      try _NewsCell.validate()
      try _OfferActivitiesCell.validate()
      try _OfferActivitiesSubCell.validate()
      try _OfferBannerCell.validate()
      try _OfferConceptCell.validate()
      try _OfferNewspaperCell.validate()
      try _OfferSinglePurchaseCell.validate()
      try _OfferTabsTopCell.validate()
      try _OffersAvailableStoreCell.validate()
      try _OffersInfoCell.validate()
      try _PaymentCardCell.validate()
      try _PersonalOfferCell.validate()
      try _PersonalOfferListCell.validate()
      try _PreferencesDataCell.validate()
      try _RecipesCell.validate()
      try _RecipesSubCell.validate()
      try _TicketsCell.validate()
    }
    
    struct _AddressCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = AddressCell
      
      let bundle = R.hostingBundle
      let identifier = "AddressCell"
      let name = "AddressCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AddressCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AddressCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_address_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_address_icon' is used in nib 'AddressCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_edit_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_edit_icon' is used in nib 'AddressCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_remove_payment_card_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_remove_payment_card_icon' is used in nib 'AddressCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _AttacmentCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = AttacmentCell
      
      let bundle = R.hostingBundle
      let identifier = "AttacmentCell"
      let name = "AttacmentCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AttacmentCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AttacmentCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_black_cancel_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_black_cancel_icon' is used in nib 'AttacmentCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "GreenBGColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'GreenBGColor' is used in storyboard 'AttacmentCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "LightGreenColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'LightGreenColor' is used in storyboard 'AttacmentCell', but couldn't be loaded.") }
        }
      }
      
      fileprivate init() {}
    }
    
    struct _BreakfastCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = BreakfastCell
      
      let bundle = R.hostingBundle
      let identifier = "BreakfastCell"
      let name = "BreakfastCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BreakfastCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BreakfastCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_right_arrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_right_arrow' is used in nib 'BreakfastCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "TextGrayColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextGrayColor' is used in storyboard 'BreakfastCell', but couldn't be loaded.") }
        }
      }
      
      fileprivate init() {}
    }
    
    struct _BuyOnlineHeaderView: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = BuyOnlineHeaderView
      
      let bundle = R.hostingBundle
      let identifier = "BuyOnlineHeaderView"
      let name = "BuyOnlineHeaderView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BuyOnlineHeaderView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BuyOnlineHeaderView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_filter_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_filter_icon' is used in nib 'BuyOnlineHeaderView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_search_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_search_icon' is used in nib 'BuyOnlineHeaderView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_select_grid_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_select_grid_icon' is used in nib 'BuyOnlineHeaderView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_unselect_list_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_unselect_list_icon' is used in nib 'BuyOnlineHeaderView', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _CampaignSubCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = CampaignSubCell
      
      let bundle = R.hostingBundle
      let identifier = "CampaignSubCell"
      let name = "CampaignSubCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CampaignSubCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CampaignSubCell
      }
      
      fileprivate init() {}
    }
    
    struct _CampaignsCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = CampaignsCell
      
      let bundle = R.hostingBundle
      let identifier = "CampaignsCell"
      let name = "CampaignsCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CampaignsCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CampaignsCell
      }
      
      fileprivate init() {}
    }
    
    struct _CampaignsHeaderView: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = CampaignsHeaderView
      
      let bundle = R.hostingBundle
      let identifier = "CampaignsHeaderView"
      let name = "CampaignsHeaderView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CampaignsHeaderView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CampaignsHeaderView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_select_grid_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_select_grid_icon' is used in nib 'CampaignsHeaderView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_unselect_list_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_unselect_list_icon' is used in nib 'CampaignsHeaderView', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _CategoriesCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = CategoriesCell
      
      let bundle = R.hostingBundle
      let identifier = "CategoriesCell"
      let name = "CategoriesCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CategoriesCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CategoriesCell
      }
      
      fileprivate init() {}
    }
    
    struct _CategoryCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = CategoryCell
      
      let bundle = R.hostingBundle
      let identifier = "CategoryCell"
      let name = "CategoryCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CategoryCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CategoryCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_prefrence_tick_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_prefrence_tick_icon' is used in nib 'CategoryCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "DarkGrayColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'DarkGrayColor' is used in storyboard 'CategoryCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "TextGrayColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextGrayColor' is used in storyboard 'CategoryCell', but couldn't be loaded.") }
        }
      }
      
      fileprivate init() {}
    }
    
    struct _CheckoutAddressCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = CheckoutAddressCell
      
      let bundle = R.hostingBundle
      let identifier = "CheckoutAddressCell"
      let name = "CheckoutAddressCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CheckoutAddressCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CheckoutAddressCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_left_gray_chevron", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_left_gray_chevron' is used in nib 'CheckoutAddressCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "TextGrayColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextGrayColor' is used in storyboard 'CheckoutAddressCell', but couldn't be loaded.") }
        }
      }
      
      fileprivate init() {}
    }
    
    struct _CheckoutAmountCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = CheckoutAmountCell
      
      let bundle = R.hostingBundle
      let identifier = "CheckoutAmountCell"
      let name = "CheckoutAmountCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CheckoutAmountCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CheckoutAmountCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_info_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_info_icon' is used in nib 'CheckoutAmountCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "BackgroundColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'BackgroundColor' is used in storyboard 'CheckoutAmountCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "CardColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'CardColor' is used in storyboard 'CheckoutAmountCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "LightGreenColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'LightGreenColor' is used in storyboard 'CheckoutAmountCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "TextBlueColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextBlueColor' is used in storyboard 'CheckoutAmountCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "TextGrayColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextGrayColor' is used in storyboard 'CheckoutAmountCell', but couldn't be loaded.") }
        }
      }
      
      fileprivate init() {}
    }
    
    struct _CheckoutPointsCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = CheckoutPointsCell
      
      let bundle = R.hostingBundle
      let identifier = "CheckoutPointsCell"
      let name = "CheckoutPointsCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CheckoutPointsCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CheckoutPointsCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_points_green_circle", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_points_green_circle' is used in nib 'CheckoutPointsCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_points_line", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_points_line' is used in nib 'CheckoutPointsCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_white_points_circle", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_white_points_circle' is used in nib 'CheckoutPointsCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "DarkFontColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'DarkFontColor' is used in storyboard 'CheckoutPointsCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "DarkGrayColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'DarkGrayColor' is used in storyboard 'CheckoutPointsCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "LightBlueColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'LightBlueColor' is used in storyboard 'CheckoutPointsCell', but couldn't be loaded.") }
        }
      }
      
      fileprivate init() {}
    }
    
    struct _ConceptsCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ConceptsCell
      
      let bundle = R.hostingBundle
      let identifier = "ConceptsCell"
      let name = "ConceptsCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ConceptsCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ConceptsCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_prefrence_tick_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_prefrence_tick_icon' is used in nib 'ConceptsCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _CountryCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = CountryCell
      
      let bundle = R.hostingBundle
      let identifier = "CountryCell"
      let name = "CountryCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CountryCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CountryCell
      }
      
      fileprivate init() {}
    }
    
    struct _CurrentCampaignsCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = CurrentCampaignsCell
      
      let bundle = R.hostingBundle
      let identifier = "CurrentCampaignsCell"
      let name = "CurrentCampaignsCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CurrentCampaignsCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CurrentCampaignsCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_right_arrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_right_arrow' is used in nib 'CurrentCampaignsCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _CurrentOfferCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = CurrentOfferCell
      
      let bundle = R.hostingBundle
      let identifier = "CurrentOfferCell"
      let name = "CurrentOfferCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CurrentOfferCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CurrentOfferCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_right_arrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_right_arrow' is used in nib 'CurrentOfferCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _EventDetailCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = EventDetailCell
      
      let bundle = R.hostingBundle
      let identifier = "EventDetailCell"
      let name = "EventDetailCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EventDetailCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EventDetailCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_blue_location_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_blue_location_icon' is used in nib 'EventDetailCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "TextBlueColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextBlueColor' is used in storyboard 'EventDetailCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "TextGrayColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextGrayColor' is used in storyboard 'EventDetailCell', but couldn't be loaded.") }
        }
      }
      
      fileprivate init() {}
    }
    
    struct _EventDetailHeaderCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = EventDetailHeaderCell
      
      let bundle = R.hostingBundle
      let identifier = "EventDetailHeaderCell"
      let name = "EventDetailHeaderCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EventDetailHeaderCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EventDetailHeaderCell
      }
      
      fileprivate init() {}
    }
    
    struct _EventDetailSubCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = EventDetailSubCell
      
      let bundle = R.hostingBundle
      let identifier = "EventDetailSubCell"
      let name = "EventDetailSubCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EventDetailSubCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EventDetailSubCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_days_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_days_icon' is used in nib 'EventDetailSubCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _EventDetailTimeCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = EventDetailTimeCell
      
      let bundle = R.hostingBundle
      let identifier = "EventDetailTimeCell"
      let name = "EventDetailTimeCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EventDetailTimeCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EventDetailTimeCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_prefrence_tick_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_prefrence_tick_icon' is used in nib 'EventDetailTimeCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _EventsCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = EventsCell
      
      let bundle = R.hostingBundle
      let identifier = "EventsCell"
      let name = "EventsCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EventsCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EventsCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_blue_filled_circle", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_blue_filled_circle' is used in nib 'EventsCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "BackgroundColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'BackgroundColor' is used in storyboard 'EventsCell', but couldn't be loaded.") }
        }
      }
      
      fileprivate init() {}
    }
    
    struct _FaqCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = FaqCell
      
      let bundle = R.hostingBundle
      let identifier = "FaqCell"
      let name = "FaqCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FaqCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FaqCell
      }
      
      fileprivate init() {}
    }
    
    struct _FaqDetailCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = FaqDetailCell
      
      let bundle = R.hostingBundle
      let identifier = "FaqDetailCell"
      let name = "FaqDetailCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FaqDetailCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FaqDetailCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_faq_downward_arrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_faq_downward_arrow' is used in nib 'FaqDetailCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _FavoritesGridCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = FavoritesGridCell
      
      let bundle = R.hostingBundle
      let identifier = "FavoritesGridCell"
      let name = "FavoritesGridCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FavoritesGridCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FavoritesGridCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_unselect_cart_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_unselect_cart_icon' is used in nib 'FavoritesGridCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_unselect_favorite_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_unselect_favorite_icon' is used in nib 'FavoritesGridCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "BackgroundColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'BackgroundColor' is used in storyboard 'FavoritesGridCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "DarkGrayColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'DarkGrayColor' is used in storyboard 'FavoritesGridCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "LightGreenColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'LightGreenColor' is used in storyboard 'FavoritesGridCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "TextGrayColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextGrayColor' is used in storyboard 'FavoritesGridCell', but couldn't be loaded.") }
        }
      }
      
      fileprivate init() {}
    }
    
    struct _FavoritesHeaderView: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = FavoritesHeaderView
      
      let bundle = R.hostingBundle
      let identifier = "FavoritesHeaderView"
      let name = "FavoritesHeaderView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FavoritesHeaderView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FavoritesHeaderView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_select_grid_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_select_grid_icon' is used in nib 'FavoritesHeaderView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_unselect_list_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_unselect_list_icon' is used in nib 'FavoritesHeaderView', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _FavoritesListCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = FavoritesListCell
      
      let bundle = R.hostingBundle
      let identifier = "FavoritesListCell"
      let name = "FavoritesListCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FavoritesListCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FavoritesListCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_unselect_cart_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_unselect_cart_icon' is used in nib 'FavoritesListCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_unselect_favorite_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_unselect_favorite_icon' is used in nib 'FavoritesListCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "BackgroundColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'BackgroundColor' is used in storyboard 'FavoritesListCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "DarkGrayColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'DarkGrayColor' is used in storyboard 'FavoritesListCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "LightGreenColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'LightGreenColor' is used in storyboard 'FavoritesListCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "TextBlueColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextBlueColor' is used in storyboard 'FavoritesListCell', but couldn't be loaded.") }
        }
      }
      
      fileprivate init() {}
    }
    
    struct _FindStoreCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = FindStoreCell
      
      let bundle = R.hostingBundle
      let identifier = "FindStoreCell"
      let name = "FindStoreCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FindStoreCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FindStoreCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_blue_location_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_blue_location_icon' is used in nib 'FindStoreCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_calendar_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_calendar_icon' is used in nib 'FindStoreCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_clock_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_clock_icon' is used in nib 'FindStoreCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "BackgroundColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'BackgroundColor' is used in storyboard 'FindStoreCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "DarkGrayColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'DarkGrayColor' is used in storyboard 'FindStoreCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "TextBlueColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextBlueColor' is used in storyboard 'FindStoreCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "TextGrayColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextGrayColor' is used in storyboard 'FindStoreCell', but couldn't be loaded.") }
        }
      }
      
      fileprivate init() {}
    }
    
    struct _GenderCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = GenderCell
      
      let bundle = R.hostingBundle
      let identifier = "GenderCell"
      let name = "GenderCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> GenderCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GenderCell
      }
      
      fileprivate init() {}
    }
    
    struct _HomeOfferCollectionCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = HomeOfferCollectionCell
      
      let bundle = R.hostingBundle
      let identifier = "HomeOfferCollectionCell"
      let name = "HomeOfferCollectionCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeOfferCollectionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeOfferCollectionCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_unselect_cart_list_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_unselect_cart_list_icon' is used in nib 'HomeOfferCollectionCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_unselect_favorite_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_unselect_favorite_icon' is used in nib 'HomeOfferCollectionCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "BackgroundColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'BackgroundColor' is used in storyboard 'HomeOfferCollectionCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "LightGreenColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'LightGreenColor' is used in storyboard 'HomeOfferCollectionCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "TextGrayColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextGrayColor' is used in storyboard 'HomeOfferCollectionCell', but couldn't be loaded.") }
        }
      }
      
      fileprivate init() {}
    }
    
    struct _InboxReplyCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = InboxReplyCell
      
      let bundle = R.hostingBundle
      let identifier = "InboxReplyCell"
      let name = "InboxReplyCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> InboxReplyCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? InboxReplyCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_attach_file_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_attach_file_icon' is used in nib 'InboxReplyCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "NewBgColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'NewBgColor' is used in storyboard 'InboxReplyCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "TextBlueColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextBlueColor' is used in storyboard 'InboxReplyCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "TextGrayColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextGrayColor' is used in storyboard 'InboxReplyCell', but couldn't be loaded.") }
        }
      }
      
      fileprivate init() {}
    }
    
    struct _LocalOfferCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = LocalOfferCell
      
      let bundle = R.hostingBundle
      let identifier = "LocalOfferCell"
      let name = "LocalOfferCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> LocalOfferCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LocalOfferCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_right_arrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_right_arrow' is used in nib 'LocalOfferCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "TextGrayColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextGrayColor' is used in storyboard 'LocalOfferCell', but couldn't be loaded.") }
        }
      }
      
      fileprivate init() {}
    }
    
    struct _MembershipHeaderView: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = MembershipHeaderView
      
      let bundle = R.hostingBundle
      let identifier = "MembershipHeaderView"
      let name = "MembershipHeaderView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MembershipHeaderView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MembershipHeaderView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_membersip_star_image", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_membersip_star_image' is used in nib 'MembershipHeaderView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_select_grid_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_select_grid_icon' is used in nib 'MembershipHeaderView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_unselect_list_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_unselect_list_icon' is used in nib 'MembershipHeaderView', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "DarkBlueColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'DarkBlueColor' is used in storyboard 'MembershipHeaderView', but couldn't be loaded.") }
        }
      }
      
      fileprivate init() {}
    }
    
    struct _MembershipOfferCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = MembershipOfferCell
      
      let bundle = R.hostingBundle
      let identifier = "MembershipOfferCell"
      let name = "MembershipOfferCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MembershipOfferCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MembershipOfferCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'background' is used in nib 'MembershipOfferCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_right_arrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_right_arrow' is used in nib 'MembershipOfferCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "TextGrayColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextGrayColor' is used in storyboard 'MembershipOfferCell', but couldn't be loaded.") }
        }
      }
      
      fileprivate init() {}
    }
    
    struct _MyCartCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = MyCartCell
      
      let bundle = R.hostingBundle
      let identifier = "MyCartCell"
      let name = "MyCartCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MyCartCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MyCartCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_bananas", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_bananas' is used in nib 'MyCartCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_cancel_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_cancel_icon' is used in nib 'MyCartCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "BackgroundColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'BackgroundColor' is used in storyboard 'MyCartCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "DarkBlueColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'DarkBlueColor' is used in storyboard 'MyCartCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "LightBlueColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'LightBlueColor' is used in storyboard 'MyCartCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "TextGrayColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextGrayColor' is used in storyboard 'MyCartCell', but couldn't be loaded.") }
        }
      }
      
      fileprivate init() {}
    }
    
    struct _MyPointsCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = MyPointsCell
      
      let bundle = R.hostingBundle
      let identifier = "MyPointsCell"
      let name = "MyPointsCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MyPointsCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MyPointsCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_left_chevron", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_left_chevron' is used in nib 'MyPointsCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "TextGrayColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextGrayColor' is used in storyboard 'MyPointsCell', but couldn't be loaded.") }
        }
      }
      
      fileprivate init() {}
    }
    
    struct _MyPointsHeaderView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MyPointsHeaderView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MyPointsHeaderView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MyPointsHeaderView
      }
      
      fileprivate init() {}
    }
    
    struct _MyPurchaseCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = MyPurchaseCell
      
      let bundle = R.hostingBundle
      let identifier = "MyPurchaseCell"
      let name = "MyPurchaseCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MyPurchaseCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MyPurchaseCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_left_chevron", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_left_chevron' is used in nib 'MyPurchaseCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "BackgroundColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'BackgroundColor' is used in storyboard 'MyPurchaseCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "DarkFontColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'DarkFontColor' is used in storyboard 'MyPurchaseCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "TextBlackColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextBlackColor' is used in storyboard 'MyPurchaseCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "TextGrayColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextGrayColor' is used in storyboard 'MyPurchaseCell', but couldn't be loaded.") }
        }
      }
      
      fileprivate init() {}
    }
    
    struct _MyShoppingCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = MyShoppingCell
      
      let bundle = R.hostingBundle
      let identifier = "MyShoppingCell"
      let name = "MyShoppingCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MyShoppingCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MyShoppingCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_bananas", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_bananas' is used in nib 'MyShoppingCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_cancel_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_cancel_icon' is used in nib 'MyShoppingCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "BackgroundColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'BackgroundColor' is used in storyboard 'MyShoppingCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "DarkBlueColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'DarkBlueColor' is used in storyboard 'MyShoppingCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "LightBlueColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'LightBlueColor' is used in storyboard 'MyShoppingCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "LightGreenColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'LightGreenColor' is used in storyboard 'MyShoppingCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "TextGrayColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextGrayColor' is used in storyboard 'MyShoppingCell', but couldn't be loaded.") }
        }
      }
      
      fileprivate init() {}
    }
    
    struct _NewsCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = NewsCell
      
      let bundle = R.hostingBundle
      let identifier = "NewsCell"
      let name = "NewsCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NewsCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NewsCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_blue_filled_circle", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_blue_filled_circle' is used in nib 'NewsCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "BackgroundColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'BackgroundColor' is used in storyboard 'NewsCell', but couldn't be loaded.") }
        }
      }
      
      fileprivate init() {}
    }
    
    struct _NewsPaperDetailTopCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = NewsPaperDetailTopCell
      
      let bundle = R.hostingBundle
      let identifier = "NewsPaperDetailTopCell"
      let name = "NewsPaperDetailTopCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NewsPaperDetailTopCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NewsPaperDetailTopCell
      }
      
      fileprivate init() {}
    }
    
    struct _OfferActivitiesCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = OfferActivitiesCell
      
      let bundle = R.hostingBundle
      let identifier = "OfferActivitiesCell"
      let name = "OfferActivitiesCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> OfferActivitiesCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OfferActivitiesCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_right_arrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_right_arrow' is used in nib 'OfferActivitiesCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "TextGrayColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextGrayColor' is used in storyboard 'OfferActivitiesCell', but couldn't be loaded.") }
        }
      }
      
      fileprivate init() {}
    }
    
    struct _OfferActivitiesSubCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = OfferActivitiesSubCell
      
      let bundle = R.hostingBundle
      let identifier = "OfferActivitiesSubCell"
      let name = "OfferActivitiesSubCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> OfferActivitiesSubCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OfferActivitiesSubCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_days_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_days_icon' is used in nib 'OfferActivitiesSubCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _OfferBannerCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = OfferBannerCell
      
      let bundle = R.hostingBundle
      let identifier = "OfferBannerCell"
      let name = "OfferBannerCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> OfferBannerCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OfferBannerCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_right_arrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_right_arrow' is used in nib 'OfferBannerCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "TextGrayColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextGrayColor' is used in storyboard 'OfferBannerCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "TextWhiteColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextWhiteColor' is used in storyboard 'OfferBannerCell', but couldn't be loaded.") }
        }
      }
      
      fileprivate init() {}
    }
    
    struct _OfferConceptCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = OfferConceptCell
      
      let bundle = R.hostingBundle
      let identifier = "OfferConceptCell"
      let name = "OfferConceptCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> OfferConceptCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OfferConceptCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_right_arrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_right_arrow' is used in nib 'OfferConceptCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "TextGrayColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextGrayColor' is used in storyboard 'OfferConceptCell', but couldn't be loaded.") }
        }
      }
      
      fileprivate init() {}
    }
    
    struct _OfferItemsPagerCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = OfferItemsPagerCell
      
      let bundle = R.hostingBundle
      let identifier = "OfferItemsPagerCell"
      let name = "OfferItemsPagerCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> OfferItemsPagerCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OfferItemsPagerCell
      }
      
      fileprivate init() {}
    }
    
    struct _OfferNewspaperCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = OfferNewspaperCell
      
      let bundle = R.hostingBundle
      let identifier = "OfferNewspaperCell"
      let name = "OfferNewspaperCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> OfferNewspaperCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OfferNewspaperCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_right_arrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_right_arrow' is used in nib 'OfferNewspaperCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "CardColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'CardColor' is used in storyboard 'OfferNewspaperCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "TextGrayColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextGrayColor' is used in storyboard 'OfferNewspaperCell', but couldn't be loaded.") }
        }
      }
      
      fileprivate init() {}
    }
    
    struct _OfferNewspaperSubCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = OfferNewspaperSubCell
      
      let bundle = R.hostingBundle
      let identifier = "OfferNewspaperSubCell"
      let name = "OfferNewspaperSubCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> OfferNewspaperSubCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OfferNewspaperSubCell
      }
      
      fileprivate init() {}
    }
    
    struct _OfferSinglePurchaseCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = OfferSinglePurchaseCell
      
      let bundle = R.hostingBundle
      let identifier = "OfferSinglePurchaseCell"
      let name = "OfferSinglePurchaseCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> OfferSinglePurchaseCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OfferSinglePurchaseCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_instock_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_instock_icon' is used in nib 'OfferSinglePurchaseCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_single_purchase_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_single_purchase_icon' is used in nib 'OfferSinglePurchaseCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "TextGrayColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextGrayColor' is used in storyboard 'OfferSinglePurchaseCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "TextRedColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextRedColor' is used in storyboard 'OfferSinglePurchaseCell', but couldn't be loaded.") }
        }
      }
      
      fileprivate init() {}
    }
    
    struct _OfferTabsTopCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = OfferTabsTopCell
      
      let bundle = R.hostingBundle
      let identifier = "OfferTabsTopCell"
      let name = "OfferTabsTopCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> OfferTabsTopCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OfferTabsTopCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "app_logo_blue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'app_logo_blue' is used in nib 'OfferTabsTopCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "BackgroundColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'BackgroundColor' is used in storyboard 'OfferTabsTopCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "DarkBlueColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'DarkBlueColor' is used in storyboard 'OfferTabsTopCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "TextBlueColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextBlueColor' is used in storyboard 'OfferTabsTopCell', but couldn't be loaded.") }
        }
      }
      
      fileprivate init() {}
    }
    
    struct _OffersAvailableStoreCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = OffersAvailableStoreCell
      
      let bundle = R.hostingBundle
      let identifier = "OffersAvailableStoreCell"
      let name = "OffersAvailableStoreCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> OffersAvailableStoreCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OffersAvailableStoreCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_blue_location_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_blue_location_icon' is used in nib 'OffersAvailableStoreCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "NewBgColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'NewBgColor' is used in storyboard 'OffersAvailableStoreCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "TextBlackColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextBlackColor' is used in storyboard 'OffersAvailableStoreCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "TextBlueColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextBlueColor' is used in storyboard 'OffersAvailableStoreCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "TextGrayColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextGrayColor' is used in storyboard 'OffersAvailableStoreCell', but couldn't be loaded.") }
        }
      }
      
      fileprivate init() {}
    }
    
    struct _OffersEarnPointsCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = OffersEarnPointsCell
      
      let bundle = R.hostingBundle
      let identifier = "OfferEarnPointsCell"
      let name = "OffersEarnPointsCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> OffersEarnPointsCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OffersEarnPointsCell
      }
      
      fileprivate init() {}
    }
    
    struct _OffersInfoCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = OffersInfoCell
      
      let bundle = R.hostingBundle
      let identifier = "OffersInfoCell"
      let name = "OffersInfoCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> OffersInfoCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OffersInfoCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_gray_upward_chevron", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_gray_upward_chevron' is used in nib 'OffersInfoCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "BackgroundColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'BackgroundColor' is used in storyboard 'OffersInfoCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "NewBGColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'NewBGColor' is used in storyboard 'OffersInfoCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "TextGrayColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextGrayColor' is used in storyboard 'OffersInfoCell', but couldn't be loaded.") }
        }
      }
      
      fileprivate init() {}
    }
    
    struct _OnlineItemPurchaseCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = OnlineItemPurchaseCell
      
      let bundle = R.hostingBundle
      let identifier = "OnlineItemPurchaseCell"
      let name = "OnlineItemPurchaseCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> OnlineItemPurchaseCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OnlineItemPurchaseCell
      }
      
      fileprivate init() {}
    }
    
    struct _PaymentCardCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = PaymentCardCell
      
      let bundle = R.hostingBundle
      let identifier = "PaymentCardCell"
      let name = "PaymentCardCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PaymentCardCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PaymentCardCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_payment_card_bg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_payment_card_bg' is used in nib 'PaymentCardCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_remove_payment_card_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_remove_payment_card_icon' is used in nib 'PaymentCardCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_visa_image", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_visa_image' is used in nib 'PaymentCardCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "BackgroundColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'BackgroundColor' is used in storyboard 'PaymentCardCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "LightBlueColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'LightBlueColor' is used in storyboard 'PaymentCardCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "TextGrayColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextGrayColor' is used in storyboard 'PaymentCardCell', but couldn't be loaded.") }
        }
      }
      
      fileprivate init() {}
    }
    
    struct _PaymentMethodCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = PaymentMethodCell
      
      let bundle = R.hostingBundle
      let identifier = "PaymentMethodCell"
      let name = "PaymentMethodCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PaymentMethodCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PaymentMethodCell
      }
      
      fileprivate init() {}
    }
    
    struct _PersonalOfferCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = PersonalOfferCell
      
      let bundle = R.hostingBundle
      let identifier = "PersonalOfferCell"
      let name = "PersonalOfferCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PersonalOfferCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PersonalOfferCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_right_arrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_right_arrow' is used in nib 'PersonalOfferCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "TextGrayColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextGrayColor' is used in storyboard 'PersonalOfferCell', but couldn't be loaded.") }
        }
      }
      
      fileprivate init() {}
    }
    
    struct _PersonalOfferListCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = PersonalOfferListCell
      
      let bundle = R.hostingBundle
      let identifier = "PersonalOfferListCell"
      let name = "PersonalOfferListCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PersonalOfferListCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PersonalOfferListCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_unselect_cart_list_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_unselect_cart_list_icon' is used in nib 'PersonalOfferListCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_unselect_favorite_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_unselect_favorite_icon' is used in nib 'PersonalOfferListCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "BackgroundColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'BackgroundColor' is used in storyboard 'PersonalOfferListCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "DarkGrayColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'DarkGrayColor' is used in storyboard 'PersonalOfferListCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "LightGreenColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'LightGreenColor' is used in storyboard 'PersonalOfferListCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "TextBlueColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextBlueColor' is used in storyboard 'PersonalOfferListCell', but couldn't be loaded.") }
        }
      }
      
      fileprivate init() {}
    }
    
    struct _PointsCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = PointsCell
      
      let bundle = R.hostingBundle
      let identifier = "PointsCell"
      let name = "PointsCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PointsCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PointsCell
      }
      
      fileprivate init() {}
    }
    
    struct _PreferencesDataCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = PreferencesDataCell
      
      let bundle = R.hostingBundle
      let identifier = "PreferencesDataCell"
      let name = "PreferencesDataCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PreferencesDataCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PreferencesDataCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_preferences_down", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_preferences_down' is used in nib 'PreferencesDataCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_preferences_uncheck", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_preferences_uncheck' is used in nib 'PreferencesDataCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "CardBGColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'CardBGColor' is used in storyboard 'PreferencesDataCell', but couldn't be loaded.") }
        }
      }
      
      fileprivate init() {}
    }
    
    struct _ProductStoreTimingCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ProductStoreTimingCell
      
      let bundle = R.hostingBundle
      let identifier = "ProductStoreTimingCell"
      let name = "ProductStoreTimingCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProductStoreTimingCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProductStoreTimingCell
      }
      
      fileprivate init() {}
    }
    
    struct _ProfileCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ProfileCell
      
      let bundle = R.hostingBundle
      let identifier = "ProfileCell"
      let name = "ProfileCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProfileCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProfileCell
      }
      
      fileprivate init() {}
    }
    
    struct _PurchaseSubCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = PurchaseSubCell
      
      let bundle = R.hostingBundle
      let identifier = "PurchaseSubCell"
      let name = "PurchaseSubCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PurchaseSubCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PurchaseSubCell
      }
      
      fileprivate init() {}
    }
    
    struct _RecipeItemCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = RecipeItemCell
      
      let bundle = R.hostingBundle
      let identifier = "RecipeItemCell"
      let name = "RecipeItemCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> RecipeItemCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RecipeItemCell
      }
      
      fileprivate init() {}
    }
    
    struct _RecipesCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = RecipesCell
      
      let bundle = R.hostingBundle
      let identifier = "RecipesCell"
      let name = "RecipesCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> RecipesCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RecipesCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_right_arrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_right_arrow' is used in nib 'RecipesCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _RecipesSubCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = RecipesSubCell
      
      let bundle = R.hostingBundle
      let identifier = "RecipesSubCell"
      let name = "RecipesSubCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> RecipesSubCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RecipesSubCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_blue_clock_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_blue_clock_icon' is used in nib 'RecipesSubCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_blue_user_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_blue_user_icon' is used in nib 'RecipesSubCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_recipe_unfavorite_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_recipe_unfavorite_icon' is used in nib 'RecipesSubCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "BackgroundColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'BackgroundColor' is used in storyboard 'RecipesSubCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "TextGrayColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextGrayColor' is used in storyboard 'RecipesSubCell', but couldn't be loaded.") }
        }
      }
      
      fileprivate init() {}
    }
    
    struct _TicketDetailHeaderCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = TicketDetailHeaderCell
      
      let bundle = R.hostingBundle
      let identifier = "TicketDetailHeaderCell"
      let name = "TicketDetailHeaderCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TicketDetailHeaderCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TicketDetailHeaderCell
      }
      
      fileprivate init() {}
    }
    
    struct _TicketReasonCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = TicketReasonCell
      
      let bundle = R.hostingBundle
      let identifier = "TicketReasonCell"
      let name = "TicketReasonCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TicketReasonCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TicketReasonCell
      }
      
      fileprivate init() {}
    }
    
    struct _TicketsCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = TicketsCell
      
      let bundle = R.hostingBundle
      let identifier = "TicketsCell"
      let name = "TicketsCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TicketsCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TicketsCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_blue_filled_circle", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_blue_filled_circle' is used in nib 'TicketsCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "BackgroundColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'BackgroundColor' is used in storyboard 'TicketsCell', but couldn't be loaded.") }
        }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try addressSB.validate()
      try alertSB.validate()
      try authSB.validate()
      try buyOnlineSB.validate()
      try contactServiceSB.validate()
      try homeOffersSB.validate()
      try homeSB.validate()
      try introSB.validate()
      try languageBoard.validate()
      try mainTabbarSB.validate()
      try membershipSB.validate()
      try offerSB.validate()
      try preferencesSB.validate()
      try privacySB.validate()
      try profileSB.validate()
      try purchaseSB.validate()
      try splashScreen.validate()
      try storeSB.validate()
    }
    
    struct addressSB: Rswift.StoryboardResourceType, Rswift.Validatable {
      let addAddressVC = StoryboardViewControllerResource<AddAddressVC>(identifier: "AddAddressVC")
      let bundle = R.hostingBundle
      let deliveryAddressVC = StoryboardViewControllerResource<DeliveryAddressVC>(identifier: "DeliveryAddressVC")
      let name = "AddressSB"
      
      func addAddressVC(_: Void = ()) -> AddAddressVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: addAddressVC)
      }
      
      func deliveryAddressVC(_: Void = ()) -> DeliveryAddressVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: deliveryAddressVC)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'background' is used in storyboard 'AddressSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_address_home_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_address_home_icon' is used in storyboard 'AddressSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_address_office_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_address_office_icon' is used in storyboard 'AddressSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_address_other_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_address_other_icon' is used in storyboard 'AddressSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_back", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_back' is used in storyboard 'AddressSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_delete_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_delete_icon' is used in storyboard 'AddressSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_drop_down", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_drop_down' is used in storyboard 'AddressSB', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "BackgroundColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'BackgroundColor' is used in storyboard 'AddressSB', but couldn't be loaded.") }
          if UIKit.UIColor(named: "BorderColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'BorderColor' is used in storyboard 'AddressSB', but couldn't be loaded.") }
          if UIKit.UIColor(named: "DarkBlueColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'DarkBlueColor' is used in storyboard 'AddressSB', but couldn't be loaded.") }
          if UIKit.UIColor(named: "NewBgColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'NewBgColor' is used in storyboard 'AddressSB', but couldn't be loaded.") }
          if UIKit.UIColor(named: "TextWhiteColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextWhiteColor' is used in storyboard 'AddressSB', but couldn't be loaded.") }
        }
        if _R.storyboard.addressSB().addAddressVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'addAddressVC' could not be loaded from storyboard 'AddressSB' as 'AddAddressVC'.") }
        if _R.storyboard.addressSB().deliveryAddressVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'deliveryAddressVC' could not be loaded from storyboard 'AddressSB' as 'DeliveryAddressVC'.") }
      }
      
      fileprivate init() {}
    }
    
    struct alertSB: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let customAlertVC = StoryboardViewControllerResource<CustomAlertVC>(identifier: "CustomAlertVC")
      let name = "AlertSB"
      
      func customAlertVC(_: Void = ()) -> CustomAlertVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: customAlertVC)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "BackgroundColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'BackgroundColor' is used in storyboard 'AlertSB', but couldn't be loaded.") }
          if UIKit.UIColor(named: "DarkBlueColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'DarkBlueColor' is used in storyboard 'AlertSB', but couldn't be loaded.") }
          if UIKit.UIColor(named: "LightGreenColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'LightGreenColor' is used in storyboard 'AlertSB', but couldn't be loaded.") }
        }
        if _R.storyboard.alertSB().customAlertVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'customAlertVC' could not be loaded from storyboard 'AlertSB' as 'CustomAlertVC'.") }
      }
      
      fileprivate init() {}
    }
    
    struct authSB: Rswift.StoryboardResourceType, Rswift.Validatable {
      let authNavigationVC = StoryboardViewControllerResource<AuthNavigationVC>(identifier: "AuthNavigationVC")
      let bundle = R.hostingBundle
      let emailVerificationVC = StoryboardViewControllerResource<EmailVerificationVC>(identifier: "EmailVerificationVC")
      let forgotPasswordVC = StoryboardViewControllerResource<ForgotPasswordVC>(identifier: "ForgotPasswordVC")
      let loginVC = StoryboardViewControllerResource<LoginVC>(identifier: "LoginVC")
      let name = "AuthSB"
      let phoneVerificationVC = StoryboardViewControllerResource<PhoneVerificationVC>(identifier: "PhoneVerificationVC")
      let resetPasswordVC = StoryboardViewControllerResource<ResetPasswordVC>(identifier: "ResetPasswordVC")
      let signUpVC = StoryboardViewControllerResource<SignUpVC>(identifier: "SignUpVC")
      let updatePhoneEmailVC = StoryboardViewControllerResource<UpdatePhoneEmailVC>(identifier: "UpdatePhoneEmailVC")
      let verificationDoneVC = StoryboardViewControllerResource<VerificationDoneVC>(identifier: "VerificationDoneVC")
      let verifyingVC = StoryboardViewControllerResource<VerifyingVC>(identifier: "VerifyingVC")
      
      func authNavigationVC(_: Void = ()) -> AuthNavigationVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: authNavigationVC)
      }
      
      func emailVerificationVC(_: Void = ()) -> EmailVerificationVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: emailVerificationVC)
      }
      
      func forgotPasswordVC(_: Void = ()) -> ForgotPasswordVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: forgotPasswordVC)
      }
      
      func loginVC(_: Void = ()) -> LoginVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: loginVC)
      }
      
      func phoneVerificationVC(_: Void = ()) -> PhoneVerificationVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: phoneVerificationVC)
      }
      
      func resetPasswordVC(_: Void = ()) -> ResetPasswordVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: resetPasswordVC)
      }
      
      func signUpVC(_: Void = ()) -> SignUpVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: signUpVC)
      }
      
      func updatePhoneEmailVC(_: Void = ()) -> UpdatePhoneEmailVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: updatePhoneEmailVC)
      }
      
      func verificationDoneVC(_: Void = ()) -> VerificationDoneVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: verificationDoneVC)
      }
      
      func verifyingVC(_: Void = ()) -> VerifyingVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: verifyingVC)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "app_logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'app_logo' is used in storyboard 'AuthSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'background' is used in storyboard 'AuthSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_back", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_back' is used in storyboard 'AuthSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_edit", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_edit' is used in storyboard 'AuthSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_green_tick", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_green_tick' is used in storyboard 'AuthSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_hide_password", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_hide_password' is used in storyboard 'AuthSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_verifying", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_verifying' is used in storyboard 'AuthSB', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "BackgroundColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'BackgroundColor' is used in storyboard 'AuthSB', but couldn't be loaded.") }
          if UIKit.UIColor(named: "BorderColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'BorderColor' is used in storyboard 'AuthSB', but couldn't be loaded.") }
          if UIKit.UIColor(named: "DarkBlueColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'DarkBlueColor' is used in storyboard 'AuthSB', but couldn't be loaded.") }
          if UIKit.UIColor(named: "DarkFontColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'DarkFontColor' is used in storyboard 'AuthSB', but couldn't be loaded.") }
          if UIKit.UIColor(named: "DarkGrayColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'DarkGrayColor' is used in storyboard 'AuthSB', but couldn't be loaded.") }
          if UIKit.UIColor(named: "LightGreenColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'LightGreenColor' is used in storyboard 'AuthSB', but couldn't be loaded.") }
          if UIKit.UIColor(named: "appBoxesColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'appBoxesColor' is used in storyboard 'AuthSB', but couldn't be loaded.") }
        }
        if _R.storyboard.authSB().authNavigationVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'authNavigationVC' could not be loaded from storyboard 'AuthSB' as 'AuthNavigationVC'.") }
        if _R.storyboard.authSB().emailVerificationVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'emailVerificationVC' could not be loaded from storyboard 'AuthSB' as 'EmailVerificationVC'.") }
        if _R.storyboard.authSB().forgotPasswordVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'forgotPasswordVC' could not be loaded from storyboard 'AuthSB' as 'ForgotPasswordVC'.") }
        if _R.storyboard.authSB().loginVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'loginVC' could not be loaded from storyboard 'AuthSB' as 'LoginVC'.") }
        if _R.storyboard.authSB().phoneVerificationVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'phoneVerificationVC' could not be loaded from storyboard 'AuthSB' as 'PhoneVerificationVC'.") }
        if _R.storyboard.authSB().resetPasswordVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'resetPasswordVC' could not be loaded from storyboard 'AuthSB' as 'ResetPasswordVC'.") }
        if _R.storyboard.authSB().signUpVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'signUpVC' could not be loaded from storyboard 'AuthSB' as 'SignUpVC'.") }
        if _R.storyboard.authSB().updatePhoneEmailVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'updatePhoneEmailVC' could not be loaded from storyboard 'AuthSB' as 'UpdatePhoneEmailVC'.") }
        if _R.storyboard.authSB().verificationDoneVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'verificationDoneVC' could not be loaded from storyboard 'AuthSB' as 'VerificationDoneVC'.") }
        if _R.storyboard.authSB().verifyingVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'verifyingVC' could not be loaded from storyboard 'AuthSB' as 'VerifyingVC'.") }
      }
      
      fileprivate init() {}
    }
    
    struct buyOnlineSB: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "BuyOnlineSB"
      
      static func validate() throws {
        if UIKit.UIImage(named: "background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'background' is used in storyboard 'BuyOnlineSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_cart_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_cart_icon' is used in storyboard 'BuyOnlineSB', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "BackgroundColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'BackgroundColor' is used in storyboard 'BuyOnlineSB', but couldn't be loaded.") }
          if UIKit.UIColor(named: "NewBgColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'NewBgColor' is used in storyboard 'BuyOnlineSB', but couldn't be loaded.") }
        }
      }
      
      fileprivate init() {}
    }
    
    struct contactServiceSB: Rswift.StoryboardResourceType, Rswift.Validatable {
      let attacmentsVC = StoryboardViewControllerResource<AttacmentsVC>(identifier: "AttacmentsVC")
      let bundle = R.hostingBundle
      let contactHelpVC = StoryboardViewControllerResource<ContactHelpVC>(identifier: "ContactHelpVC")
      let contactUsVC = StoryboardViewControllerResource<ContactUsVC>(identifier: "ContactUsVC")
      let faqDetailVC = StoryboardViewControllerResource<FaqDetailVC>(identifier: "FaqDetailVC")
      let faqVC = StoryboardViewControllerResource<FaqVC>(identifier: "FaqVC")
      let feedbackDoneVC = StoryboardViewControllerResource<FeedbackDoneVC>(identifier: "FeedbackDoneVC")
      let name = "ContactServiceSB"
      let pdfViewVC = StoryboardViewControllerResource<PDFViewVC>(identifier: "PDFViewVC")
      let ticketReasonVC = StoryboardViewControllerResource<TicketReasonVC>(identifier: "TicketReasonVC")
      
      func attacmentsVC(_: Void = ()) -> AttacmentsVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: attacmentsVC)
      }
      
      func contactHelpVC(_: Void = ()) -> ContactHelpVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: contactHelpVC)
      }
      
      func contactUsVC(_: Void = ()) -> ContactUsVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: contactUsVC)
      }
      
      func faqDetailVC(_: Void = ()) -> FaqDetailVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: faqDetailVC)
      }
      
      func faqVC(_: Void = ()) -> FaqVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: faqVC)
      }
      
      func feedbackDoneVC(_: Void = ()) -> FeedbackDoneVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: feedbackDoneVC)
      }
      
      func pdfViewVC(_: Void = ()) -> PDFViewVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: pdfViewVC)
      }
      
      func ticketReasonVC(_: Void = ()) -> TicketReasonVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ticketReasonVC)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'background' is used in storyboard 'ContactServiceSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_attach_file_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_attach_file_icon' is used in storyboard 'ContactServiceSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_back", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_back' is used in storyboard 'ContactServiceSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_dismiss_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_dismiss_icon' is used in storyboard 'ContactServiceSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_drop_down", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_drop_down' is used in storyboard 'ContactServiceSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_green_tick", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_green_tick' is used in storyboard 'ContactServiceSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_home_white_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_home_white_icon' is used in storyboard 'ContactServiceSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_phone_call_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_phone_call_icon' is used in storyboard 'ContactServiceSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_search_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_search_icon' is used in storyboard 'ContactServiceSB', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "BackgroundColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'BackgroundColor' is used in storyboard 'ContactServiceSB', but couldn't be loaded.") }
          if UIKit.UIColor(named: "DarkBlueColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'DarkBlueColor' is used in storyboard 'ContactServiceSB', but couldn't be loaded.") }
          if UIKit.UIColor(named: "NewBgColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'NewBgColor' is used in storyboard 'ContactServiceSB', but couldn't be loaded.") }
          if UIKit.UIColor(named: "TextBlueColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextBlueColor' is used in storyboard 'ContactServiceSB', but couldn't be loaded.") }
          if UIKit.UIColor(named: "TextRedColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextRedColor' is used in storyboard 'ContactServiceSB', but couldn't be loaded.") }
        }
        if _R.storyboard.contactServiceSB().attacmentsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'attacmentsVC' could not be loaded from storyboard 'ContactServiceSB' as 'AttacmentsVC'.") }
        if _R.storyboard.contactServiceSB().contactHelpVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'contactHelpVC' could not be loaded from storyboard 'ContactServiceSB' as 'ContactHelpVC'.") }
        if _R.storyboard.contactServiceSB().contactUsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'contactUsVC' could not be loaded from storyboard 'ContactServiceSB' as 'ContactUsVC'.") }
        if _R.storyboard.contactServiceSB().faqDetailVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'faqDetailVC' could not be loaded from storyboard 'ContactServiceSB' as 'FaqDetailVC'.") }
        if _R.storyboard.contactServiceSB().faqVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'faqVC' could not be loaded from storyboard 'ContactServiceSB' as 'FaqVC'.") }
        if _R.storyboard.contactServiceSB().feedbackDoneVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'feedbackDoneVC' could not be loaded from storyboard 'ContactServiceSB' as 'FeedbackDoneVC'.") }
        if _R.storyboard.contactServiceSB().pdfViewVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'pdfViewVC' could not be loaded from storyboard 'ContactServiceSB' as 'PDFViewVC'.") }
        if _R.storyboard.contactServiceSB().ticketReasonVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ticketReasonVC' could not be loaded from storyboard 'ContactServiceSB' as 'TicketReasonVC'.") }
      }
      
      fileprivate init() {}
    }
    
    struct homeOffersSB: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let myOfferAndBenefitContainerVC = StoryboardViewControllerResource<MyOfferAndBenefitContainerVC>(identifier: "MyOfferAndBenefitContainerVC")
      let myOfferAndBenefitVC = StoryboardViewControllerResource<MyOfferAndBenefitVC>(identifier: "MyOfferAndBenefitVC")
      let myOfferLocalVC = StoryboardViewControllerResource<MyOfferLocalVC>(identifier: "MyOfferLocalVC")
      let myOfferMembershipVC = StoryboardViewControllerResource<MyOfferMembershipVC>(identifier: "MyOfferMembershipVC")
      let myOfferPersonalVC = StoryboardViewControllerResource<MyOfferPersonalVC>(identifier: "MyOfferPersonalVC")
      let name = "HomeOffersSB"
      
      func myOfferAndBenefitContainerVC(_: Void = ()) -> MyOfferAndBenefitContainerVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: myOfferAndBenefitContainerVC)
      }
      
      func myOfferAndBenefitVC(_: Void = ()) -> MyOfferAndBenefitVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: myOfferAndBenefitVC)
      }
      
      func myOfferLocalVC(_: Void = ()) -> MyOfferLocalVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: myOfferLocalVC)
      }
      
      func myOfferMembershipVC(_: Void = ()) -> MyOfferMembershipVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: myOfferMembershipVC)
      }
      
      func myOfferPersonalVC(_: Void = ()) -> MyOfferPersonalVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: myOfferPersonalVC)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'background' is used in storyboard 'HomeOffersSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_back", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_back' is used in storyboard 'HomeOffersSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_cart_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_cart_icon' is used in storyboard 'HomeOffersSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_right_arrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_right_arrow' is used in storyboard 'HomeOffersSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_select_grid_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_select_grid_icon' is used in storyboard 'HomeOffersSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_unselect_list_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_unselect_list_icon' is used in storyboard 'HomeOffersSB', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "BackgroundColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'BackgroundColor' is used in storyboard 'HomeOffersSB', but couldn't be loaded.") }
          if UIKit.UIColor(named: "DarkGrayColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'DarkGrayColor' is used in storyboard 'HomeOffersSB', but couldn't be loaded.") }
          if UIKit.UIColor(named: "LightBlueColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'LightBlueColor' is used in storyboard 'HomeOffersSB', but couldn't be loaded.") }
          if UIKit.UIColor(named: "NewBgColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'NewBgColor' is used in storyboard 'HomeOffersSB', but couldn't be loaded.") }
          if UIKit.UIColor(named: "TextBlueColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextBlueColor' is used in storyboard 'HomeOffersSB', but couldn't be loaded.") }
          if UIKit.UIColor(named: "TextGrayColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextGrayColor' is used in storyboard 'HomeOffersSB', but couldn't be loaded.") }
        }
        if _R.storyboard.homeOffersSB().myOfferAndBenefitContainerVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'myOfferAndBenefitContainerVC' could not be loaded from storyboard 'HomeOffersSB' as 'MyOfferAndBenefitContainerVC'.") }
        if _R.storyboard.homeOffersSB().myOfferAndBenefitVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'myOfferAndBenefitVC' could not be loaded from storyboard 'HomeOffersSB' as 'MyOfferAndBenefitVC'.") }
        if _R.storyboard.homeOffersSB().myOfferLocalVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'myOfferLocalVC' could not be loaded from storyboard 'HomeOffersSB' as 'MyOfferLocalVC'.") }
        if _R.storyboard.homeOffersSB().myOfferMembershipVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'myOfferMembershipVC' could not be loaded from storyboard 'HomeOffersSB' as 'MyOfferMembershipVC'.") }
        if _R.storyboard.homeOffersSB().myOfferPersonalVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'myOfferPersonalVC' could not be loaded from storyboard 'HomeOffersSB' as 'MyOfferPersonalVC'.") }
      }
      
      fileprivate init() {}
    }
    
    struct homeSB: Rswift.StoryboardResourceType, Rswift.Validatable {
      let addPaymentCardVC = StoryboardViewControllerResource<AddPaymentCardVC>(identifier: "AddPaymentCardVC")
      let bundle = R.hostingBundle
      let campaignDetailVC = StoryboardViewControllerResource<CampaignDetailVC>(identifier: "CampaignDetailVC")
      let checkoutVC = StoryboardViewControllerResource<CheckoutVC>(identifier: "CheckoutVC")
      let currentCampaingsVC = StoryboardViewControllerResource<CurrentCampaingsVC>(identifier: "CurrentCampaingsVC")
      let customInfoAlertVC = StoryboardViewControllerResource<CustomInfoAlertVC>(identifier: "CustomInfoAlertVC")
      let deliveryTimeVC = StoryboardViewControllerResource<DeliveryTimeVC>(identifier: "DeliveryTimeVC")
      let myCartVC = StoryboardViewControllerResource<MyCartVC>(identifier: "MyCartVC")
      let myShoppingListVC = StoryboardViewControllerResource<MyShoppingListVC>(identifier: "MyShoppingListVC")
      let name = "HomeSB"
      let noPaymentCardVC = StoryboardViewControllerResource<NoPaymentCardVC>(identifier: "NoPaymentCardVC")
      let notificationsVC = StoryboardViewControllerResource<NotificationsVC>(identifier: "NotificationsVC")
      let offerDetailVC = StoryboardViewControllerResource<OfferDetailVC>(identifier: "OfferDetailVC")
      let paymentCardsVC = StoryboardViewControllerResource<PaymentCardsVC>(identifier: "PaymentCardsVC")
      let paymentMethodVC = StoryboardViewControllerResource<PaymentMethodVC>(identifier: "PaymentMethodVC")
      let productDetailVC = StoryboardViewControllerResource<ProductDetailVC>(identifier: "ProductDetailVC")
      let recipesDetailVC = StoryboardViewControllerResource<RecipesDetailVC>(identifier: "RecipesDetailVC")
      let recipesSearchVC = StoryboardViewControllerResource<RecipesSearchVC>(identifier: "RecipesSearchVC")
      let recipesVC = StoryboardViewControllerResource<RecipesVC>(identifier: "RecipesVC")
      
      func addPaymentCardVC(_: Void = ()) -> AddPaymentCardVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: addPaymentCardVC)
      }
      
      func campaignDetailVC(_: Void = ()) -> CampaignDetailVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: campaignDetailVC)
      }
      
      func checkoutVC(_: Void = ()) -> CheckoutVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: checkoutVC)
      }
      
      func currentCampaingsVC(_: Void = ()) -> CurrentCampaingsVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: currentCampaingsVC)
      }
      
      func customInfoAlertVC(_: Void = ()) -> CustomInfoAlertVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: customInfoAlertVC)
      }
      
      func deliveryTimeVC(_: Void = ()) -> DeliveryTimeVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: deliveryTimeVC)
      }
      
      func myCartVC(_: Void = ()) -> MyCartVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: myCartVC)
      }
      
      func myShoppingListVC(_: Void = ()) -> MyShoppingListVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: myShoppingListVC)
      }
      
      func noPaymentCardVC(_: Void = ()) -> NoPaymentCardVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: noPaymentCardVC)
      }
      
      func notificationsVC(_: Void = ()) -> NotificationsVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: notificationsVC)
      }
      
      func offerDetailVC(_: Void = ()) -> OfferDetailVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: offerDetailVC)
      }
      
      func paymentCardsVC(_: Void = ()) -> PaymentCardsVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: paymentCardsVC)
      }
      
      func paymentMethodVC(_: Void = ()) -> PaymentMethodVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: paymentMethodVC)
      }
      
      func productDetailVC(_: Void = ()) -> ProductDetailVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: productDetailVC)
      }
      
      func recipesDetailVC(_: Void = ()) -> RecipesDetailVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: recipesDetailVC)
      }
      
      func recipesSearchVC(_: Void = ()) -> RecipesSearchVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: recipesSearchVC)
      }
      
      func recipesVC(_: Void = ()) -> RecipesVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: recipesVC)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'background' is used in storyboard 'HomeSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_back", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_back' is used in storyboard 'HomeSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_blue_clock_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_blue_clock_icon' is used in storyboard 'HomeSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_blue_user_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_blue_user_icon' is used in storyboard 'HomeSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_cancel_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_cancel_icon' is used in storyboard 'HomeSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_cart_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_cart_icon' is used in storyboard 'HomeSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_delete_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_delete_icon' is used in storyboard 'HomeSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_info_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_info_icon' is used in storyboard 'HomeSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_left_gray_chevron", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_left_gray_chevron' is used in storyboard 'HomeSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_master_card_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_master_card_icon' is used in storyboard 'HomeSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_no_card_add_image", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_no_card_add_image' is used in storyboard 'HomeSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_profile_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_profile_icon' is used in storyboard 'HomeSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_recipe_favorite_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_recipe_favorite_icon' is used in storyboard 'HomeSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_search_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_search_icon' is used in storyboard 'HomeSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_select_cart_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_select_cart_icon' is used in storyboard 'HomeSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_select_favorite_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_select_favorite_icon' is used in storyboard 'HomeSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_share_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_share_icon' is used in storyboard 'HomeSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_slider_image", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_slider_image' is used in storyboard 'HomeSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_unselect_cart_list_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_unselect_cart_list_icon' is used in storyboard 'HomeSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_visa_card_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_visa_card_icon' is used in storyboard 'HomeSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_white_cart_list_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_white_cart_list_icon' is used in storyboard 'HomeSB', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "BackgroundColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'BackgroundColor' is used in storyboard 'HomeSB', but couldn't be loaded.") }
          if UIKit.UIColor(named: "DarkBlueColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'DarkBlueColor' is used in storyboard 'HomeSB', but couldn't be loaded.") }
          if UIKit.UIColor(named: "GreenBGColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'GreenBGColor' is used in storyboard 'HomeSB', but couldn't be loaded.") }
          if UIKit.UIColor(named: "LightBlueColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'LightBlueColor' is used in storyboard 'HomeSB', but couldn't be loaded.") }
          if UIKit.UIColor(named: "LightGreenColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'LightGreenColor' is used in storyboard 'HomeSB', but couldn't be loaded.") }
          if UIKit.UIColor(named: "NewBgColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'NewBgColor' is used in storyboard 'HomeSB', but couldn't be loaded.") }
          if UIKit.UIColor(named: "TextBlueColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextBlueColor' is used in storyboard 'HomeSB', but couldn't be loaded.") }
          if UIKit.UIColor(named: "TextGrayColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextGrayColor' is used in storyboard 'HomeSB', but couldn't be loaded.") }
          if UIKit.UIColor(named: "TextRedColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextRedColor' is used in storyboard 'HomeSB', but couldn't be loaded.") }
          if UIKit.UIColor(named: "TextWhiteColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextWhiteColor' is used in storyboard 'HomeSB', but couldn't be loaded.") }
        }
        if _R.storyboard.homeSB().addPaymentCardVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'addPaymentCardVC' could not be loaded from storyboard 'HomeSB' as 'AddPaymentCardVC'.") }
        if _R.storyboard.homeSB().campaignDetailVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'campaignDetailVC' could not be loaded from storyboard 'HomeSB' as 'CampaignDetailVC'.") }
        if _R.storyboard.homeSB().checkoutVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'checkoutVC' could not be loaded from storyboard 'HomeSB' as 'CheckoutVC'.") }
        if _R.storyboard.homeSB().currentCampaingsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'currentCampaingsVC' could not be loaded from storyboard 'HomeSB' as 'CurrentCampaingsVC'.") }
        if _R.storyboard.homeSB().customInfoAlertVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'customInfoAlertVC' could not be loaded from storyboard 'HomeSB' as 'CustomInfoAlertVC'.") }
        if _R.storyboard.homeSB().deliveryTimeVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'deliveryTimeVC' could not be loaded from storyboard 'HomeSB' as 'DeliveryTimeVC'.") }
        if _R.storyboard.homeSB().myCartVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'myCartVC' could not be loaded from storyboard 'HomeSB' as 'MyCartVC'.") }
        if _R.storyboard.homeSB().myShoppingListVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'myShoppingListVC' could not be loaded from storyboard 'HomeSB' as 'MyShoppingListVC'.") }
        if _R.storyboard.homeSB().noPaymentCardVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'noPaymentCardVC' could not be loaded from storyboard 'HomeSB' as 'NoPaymentCardVC'.") }
        if _R.storyboard.homeSB().notificationsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'notificationsVC' could not be loaded from storyboard 'HomeSB' as 'NotificationsVC'.") }
        if _R.storyboard.homeSB().offerDetailVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'offerDetailVC' could not be loaded from storyboard 'HomeSB' as 'OfferDetailVC'.") }
        if _R.storyboard.homeSB().paymentCardsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'paymentCardsVC' could not be loaded from storyboard 'HomeSB' as 'PaymentCardsVC'.") }
        if _R.storyboard.homeSB().paymentMethodVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'paymentMethodVC' could not be loaded from storyboard 'HomeSB' as 'PaymentMethodVC'.") }
        if _R.storyboard.homeSB().productDetailVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'productDetailVC' could not be loaded from storyboard 'HomeSB' as 'ProductDetailVC'.") }
        if _R.storyboard.homeSB().recipesDetailVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'recipesDetailVC' could not be loaded from storyboard 'HomeSB' as 'RecipesDetailVC'.") }
        if _R.storyboard.homeSB().recipesSearchVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'recipesSearchVC' could not be loaded from storyboard 'HomeSB' as 'RecipesSearchVC'.") }
        if _R.storyboard.homeSB().recipesVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'recipesVC' could not be loaded from storyboard 'HomeSB' as 'RecipesVC'.") }
      }
      
      fileprivate init() {}
    }
    
    struct introSB: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let introNavigationVC = StoryboardViewControllerResource<IntroNavigationVC>(identifier: "IntroNavigationVC")
      let introVC = StoryboardViewControllerResource<IntroVC>(identifier: "IntroVC")
      let name = "IntroSB"
      let splashNavigationVC = StoryboardViewControllerResource<SplashNavigationVC>(identifier: "SplashNavigationVC")
      let splashVC = StoryboardViewControllerResource<SplashVC>(identifier: "SplashVC")
      
      func introNavigationVC(_: Void = ()) -> IntroNavigationVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: introNavigationVC)
      }
      
      func introVC(_: Void = ()) -> IntroVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: introVC)
      }
      
      func splashNavigationVC(_: Void = ()) -> SplashNavigationVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: splashNavigationVC)
      }
      
      func splashVC(_: Void = ()) -> SplashVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: splashVC)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "app_logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'app_logo' is used in storyboard 'IntroSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'background' is used in storyboard 'IntroSB', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "BackgroundColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'BackgroundColor' is used in storyboard 'IntroSB', but couldn't be loaded.") }
          if UIKit.UIColor(named: "LightBlueColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'LightBlueColor' is used in storyboard 'IntroSB', but couldn't be loaded.") }
          if UIKit.UIColor(named: "appBoxesColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'appBoxesColor' is used in storyboard 'IntroSB', but couldn't be loaded.") }
        }
        if _R.storyboard.introSB().introNavigationVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'introNavigationVC' could not be loaded from storyboard 'IntroSB' as 'IntroNavigationVC'.") }
        if _R.storyboard.introSB().introVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'introVC' could not be loaded from storyboard 'IntroSB' as 'IntroVC'.") }
        if _R.storyboard.introSB().splashNavigationVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'splashNavigationVC' could not be loaded from storyboard 'IntroSB' as 'SplashNavigationVC'.") }
        if _R.storyboard.introSB().splashVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'splashVC' could not be loaded from storyboard 'IntroSB' as 'SplashVC'.") }
      }
      
      fileprivate init() {}
    }
    
    struct languageBoard: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let languageNavigationVC = StoryboardViewControllerResource<LanguageNavigationVC>(identifier: "LanguageNavigationVC")
      let languageVC = StoryboardViewControllerResource<LanguageVC>(identifier: "LanguageVC")
      let name = "LanguageBoard"
      let onBoardVC = StoryboardViewControllerResource<OnBoardVC>(identifier: "OnBoardVC")
      
      func languageNavigationVC(_: Void = ()) -> LanguageNavigationVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: languageNavigationVC)
      }
      
      func languageVC(_: Void = ()) -> LanguageVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: languageVC)
      }
      
      func onBoardVC(_: Void = ()) -> OnBoardVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: onBoardVC)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "Flag_of_Denmark", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Flag_of_Denmark' is used in storyboard 'LanguageBoard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Flag_of_Greenland", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Flag_of_Greenland' is used in storyboard 'LanguageBoard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Flag_of_the_United_States", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Flag_of_the_United_States' is used in storyboard 'LanguageBoard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "app_logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'app_logo' is used in storyboard 'LanguageBoard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'background' is used in storyboard 'LanguageBoard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_uncheck_circle", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_uncheck_circle' is used in storyboard 'LanguageBoard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "onboard_coin", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboard_coin' is used in storyboard 'LanguageBoard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "onboard_loyality", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboard_loyality' is used in storyboard 'LanguageBoard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "onboard_wallet", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboard_wallet' is used in storyboard 'LanguageBoard', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "BorderColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'BorderColor' is used in storyboard 'LanguageBoard', but couldn't be loaded.") }
          if UIKit.UIColor(named: "DarkFontColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'DarkFontColor' is used in storyboard 'LanguageBoard', but couldn't be loaded.") }
          if UIKit.UIColor(named: "DarkGrayColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'DarkGrayColor' is used in storyboard 'LanguageBoard', but couldn't be loaded.") }
          if UIKit.UIColor(named: "LightGreenColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'LightGreenColor' is used in storyboard 'LanguageBoard', but couldn't be loaded.") }
        }
        if _R.storyboard.languageBoard().languageNavigationVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'languageNavigationVC' could not be loaded from storyboard 'LanguageBoard' as 'LanguageNavigationVC'.") }
        if _R.storyboard.languageBoard().languageVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'languageVC' could not be loaded from storyboard 'LanguageBoard' as 'LanguageVC'.") }
        if _R.storyboard.languageBoard().onBoardVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'onBoardVC' could not be loaded from storyboard 'LanguageBoard' as 'OnBoardVC'.") }
      }
      
      fileprivate init() {}
    }
    
    struct mainTabbarSB: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let buyOnlineNavigationVC = StoryboardViewControllerResource<BuyOnlineNavigationVC>(identifier: "BuyOnlineNavigationVC")
      let buyOnlineVC = StoryboardViewControllerResource<BuyOnlineVC>(identifier: "BuyOnlineVC")
      let homeNavigationVC = StoryboardViewControllerResource<HomeNavigationVC>(identifier: "HomeNavigationVC")
      let homeVC = StoryboardViewControllerResource<HomeVC>(identifier: "HomeVC")
      let mainTabBarViewController = StoryboardViewControllerResource<MainTabBarViewController>(identifier: "MainTabBarViewController")
      let name = "MainTabbarSB"
      let offerNavigationVC = StoryboardViewControllerResource<OfferNavigationVC>(identifier: "OfferNavigationVC")
      let offerVC = StoryboardViewControllerResource<OfferVC>(identifier: "OfferVC")
      let profileNavigationVC = StoryboardViewControllerResource<ProfileNavigationVC>(identifier: "ProfileNavigationVC")
      let profileTabVC = StoryboardViewControllerResource<ProfileTabVC>(identifier: "ProfileTabVC")
      let storeBarcodeVC = StoryboardViewControllerResource<StoreBarcodeVC>(identifier: "StoreBarcodeVC")
      let storeNavigationVC = StoryboardViewControllerResource<StoreNavigationVC>(identifier: "StoreNavigationVC")
      
      func buyOnlineNavigationVC(_: Void = ()) -> BuyOnlineNavigationVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: buyOnlineNavigationVC)
      }
      
      func buyOnlineVC(_: Void = ()) -> BuyOnlineVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: buyOnlineVC)
      }
      
      func homeNavigationVC(_: Void = ()) -> HomeNavigationVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: homeNavigationVC)
      }
      
      func homeVC(_: Void = ()) -> HomeVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: homeVC)
      }
      
      func mainTabBarViewController(_: Void = ()) -> MainTabBarViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mainTabBarViewController)
      }
      
      func offerNavigationVC(_: Void = ()) -> OfferNavigationVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: offerNavigationVC)
      }
      
      func offerVC(_: Void = ()) -> OfferVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: offerVC)
      }
      
      func profileNavigationVC(_: Void = ()) -> ProfileNavigationVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: profileNavigationVC)
      }
      
      func profileTabVC(_: Void = ()) -> ProfileTabVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: profileTabVC)
      }
      
      func storeBarcodeVC(_: Void = ()) -> StoreBarcodeVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: storeBarcodeVC)
      }
      
      func storeNavigationVC(_: Void = ()) -> StoreNavigationVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: storeNavigationVC)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'background' is used in storyboard 'MainTabbarSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_cart_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_cart_icon' is used in storyboard 'MainTabbarSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_home_notifications_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_home_notifications_icon' is used in storyboard 'MainTabbarSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_profile_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_profile_icon' is used in storyboard 'MainTabbarSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_tabbar_home", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_tabbar_home' is used in storyboard 'MainTabbarSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_tabbar_offer", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_tabbar_offer' is used in storyboard 'MainTabbarSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_tabbar_online", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_tabbar_online' is used in storyboard 'MainTabbarSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_tabbar_profile", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_tabbar_profile' is used in storyboard 'MainTabbarSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_tabbar_store", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_tabbar_store' is used in storyboard 'MainTabbarSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_white_cart_list_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_white_cart_list_icon' is used in storyboard 'MainTabbarSB', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "BackgroundColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'BackgroundColor' is used in storyboard 'MainTabbarSB', but couldn't be loaded.") }
          if UIKit.UIColor(named: "CardColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'CardColor' is used in storyboard 'MainTabbarSB', but couldn't be loaded.") }
          if UIKit.UIColor(named: "LightBlueColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'LightBlueColor' is used in storyboard 'MainTabbarSB', but couldn't be loaded.") }
          if UIKit.UIColor(named: "NewBgColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'NewBgColor' is used in storyboard 'MainTabbarSB', but couldn't be loaded.") }
        }
        if _R.storyboard.mainTabbarSB().buyOnlineNavigationVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'buyOnlineNavigationVC' could not be loaded from storyboard 'MainTabbarSB' as 'BuyOnlineNavigationVC'.") }
        if _R.storyboard.mainTabbarSB().buyOnlineVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'buyOnlineVC' could not be loaded from storyboard 'MainTabbarSB' as 'BuyOnlineVC'.") }
        if _R.storyboard.mainTabbarSB().homeNavigationVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'homeNavigationVC' could not be loaded from storyboard 'MainTabbarSB' as 'HomeNavigationVC'.") }
        if _R.storyboard.mainTabbarSB().homeVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'homeVC' could not be loaded from storyboard 'MainTabbarSB' as 'HomeVC'.") }
        if _R.storyboard.mainTabbarSB().mainTabBarViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mainTabBarViewController' could not be loaded from storyboard 'MainTabbarSB' as 'MainTabBarViewController'.") }
        if _R.storyboard.mainTabbarSB().offerNavigationVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'offerNavigationVC' could not be loaded from storyboard 'MainTabbarSB' as 'OfferNavigationVC'.") }
        if _R.storyboard.mainTabbarSB().offerVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'offerVC' could not be loaded from storyboard 'MainTabbarSB' as 'OfferVC'.") }
        if _R.storyboard.mainTabbarSB().profileNavigationVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'profileNavigationVC' could not be loaded from storyboard 'MainTabbarSB' as 'ProfileNavigationVC'.") }
        if _R.storyboard.mainTabbarSB().profileTabVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'profileTabVC' could not be loaded from storyboard 'MainTabbarSB' as 'ProfileTabVC'.") }
        if _R.storyboard.mainTabbarSB().storeBarcodeVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'storeBarcodeVC' could not be loaded from storyboard 'MainTabbarSB' as 'StoreBarcodeVC'.") }
        if _R.storyboard.mainTabbarSB().storeNavigationVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'storeNavigationVC' could not be loaded from storyboard 'MainTabbarSB' as 'StoreNavigationVC'.") }
      }
      
      fileprivate init() {}
    }
    
    struct membershipSB: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let membershipVC = StoryboardViewControllerResource<MembershipVC>(identifier: "MembershipVC")
      let name = "MembershipSB"
      
      func membershipVC(_: Void = ()) -> MembershipVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: membershipVC)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'background' is used in storyboard 'MembershipSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_back", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_back' is used in storyboard 'MembershipSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_cart_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_cart_icon' is used in storyboard 'MembershipSB', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "BackgroundColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'BackgroundColor' is used in storyboard 'MembershipSB', but couldn't be loaded.") }
          if UIKit.UIColor(named: "NewBgColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'NewBgColor' is used in storyboard 'MembershipSB', but couldn't be loaded.") }
        }
        if _R.storyboard.membershipSB().membershipVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'membershipVC' could not be loaded from storyboard 'MembershipSB' as 'MembershipVC'.") }
      }
      
      fileprivate init() {}
    }
    
    struct offerSB: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "OfferSB"
      let offerNewspaperDetailVC = StoryboardViewControllerResource<OfferNewspaperDetailVC>(identifier: "OfferNewspaperDetailVC")
      let offerNewspaperVC = StoryboardViewControllerResource<OfferNewspaperVC>(identifier: "OfferNewspaperVC")
      
      func offerNewspaperDetailVC(_: Void = ()) -> OfferNewspaperDetailVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: offerNewspaperDetailVC)
      }
      
      func offerNewspaperVC(_: Void = ()) -> OfferNewspaperVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: offerNewspaperVC)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'background' is used in storyboard 'OfferSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_back", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_back' is used in storyboard 'OfferSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_dismiss_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_dismiss_icon' is used in storyboard 'OfferSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_download_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_download_icon' is used in storyboard 'OfferSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_first_index_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_first_index_icon' is used in storyboard 'OfferSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_last_index_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_last_index_icon' is used in storyboard 'OfferSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_next_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_next_icon' is used in storyboard 'OfferSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_previous_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_previous_icon' is used in storyboard 'OfferSB', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "BackgroundColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'BackgroundColor' is used in storyboard 'OfferSB', but couldn't be loaded.") }
          if UIKit.UIColor(named: "NewBgColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'NewBgColor' is used in storyboard 'OfferSB', but couldn't be loaded.") }
        }
        if _R.storyboard.offerSB().offerNewspaperDetailVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'offerNewspaperDetailVC' could not be loaded from storyboard 'OfferSB' as 'OfferNewspaperDetailVC'.") }
        if _R.storyboard.offerSB().offerNewspaperVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'offerNewspaperVC' could not be loaded from storyboard 'OfferSB' as 'OfferNewspaperVC'.") }
      }
      
      fileprivate init() {}
    }
    
    struct preferencesSB: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "PreferencesSB"
      let preferenceVC = StoryboardViewControllerResource<PreferenceVC>(identifier: "PreferenceVC")
      let preferencesDetailVC = StoryboardViewControllerResource<PreferencesDetailVC>(identifier: "PreferencesDetailVC")
      
      func preferenceVC(_: Void = ()) -> PreferenceVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: preferenceVC)
      }
      
      func preferencesDetailVC(_: Void = ()) -> PreferencesDetailVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: preferencesDetailVC)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'background' is used in storyboard 'PreferencesSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_back", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_back' is used in storyboard 'PreferencesSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_disable_prefrences_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_disable_prefrences_icon' is used in storyboard 'PreferencesSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_home_white_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_home_white_icon' is used in storyboard 'PreferencesSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_search_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_search_icon' is used in storyboard 'PreferencesSB', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "BackgroundColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'BackgroundColor' is used in storyboard 'PreferencesSB', but couldn't be loaded.") }
          if UIKit.UIColor(named: "CardColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'CardColor' is used in storyboard 'PreferencesSB', but couldn't be loaded.") }
          if UIKit.UIColor(named: "DarkBlueColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'DarkBlueColor' is used in storyboard 'PreferencesSB', but couldn't be loaded.") }
        }
        if _R.storyboard.preferencesSB().preferenceVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'preferenceVC' could not be loaded from storyboard 'PreferencesSB' as 'PreferenceVC'.") }
        if _R.storyboard.preferencesSB().preferencesDetailVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'preferencesDetailVC' could not be loaded from storyboard 'PreferencesSB' as 'PreferencesDetailVC'.") }
      }
      
      fileprivate init() {}
    }
    
    struct privacySB: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "PrivacySB"
      let privacyVC = StoryboardViewControllerResource<PrivacyVC>(identifier: "PrivacyVC")
      
      func privacyVC(_: Void = ()) -> PrivacyVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: privacyVC)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "app_logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'app_logo' is used in storyboard 'PrivacySB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'background' is used in storyboard 'PrivacySB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_back", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_back' is used in storyboard 'PrivacySB', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "DarkBlueColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'DarkBlueColor' is used in storyboard 'PrivacySB', but couldn't be loaded.") }
        }
        if _R.storyboard.privacySB().privacyVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'privacyVC' could not be loaded from storyboard 'PrivacySB' as 'PrivacyVC'.") }
      }
      
      fileprivate init() {}
    }
    
    struct profileSB: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let countryVC = StoryboardViewControllerResource<CountryVC>(identifier: "CountryVC")
      let directionVC = StoryboardViewControllerResource<DirectionVC>(identifier: "DirectionVC")
      let eventDetailVC = StoryboardViewControllerResource<EventDetailVC>(identifier: "EventDetailVC")
      let eventsInboxVC = StoryboardViewControllerResource<EventsInboxVC>(identifier: "EventsInboxVC")
      let findStoreVC = StoryboardViewControllerResource<FindStoreVC>(identifier: "FindStoreVC")
      let genderSelectionVC = StoryboardViewControllerResource<GenderSelectionVC>(identifier: "GenderSelectionVC")
      let inboxContainerVC = StoryboardViewControllerResource<InboxContainerVC>(identifier: "InboxContainerVC")
      let inboxTicketVC = StoryboardViewControllerResource<InboxTicketVC>(identifier: "InboxTicketVC")
      let inboxVC = StoryboardViewControllerResource<InboxVC>(identifier: "InboxVC")
      let myFavoritesContainerVC = StoryboardViewControllerResource<MyFavoritesContainerVC>(identifier: "MyFavoritesContainerVC")
      let myFavoritesVC = StoryboardViewControllerResource<MyFavoritesVC>(identifier: "MyFavoritesVC")
      let myPointsFilterVC = StoryboardViewControllerResource<MyPointsFilterVC>(identifier: "MyPointsFilterVC")
      let myPointsVC = StoryboardViewControllerResource<MyPointsVC>(identifier: "MyPointsVC")
      let myProfileVC = StoryboardViewControllerResource<MyProfileVC>(identifier: "MyProfileVC")
      let myPurchaseFilterVC = StoryboardViewControllerResource<MyPurchaseFilterVC>(identifier: "MyPurchaseFilterVC")
      let myPurchasesVC = StoryboardViewControllerResource<MyPurchasesVC>(identifier: "MyPurchasesVC")
      let name = "ProfileSB"
      let newsDetailVC = StoryboardViewControllerResource<NewsDetailVC>(identifier: "NewsDetailVC")
      let newsInboxVC = StoryboardViewControllerResource<NewsInboxVC>(identifier: "NewsInboxVC")
      let otherFavoritesVC = StoryboardViewControllerResource<OtherFavoritesVC>(identifier: "OtherFavoritesVC")
      let pisiffikFavoritesVC = StoryboardViewControllerResource<PisiffikFavoritesVC>(identifier: "PisiffikFavoritesVC")
      let recipeFavoritesVC = StoryboardViewControllerResource<RecipeFavoritesVC>(identifier: "RecipeFavoritesVC")
      let ticketDetailVC = StoryboardViewControllerResource<TicketDetailVC>(identifier: "TicketDetailVC")
      
      func countryVC(_: Void = ()) -> CountryVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: countryVC)
      }
      
      func directionVC(_: Void = ()) -> DirectionVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: directionVC)
      }
      
      func eventDetailVC(_: Void = ()) -> EventDetailVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: eventDetailVC)
      }
      
      func eventsInboxVC(_: Void = ()) -> EventsInboxVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: eventsInboxVC)
      }
      
      func findStoreVC(_: Void = ()) -> FindStoreVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: findStoreVC)
      }
      
      func genderSelectionVC(_: Void = ()) -> GenderSelectionVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: genderSelectionVC)
      }
      
      func inboxContainerVC(_: Void = ()) -> InboxContainerVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: inboxContainerVC)
      }
      
      func inboxTicketVC(_: Void = ()) -> InboxTicketVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: inboxTicketVC)
      }
      
      func inboxVC(_: Void = ()) -> InboxVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: inboxVC)
      }
      
      func myFavoritesContainerVC(_: Void = ()) -> MyFavoritesContainerVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: myFavoritesContainerVC)
      }
      
      func myFavoritesVC(_: Void = ()) -> MyFavoritesVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: myFavoritesVC)
      }
      
      func myPointsFilterVC(_: Void = ()) -> MyPointsFilterVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: myPointsFilterVC)
      }
      
      func myPointsVC(_: Void = ()) -> MyPointsVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: myPointsVC)
      }
      
      func myProfileVC(_: Void = ()) -> MyProfileVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: myProfileVC)
      }
      
      func myPurchaseFilterVC(_: Void = ()) -> MyPurchaseFilterVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: myPurchaseFilterVC)
      }
      
      func myPurchasesVC(_: Void = ()) -> MyPurchasesVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: myPurchasesVC)
      }
      
      func newsDetailVC(_: Void = ()) -> NewsDetailVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: newsDetailVC)
      }
      
      func newsInboxVC(_: Void = ()) -> NewsInboxVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: newsInboxVC)
      }
      
      func otherFavoritesVC(_: Void = ()) -> OtherFavoritesVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: otherFavoritesVC)
      }
      
      func pisiffikFavoritesVC(_: Void = ()) -> PisiffikFavoritesVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: pisiffikFavoritesVC)
      }
      
      func recipeFavoritesVC(_: Void = ()) -> RecipeFavoritesVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: recipeFavoritesVC)
      }
      
      func ticketDetailVC(_: Void = ()) -> TicketDetailVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ticketDetailVC)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "Flag_of_Denmark", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Flag_of_Denmark' is used in storyboard 'ProfileSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'background' is used in storyboard 'ProfileSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_add_ticket_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_add_ticket_icon' is used in storyboard 'ProfileSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_attach_file_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_attach_file_icon' is used in storyboard 'ProfileSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_back", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_back' is used in storyboard 'ProfileSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_cart_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_cart_icon' is used in storyboard 'ProfileSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_date_of_birth", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_date_of_birth' is used in storyboard 'ProfileSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_drop_down", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_drop_down' is used in storyboard 'ProfileSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_home", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_home' is used in storyboard 'ProfileSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_home_white_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_home_white_icon' is used in storyboard 'ProfileSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_left_chevron", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_left_chevron' is used in storyboard 'ProfileSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_right_arrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_right_arrow' is used in storyboard 'ProfileSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_search_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_search_icon' is used in storyboard 'ProfileSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_send_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_send_icon' is used in storyboard 'ProfileSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_valid_email_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_valid_email_icon' is used in storyboard 'ProfileSB', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "BackgroundColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'BackgroundColor' is used in storyboard 'ProfileSB', but couldn't be loaded.") }
          if UIKit.UIColor(named: "DarkBlueColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'DarkBlueColor' is used in storyboard 'ProfileSB', but couldn't be loaded.") }
          if UIKit.UIColor(named: "DarkGrayColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'DarkGrayColor' is used in storyboard 'ProfileSB', but couldn't be loaded.") }
          if UIKit.UIColor(named: "LightBlueColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'LightBlueColor' is used in storyboard 'ProfileSB', but couldn't be loaded.") }
          if UIKit.UIColor(named: "LightGreenColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'LightGreenColor' is used in storyboard 'ProfileSB', but couldn't be loaded.") }
          if UIKit.UIColor(named: "NewBgColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'NewBgColor' is used in storyboard 'ProfileSB', but couldn't be loaded.") }
          if UIKit.UIColor(named: "TextBlackColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextBlackColor' is used in storyboard 'ProfileSB', but couldn't be loaded.") }
          if UIKit.UIColor(named: "TextBlueColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextBlueColor' is used in storyboard 'ProfileSB', but couldn't be loaded.") }
          if UIKit.UIColor(named: "TextGrayColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextGrayColor' is used in storyboard 'ProfileSB', but couldn't be loaded.") }
          if UIKit.UIColor(named: "TextLightGrayColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextLightGrayColor' is used in storyboard 'ProfileSB', but couldn't be loaded.") }
          if UIKit.UIColor(named: "TextWhiteColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextWhiteColor' is used in storyboard 'ProfileSB', but couldn't be loaded.") }
          if UIKit.UIColor(named: "appBoxesColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'appBoxesColor' is used in storyboard 'ProfileSB', but couldn't be loaded.") }
        }
        if _R.storyboard.profileSB().countryVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'countryVC' could not be loaded from storyboard 'ProfileSB' as 'CountryVC'.") }
        if _R.storyboard.profileSB().directionVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'directionVC' could not be loaded from storyboard 'ProfileSB' as 'DirectionVC'.") }
        if _R.storyboard.profileSB().eventDetailVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'eventDetailVC' could not be loaded from storyboard 'ProfileSB' as 'EventDetailVC'.") }
        if _R.storyboard.profileSB().eventsInboxVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'eventsInboxVC' could not be loaded from storyboard 'ProfileSB' as 'EventsInboxVC'.") }
        if _R.storyboard.profileSB().findStoreVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'findStoreVC' could not be loaded from storyboard 'ProfileSB' as 'FindStoreVC'.") }
        if _R.storyboard.profileSB().genderSelectionVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'genderSelectionVC' could not be loaded from storyboard 'ProfileSB' as 'GenderSelectionVC'.") }
        if _R.storyboard.profileSB().inboxContainerVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'inboxContainerVC' could not be loaded from storyboard 'ProfileSB' as 'InboxContainerVC'.") }
        if _R.storyboard.profileSB().inboxTicketVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'inboxTicketVC' could not be loaded from storyboard 'ProfileSB' as 'InboxTicketVC'.") }
        if _R.storyboard.profileSB().inboxVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'inboxVC' could not be loaded from storyboard 'ProfileSB' as 'InboxVC'.") }
        if _R.storyboard.profileSB().myFavoritesContainerVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'myFavoritesContainerVC' could not be loaded from storyboard 'ProfileSB' as 'MyFavoritesContainerVC'.") }
        if _R.storyboard.profileSB().myFavoritesVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'myFavoritesVC' could not be loaded from storyboard 'ProfileSB' as 'MyFavoritesVC'.") }
        if _R.storyboard.profileSB().myPointsFilterVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'myPointsFilterVC' could not be loaded from storyboard 'ProfileSB' as 'MyPointsFilterVC'.") }
        if _R.storyboard.profileSB().myPointsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'myPointsVC' could not be loaded from storyboard 'ProfileSB' as 'MyPointsVC'.") }
        if _R.storyboard.profileSB().myProfileVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'myProfileVC' could not be loaded from storyboard 'ProfileSB' as 'MyProfileVC'.") }
        if _R.storyboard.profileSB().myPurchaseFilterVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'myPurchaseFilterVC' could not be loaded from storyboard 'ProfileSB' as 'MyPurchaseFilterVC'.") }
        if _R.storyboard.profileSB().myPurchasesVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'myPurchasesVC' could not be loaded from storyboard 'ProfileSB' as 'MyPurchasesVC'.") }
        if _R.storyboard.profileSB().newsDetailVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'newsDetailVC' could not be loaded from storyboard 'ProfileSB' as 'NewsDetailVC'.") }
        if _R.storyboard.profileSB().newsInboxVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'newsInboxVC' could not be loaded from storyboard 'ProfileSB' as 'NewsInboxVC'.") }
        if _R.storyboard.profileSB().otherFavoritesVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'otherFavoritesVC' could not be loaded from storyboard 'ProfileSB' as 'OtherFavoritesVC'.") }
        if _R.storyboard.profileSB().pisiffikFavoritesVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'pisiffikFavoritesVC' could not be loaded from storyboard 'ProfileSB' as 'PisiffikFavoritesVC'.") }
        if _R.storyboard.profileSB().recipeFavoritesVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'recipeFavoritesVC' could not be loaded from storyboard 'ProfileSB' as 'RecipeFavoritesVC'.") }
        if _R.storyboard.profileSB().ticketDetailVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ticketDetailVC' could not be loaded from storyboard 'ProfileSB' as 'TicketDetailVC'.") }
      }
      
      fileprivate init() {}
    }
    
    struct purchaseSB: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let cancelOrderDoneVC = StoryboardViewControllerResource<CancelOrderDoneVC>(identifier: "CancelOrderDoneVC")
      let cancelOrderVC = StoryboardViewControllerResource<CancelOrderVC>(identifier: "CancelOrderVC")
      let name = "PurchaseSB"
      let onlinePurchaseVC = StoryboardViewControllerResource<OnlinePurchaseVC>(identifier: "OnlinePurchaseVC")
      let storePurchaseVC = StoryboardViewControllerResource<StorePurchaseVC>(identifier: "StorePurchaseVC")
      
      func cancelOrderDoneVC(_: Void = ()) -> CancelOrderDoneVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: cancelOrderDoneVC)
      }
      
      func cancelOrderVC(_: Void = ()) -> CancelOrderVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: cancelOrderVC)
      }
      
      func onlinePurchaseVC(_: Void = ()) -> OnlinePurchaseVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: onlinePurchaseVC)
      }
      
      func storePurchaseVC(_: Void = ()) -> StorePurchaseVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: storePurchaseVC)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'background' is used in storyboard 'PurchaseSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_back", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_back' is used in storyboard 'PurchaseSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_delivered_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_delivered_icon' is used in storyboard 'PurchaseSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_green_tick", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_green_tick' is used in storyboard 'PurchaseSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_home", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_home' is used in storyboard 'PurchaseSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_phone_call_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_phone_call_icon' is used in storyboard 'PurchaseSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_pickup_done_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_pickup_done_icon' is used in storyboard 'PurchaseSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_sent_to_done_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_sent_to_done_icon' is used in storyboard 'PurchaseSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "location_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'location_icon' is used in storyboard 'PurchaseSB', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "DarkBlueColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'DarkBlueColor' is used in storyboard 'PurchaseSB', but couldn't be loaded.") }
          if UIKit.UIColor(named: "LightGreenColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'LightGreenColor' is used in storyboard 'PurchaseSB', but couldn't be loaded.") }
          if UIKit.UIColor(named: "NewBgColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'NewBgColor' is used in storyboard 'PurchaseSB', but couldn't be loaded.") }
          if UIKit.UIColor(named: "TextBlueColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextBlueColor' is used in storyboard 'PurchaseSB', but couldn't be loaded.") }
          if UIKit.UIColor(named: "TextGrayColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextGrayColor' is used in storyboard 'PurchaseSB', but couldn't be loaded.") }
          if UIKit.UIColor(named: "TextLightGrayColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextLightGrayColor' is used in storyboard 'PurchaseSB', but couldn't be loaded.") }
          if UIKit.UIColor(named: "TextWhiteColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextWhiteColor' is used in storyboard 'PurchaseSB', but couldn't be loaded.") }
        }
        if _R.storyboard.purchaseSB().cancelOrderDoneVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'cancelOrderDoneVC' could not be loaded from storyboard 'PurchaseSB' as 'CancelOrderDoneVC'.") }
        if _R.storyboard.purchaseSB().cancelOrderVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'cancelOrderVC' could not be loaded from storyboard 'PurchaseSB' as 'CancelOrderVC'.") }
        if _R.storyboard.purchaseSB().onlinePurchaseVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'onlinePurchaseVC' could not be loaded from storyboard 'PurchaseSB' as 'OnlinePurchaseVC'.") }
        if _R.storyboard.purchaseSB().storePurchaseVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'storePurchaseVC' could not be loaded from storyboard 'PurchaseSB' as 'StorePurchaseVC'.") }
      }
      
      fileprivate init() {}
    }
    
    struct splashScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "SplashScreen"
      
      static func validate() throws {
        if UIKit.UIImage(named: "app_logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'app_logo' is used in storyboard 'SplashScreen', but couldn't be loaded.") }
        if UIKit.UIImage(named: "background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'background' is used in storyboard 'SplashScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "BackgroundColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'BackgroundColor' is used in storyboard 'SplashScreen', but couldn't be loaded.") }
        }
      }
      
      fileprivate init() {}
    }
    
    struct storeSB: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let myMembershipCardVC = StoryboardViewControllerResource<MyMembershipCardVC>(identifier: "MyMembershipCardVC")
      let name = "StoreSB"
      let productInfoVC = StoryboardViewControllerResource<ProductInfoVC>(identifier: "ProductInfoVC")
      let storeHelpVC = StoryboardViewControllerResource<StoreHelpVC>(identifier: "StoreHelpVC")
      
      func myMembershipCardVC(_: Void = ()) -> MyMembershipCardVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: myMembershipCardVC)
      }
      
      func productInfoVC(_: Void = ()) -> ProductInfoVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: productInfoVC)
      }
      
      func storeHelpVC(_: Void = ()) -> StoreHelpVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: storeHelpVC)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'background' is used in storyboard 'StoreSB', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "BackgroundColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'BackgroundColor' is used in storyboard 'StoreSB', but couldn't be loaded.") }
          if UIKit.UIColor(named: "DarkBlueColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'DarkBlueColor' is used in storyboard 'StoreSB', but couldn't be loaded.") }
          if UIKit.UIColor(named: "LightGreenColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'LightGreenColor' is used in storyboard 'StoreSB', but couldn't be loaded.") }
          if UIKit.UIColor(named: "TextBlackColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextBlackColor' is used in storyboard 'StoreSB', but couldn't be loaded.") }
          if UIKit.UIColor(named: "TextGrayColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextGrayColor' is used in storyboard 'StoreSB', but couldn't be loaded.") }
        }
        if _R.storyboard.storeSB().myMembershipCardVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'myMembershipCardVC' could not be loaded from storyboard 'StoreSB' as 'MyMembershipCardVC'.") }
        if _R.storyboard.storeSB().productInfoVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'productInfoVC' could not be loaded from storyboard 'StoreSB' as 'ProductInfoVC'.") }
        if _R.storyboard.storeSB().storeHelpVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'storeHelpVC' could not be loaded from storyboard 'StoreSB' as 'StoreHelpVC'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
